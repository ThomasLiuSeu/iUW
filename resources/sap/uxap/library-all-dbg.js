// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.uxap.library-all');
if ( !jQuery.sap.isDeclared('sap.uxap.AnchorBarRenderer') ) {
  jQuery.sap.declare('sap.uxap.AnchorBarRenderer');
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ToolbarRenderer'); // unlisted dependency retained


/**
 * @class ObjectPageRenderer renderer.
 * @static
 */
sap.uxap.AnchorBarRenderer = {};
sap.uxap.AnchorBarRenderer = sap.ui.core.Renderer.extend(sap.m.ToolbarRenderer);

sap.uxap.AnchorBarRenderer.renderBarContent = function (rm, oToolbar) {

	if (oToolbar._bTabletScenario) {
		rm.renderControl(oToolbar._oArrowLeft);

		rm.write("<div");
		rm.writeAttributeEscaped("id", oToolbar.getId() + "-scrollContainer");
		rm.addClass("sapUxAPAnchorBarScrollContainer");
		rm.writeClasses();
		rm.write(">");

		rm.write("<div");
		rm.writeAttributeEscaped("id", oToolbar.getId() + "-scroll");
		rm.write(">");

		sap.m.ToolbarRenderer.renderBarContent.apply(this, arguments);

		rm.write("</div>");

		rm.write("</div>");

		rm.renderControl(oToolbar._oArrowRight);
	}

	//also render the mobile friendly control
	if (oToolbar._bPhoneScenario) {
		sap.m.BarInPageEnabler.addChildClassTo(oToolbar._oPhoneAction, oToolbar);
		rm.renderControl(oToolbar._oPhoneAction);
	}

};
}; // end of sap/uxap/AnchorBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.BlockBaseMetadata') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

// Provides class sap.uxap.BlockBaseMetadata
jQuery.sap.declare('sap.uxap.BlockBaseMetadata'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ElementMetadata'); // unlisted dependency retained
sap.ui.define("sap/uxap/BlockBaseMetadata",['jquery.sap.global', 'sap/ui/core/ElementMetadata'],
	function (jQuery, ElementMetadata) {
		"use strict";


		/**
		 * Creates a new metadata object for a BlockBase subclass.
		 *
		 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
		 * @param {object} oClassInfo static info to construct the metadata from
		 *
		 * @class
		 * @author SAP SE
		 * @version 1.28.0
		 * @since 1.22.1
		 * @name sap.uxap.BlockBaseMetadata
		 */
		var BlockBaseMetadata = function (sClassName, oClassInfo) {

			// call super constructor
			ElementMetadata.apply(this, arguments);
			this._mViews = oClassInfo.metadata.views || {};

		};

		//chain the prototypes
		BlockBaseMetadata.prototype = jQuery.sap.newObject(ElementMetadata.prototype);

		BlockBaseMetadata.prototype.applySettings = function (oClassInfo) {
			var vRenderer = oClassInfo.hasOwnProperty("renderer") ? (oClassInfo.renderer || "") : undefined;
			ElementMetadata.prototype.applySettings.call(this, oClassInfo);
			if (vRenderer == null) {
				// If a renderer has been defined on the block then use it, otherwise use the BlockBaseRenderer
				this._sRendererName = null;
			}
		};

		/**
		 * Determines the class name of the renderer for the described control class.
		 * @name sap.uxap.BlockBaseMetadata#getRendererName
		 * @function
		 */
		BlockBaseMetadata.prototype.getRendererName = function () {

			//if we have not resolved the renderer yet
			if (!this._sBlockRenderer) {
				this._sBlockRenderer = this._resolveRendererName();
				jQuery.sap.log.debug("BlockBaseMetadata :: " + this.getName() + " is renderer with " + this._sBlockRenderer);
			}

			return this._sBlockRenderer;
		};

		BlockBaseMetadata.prototype._resolveRendererName = function () {
			var sCandidateRenderer = ElementMetadata.prototype.getRendererName.call(this);

			//we test if a specific render has been provided, in this case we keep it
			if (sCandidateRenderer == null) {
				var oParent = this.getParent();
				if (oParent) {
					sCandidateRenderer = BlockBaseMetadata.prototype._resolveRendererName.apply(oParent);
				}
				else {
					throw new Error("BlockBaseMetadata :: no renderer found for " + this.getName());
				}
			}
			return sCandidateRenderer;
		};


		/**
		 * return a view from its name
		 * @param sViewName
		 * @returns {*}
		 */
		BlockBaseMetadata.prototype.getView = function (sViewName) {
			return this._mViews[sViewName];
		};

		/**
		 * return the view definition object
		 * @returns {*}
		 */
		BlockBaseMetadata.prototype.getViews = function () {
			return this._mViews;
		};

		/**
		 * setter for the view
		 * @param sViewName
		 * @param oViewParameters
		 * @returns {*}
		 */
		BlockBaseMetadata.prototype.setView = function (sViewName, oViewParameters) {
			this._mViews[sViewName] = oViewParameters;
			return this;
		};

		/**
		 * checks whether some view are defined
		 * @returns {*}
		 */
		BlockBaseMetadata.prototype.hasViews = function () {
			return !jQuery.isEmptyObject(this._mViews);
		};

		return BlockBaseMetadata;

	}, /* bExport= */ true);

}; // end of sap/uxap/BlockBaseMetadata.js
if ( !jQuery.sap.isDeclared('sap.uxap.BlockBaseRenderer') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.uxap.BlockBaseRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


sap.uxap.BlockBaseRenderer = {};

sap.uxap.BlockBaseRenderer.render = function (oRm, oControl) {

	if (!oControl.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.writeControlData(oControl);
	if (oControl._getSelectedViewContent()) {
		oRm.addClass('sapUxAPBlockBase');
		oRm.addClass("sapUxAPBlockBase" + oControl.getMode());
	}
	else {
		var sClassShortName = oControl.getMetadata().getName().split(".").pop();

		oRm.addClass('sapUxAPBlockBaseDefaultSize');
		oRm.addClass('sapUxAPBlockBaseDefaultSize' + sClassShortName + oControl.getMode());
	}
	oRm.writeClasses();
	oRm.write(">");

	if (oControl._getSelectedViewContent()) {
		oRm.renderControl(oControl._getSelectedViewContent());
	}
	oRm.write("</div>");
};
}; // end of sap/uxap/BlockBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.HierarchicalSelectRenderer') ) {
  jQuery.sap.declare('sap.uxap.HierarchicalSelectRenderer');
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained

jQuery.sap.require('sap.m.SelectType'); // unlisted dependency retained


/**
 * @class ObjectPageRenderer renderer.
 * @static
 */
sap.uxap.HierarchicalSelectRenderer = {};


/**
 * CSS class to be applied to the HTML root element of the Select control.
 *
 * @type {string}
 */
sap.uxap.HierarchicalSelectRenderer.CSS_CLASS = "sapMSlt";

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.uxap.HierarchicalSelect} oSelect An object representation of the control that should be rendered.
 */
sap.uxap.HierarchicalSelectRenderer.render = function (oRm, oSelect) {
	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oSelect, oSelect.getTooltip_AsString()),
		sType = oSelect.getType(),
		bAutoAdjustWidth = oSelect.getAutoAdjustWidth(),
		bEnabled = oSelect.getEnabled(),
		CSS_CLASS = sap.uxap.HierarchicalSelectRenderer.CSS_CLASS;

	// suppress rendering if not visible
	if (!oSelect.getVisible()) {
		return;
	}

	oRm.write("<div");
	this.addStyleClass(oRm, oSelect);
	oRm.addClass(CSS_CLASS);
	oRm.addClass("sapUxAPHierarchicalSelect");
	oRm.addClass(CSS_CLASS + oSelect.getType());

	if (!bEnabled) {
		oRm.addClass(CSS_CLASS + "Disabled");
	}

	if (bAutoAdjustWidth) {
		oRm.addClass(CSS_CLASS + "AutoAdjustedWidth");
	} else {
		oRm.addStyle("width", oSelect.getWidth());
	}

	if (oSelect.getIcon()) {
		oRm.addClass(CSS_CLASS + "WithIcon");
	}

	if (bEnabled && sap.ui.Device.system.desktop) {
		oRm.addClass(CSS_CLASS + "Hoverable");
	}

	oRm.addClass(CSS_CLASS + "WithArrow");
	oRm.addStyle("max-width", oSelect.getMaxWidth());
	oRm.writeControlData(oSelect);
	oRm.writeStyles();
	oRm.writeClasses();

	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	if (bEnabled) {
		oRm.writeAttribute("tabindex", "0");
	}

	oRm.write(">");

	switch (sType) {
		case sap.m.SelectType.Default:
			this.renderLabel(oRm, oSelect);
			this.renderArrow(oRm, oSelect);
			break;

		case sap.m.SelectType.IconOnly:
			this.renderIcon(oRm, oSelect);
			break;

		default:
		// no default
	}

	if (oSelect._isRequiredSelectElement()) {
		this.renderSelectElement(oRm, oSelect);
	}

	oRm.write("</div>");
};

/**
 * Renders the select's label, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.uxap.HierarchicalSelect} oSelect An object representation of the control that should be rendered.
 * @private
 */
sap.uxap.HierarchicalSelectRenderer.renderLabel = function (oRm, oSelect) {
	var oSelectedItem = oSelect.getSelectedItem();

	oRm.write('<label ');
	oRm.addClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + 'Label');
	oRm.writeClasses();
	oRm.writeAttributeEscaped("id", oSelect.getId() + "-label");
	oRm.writeAttributeEscaped("for", oSelect.getId());
	oRm.write(">");
	oRm.writeEscaped(oSelectedItem ? oSelectedItem.getText() : "");
	oRm.write('</label>');
};

/**
 * Renders the select's arrow, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @private
 */
sap.uxap.HierarchicalSelectRenderer.renderArrow = function (oRm, oSelect) {
	oRm.write('<span ');
	oRm.addClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + 'Arrow');
	oRm.writeClasses();
	oRm.writeAttributeEscaped("id", oSelect.getId() + "-arrow");
	oRm.write("></span>");
};

/**
 * Renders the select's icon, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {string} oSelect
 * @private
 */
sap.uxap.HierarchicalSelectRenderer.renderIcon = function (oRm, oSelect) {
	oRm.writeIcon(oSelect.getIcon(), sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Icon");
};

/**
 * Renders the HTMLSelectElement for the select control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.uxap.HierarchicalSelect} oSelect An object representation of the select that should be rendered.
 * @private
 */
sap.uxap.HierarchicalSelectRenderer.renderSelectElement = function (oRm, oSelect) {
	var sName = oSelect.getName(),
		oSelectedItem = oSelect.getSelectedItem(),
		sSelectedItemText = oSelectedItem ? oSelectedItem.getText() : "";

	oRm.write('<select ');
	oRm.addClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Native");
	oRm.writeClasses();

	if (sName) {
		oRm.writeAttributeEscaped("name", sName);
	}

	oRm.writeAttribute("tabindex", "-1");
	oRm.write(">");
	this.renderOptions(oRm, oSelect, sSelectedItemText);
	oRm.write("</select>");
};

/**
 * Renders the HTMLOptionElement(s) for the select control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.uxap.HierarchicalSelect} oSelect An object representation of the select that should be rendered.
 * @param {string} sSelectedItemText
 * @private
 */
sap.uxap.HierarchicalSelectRenderer.renderOptions = function (oRm, oSelect, sSelectedItemText) {
	var aItems = oSelect.getItems(),
		aItemsLength = aItems.length,
		i = 0;

	for (; i < aItemsLength; i++) {
		oRm.write("<option>");
		oRm.writeEscaped(aItems[i].getText());
		oRm.write("</option>");
	}

	if (aItemsLength === 0) {
		oRm.write("<option>" + sSelectedItemText + "</option>");
	}
};

/**
 * This method is reserved for derived class to add extra classes to the HTML root element of the control.
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oSelect An object representation of the control that should be rendered.
 * @protected
 */
sap.uxap.HierarchicalSelectRenderer.addStyleClass = function (oRm, oSelect) {
};

}; // end of sap/uxap/HierarchicalSelectRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageHeaderActionButtonRenderer') ) {
  jQuery.sap.declare('sap.uxap.ObjectPageHeaderActionButtonRenderer');
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained


/**
 * @class ObjectPageRenderer renderer.
 * @static
 */
sap.uxap.ObjectPageHeaderActionButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

}; // end of sap/uxap/ObjectPageHeaderActionButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageHeaderRenderer') ) {
  jQuery.sap.declare('sap.uxap.ObjectPageHeaderRenderer');
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class HeaderBase renderer.
 * @static
 */
sap.uxap.ObjectPageHeaderRenderer = {};

sap.uxap.ObjectPageHeaderRenderer.render = function (oRm, oControl) {

	var oNavigationBar = oControl.getNavigationBar();

	var bTitleVisible = (oControl.getIsObjectIconAlwaysVisible() || oControl.getIsObjectTitleAlwaysVisible() || oControl.getIsObjectSubtitleAlwaysVisible() || oControl.getIsActionAreaAlwaysVisible());

	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass('sapUxAPObjectPageHeader');
	oRm.addClass('sapUxAPObjectPageHeaderDesign-' + oControl.getHeaderDesign());
	oRm.writeClasses();
	oRm.write(">");
	// if an navigationBar has been provided display it

	if (oNavigationBar) {
		oRm.write("<div");
		oRm.addClass('sapUxAPObjectPageHeaderNavigation');
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oNavigationBar);
		oRm.write("</div>");
	}

	// first line
	oRm.write("<div");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-identifierLine");
	oRm.addClass('sapUxAPObjectPageHeaderIdentifier');
	if (bTitleVisible) {
		oRm.addClass('sapUxAPObjectPageHeaderIdentifierForce');
	}
	oRm.writeClasses();
	oRm.write(">");

	// If picturePath is provided show image
	if (oControl.getObjectImageURI()) {
		oRm.write("<span ");
		oRm.addClass('sapUxAPObjectPageHeaderObjectImageContainer');
		oRm.addClass('sapUxAPObjectPageHeaderObjectImage-' + oControl.getObjectImageShape());
		if (oControl.getIsObjectIconAlwaysVisible()) {
			oRm.addClass('sapUxAPObjectPageHeaderObjectImageForce');
		}
		oRm.writeClasses();
		oRm.write(">")
		oRm.write("<span class='sapUxAPObjectPageHeaderObjectImageContainerSub'>");
		oRm.renderControl(oControl.getAggregation("_objectImage"));
		oRm.write("</span>");
		oRm.write("</span>");
	}
	oRm.write("<span ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-identifierLineContainer");
	oRm.addClass('sapUxAPObjectPageHeaderIdentifierContainer');
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("<span ");
	oRm.addClass('sapUxAPObjectPageHeaderIdentifierTitle');
	if (oControl.getIsObjectTitleAlwaysVisible()) {
		oRm.addClass('sapUxAPObjectPageHeaderIdentifierTitleForce');
	}
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oControl.getObjectTitle());
	oRm.write("</span>");
	oRm.write("<span");
	oRm.addClass('sapUxAPObjectPageHeaderIdentifierDescription');
	if (oControl.getIsObjectSubtitleAlwaysVisible()) {
		oRm.addClass('sapUxAPObjectPageHeaderIdentifierDescriptionForce');
	}
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oControl.getObjectSubtitle());
	oRm.write("</span>");
	oRm.write("</span>");

	oRm.write("<span");
	oRm.addClass('sapUxAPObjectPageHeaderIdentifierActions');
	if (oControl.getIsActionAreaAlwaysVisible()) {
		oRm.addClass('sapUxAPObjectPageHeaderIdentifierActionsForce');
	}
	oRm.writeClasses();
	oRm.write(">");
	var aActions = oControl.getActions();
	for (var i = 0; i < aActions.length; i++) {
		var oAction = aActions[i];
		oRm.renderControl(oAction);
	}
	var oOverflowButton = oControl.getAggregation("_overflowButton");
	oRm.renderControl(oOverflowButton);
	oRm.write("</span>");

	oRm.write("</div>");

	oRm.write("</div>");
};

}; // end of sap/uxap/ObjectPageHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageLayoutRenderer') ) {
  jQuery.sap.declare('sap.uxap.ObjectPageLayoutRenderer');
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ObjectPageRenderer renderer.
 * @static
 */
sap.uxap.ObjectPageLayoutRenderer = {};

sap.uxap.ObjectPageLayoutRenderer.render = function (oRm, oControl) {
	var aSections,
		oHeader = oControl.getHeaderTitle(),
		oAnchorBar = null,
		aHeaderContent = oControl.getHeaderContent();

	if (oControl.getShowAnchorBar() && oControl._getInternalAnchorBarVisible()) {
		oAnchorBar = oControl.getAggregation("_anchorBar");
	}

	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass('sapUxAPObjectPageLayout');
	oRm.writeClasses();
	oRm.addStyle("height", oControl.getHeight());
	oRm.writeStyles();
	oRm.write(">");

	// Header
	oRm.write("<header ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-headerTitle");
	oRm.addClass('sapUxAPObjectPageHeaderTitle');
	oRm.writeClasses();
	oRm.write(">");
	if (oHeader) {
		oRm.renderControl(oHeader);
	}
	// Sticky anchorBar placeholder
	oRm.write("<div ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-stickyAnchorBar");
	oRm.addClass('sapUxAPObjectPageStickyAnchorBar');
	oRm.writeClasses();
	oRm.write(">");
	oRm.write("</div>");
	oRm.write("</header>");


	oRm.write("<div ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-opwrapper");
	oRm.addClass('sapUxAPObjectPageWrapper');
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-scroll");
	oRm.addClass('sapUxAPObjectPageScroll');
	oRm.writeClasses();
	oRm.write(">");

	// Header Content
	oRm.write("<header ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-headerContent");
	oRm.addClass('sapUxAPObjectPageHeaderDetails');
	oRm.addClass('sapUxAPObjectPageHeaderDetailsDesign-' + oControl._getHeaderDesign());
	oRm.writeClasses();
	oRm.write(">");

	if (aHeaderContent) {
		oRm.write("<div ");
		oRm.addClass('sapUxAPObjectPageHeaderContent');
		oRm.writeClasses();
		oRm.write(">");

		for (var i = 0; i < aHeaderContent.length; i++) {
			var oHeaderContent = aHeaderContent[i];
			var oLayoutData = oControl._getLayoutDataForControl(oHeaderContent);
			var bHasSeparatorBefore = false;
			var bHasSeparatorAfter = false;

			if (oLayoutData) {

				bHasSeparatorBefore = oLayoutData.getShowSeparatorBefore();
				bHasSeparatorAfter = oLayoutData.getShowSeparatorAfter();

				oRm.write("<span ");
				oRm.addClass('sapUxAPObjectPageHeaderWidthContainer');
				oRm.addClass('sapUxAPObjectPageHeaderContentItem');
				oRm.addStyle("width", oLayoutData.getWidth());
				oRm.writeStyles();

				if (bHasSeparatorAfter || bHasSeparatorBefore) {
					oRm.addClass('sapUxAPObjectPageHeaderSeparatorContainer');
				}

				if (!oLayoutData.getVisibleL()) {
					oRm.addClass('sapUxAPObjectPageHeaderLayoutHiddenL');
				}
				if (!oLayoutData.getVisibleM()) {
					oRm.addClass('sapUxAPObjectPageHeaderLayoutHiddenM');
				}
				if (!oLayoutData.getVisibleS()) {
					oRm.addClass('sapUxAPObjectPageHeaderLayoutHiddenS');
				}

				oRm.writeClasses();
				oRm.write('>');

				if (bHasSeparatorBefore) {
					oRm.write("<span class='sapUxAPObjectPageHeaderSeparatorBefore'/>");
				}
			}
			else {
				oHeaderContent.addStyleClass("sapUxAPObjectPageHeaderContentItem");
			}

			oRm.renderControl(oHeaderContent);

			if (bHasSeparatorAfter) {
				oRm.write("<span class='sapUxAPObjectPageHeaderSeparatorAfter'/>");
			}

			if (oLayoutData) {
				oRm.write("</span>");
			}
		}

		oRm.write("</div>");
	}
	oRm.write("</header>");

	// Anchor Bar
	oRm.write("<section ");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-anchorBar");
	oRm.write(">");
	if (oAnchorBar) {
		oRm.renderControl(oAnchorBar);
	}
	oRm.write("</section>");

	// Content section
	oRm.write("<section");
	oRm.addClass('sapUxAPObjectPageContainer');
	if (!oAnchorBar) {
		oRm.addClass('sapUxAPObjectPageContainerNoBar');
	}
	oRm.writeClasses();
	oRm.write(">");
	aSections = oControl.getAggregation("sections");
	if (jQuery.isArray(aSections)) {
		jQuery.each(aSections, function (iIndex, oSection) {
			oRm.renderControl(oSection);
		});
	}
	oRm.write("</section>");

	// run hook method
	this.renderFooterContent(oRm, oControl);

	oRm.write("<div");
	oRm.writeAttributeEscaped("id", oControl.getId() + "-spacer");
	oRm.write(">");

	oRm.write("</div>");  // END scroll

	oRm.write("</div>"); // END wrapper

	oRm.write("</div>"); // END page
};

/**
 * This hook method is called to render objectpagelayout footer content
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.uxap.ObjectPageLayoutRenderer.renderFooterContent = function (oRm, oControl) {
};
}; // end of sap/uxap/ObjectPageLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageSectionRenderer') ) {
  jQuery.sap.declare('sap.uxap.ObjectPageSectionRenderer');
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Section renderer.
 * @static
 */
sap.uxap.ObjectPageSectionRenderer = {};

sap.uxap.ObjectPageSectionRenderer.render = function (oRm, oControl) {

	if (!oControl.getVisible() || !oControl._getInternalVisible()) {
		return;
	}

	oRm.write("<section ");
	oRm.addClass("sapUxAPObjectPageSection");
	oRm.writeClasses();
	oRm.writeControlData(oControl);
	oRm.write(">");

	if (oControl.getShowTitle() && oControl._getInternalTitleVisible()) {
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-header");
		oRm.addClass("sapUxAPObjectPageSectionHeader");
		oRm.writeClasses();
		oRm.write(">");

		if (oControl._getInternalTitle() != "") {
			oRm.writeEscaped(oControl._getInternalTitle());
		}
		else {
			oRm.writeEscaped(oControl.getTitle());
		}

		oRm.write("</div>");
	}

	oRm.write("<div");
	oRm.addClass("sapUxAPObjectPageSectionContainer");
	oRm.writeClasses();
	oRm.write(">");


	jQuery.each(oControl.getSubSections(), function (iIndex, oSubSection) {
		oRm.renderControl(oSubSection);
	});

	oRm.write("</div>");

	oRm.write("</section>");
};

}; // end of sap/uxap/ObjectPageSectionRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageSubSectionRenderer') ) {
  jQuery.sap.declare('sap.uxap.ObjectPageSubSectionRenderer');
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Section renderer.
 * @static
 */
sap.uxap.ObjectPageSubSectionRenderer = {};

sap.uxap.ObjectPageSubSectionRenderer.render = function (oRm, oControl) {

	if (!oControl.getVisible() || !oControl._getInternalVisible()) {
		return;
	}

	var aActions = oControl.getActions() || [];
	var bHasTitle = (oControl._getInternalTitleVisible() && (oControl.getTitle().trim() != ""));
	var bHasTitleLine = bHasTitle || aActions.length > 0;


	oRm.write("<div ");
	oRm.writeControlData(oControl);
	oRm.addClass("sapUxAPObjectPageSubSection");
	oRm.writeClasses(oControl);
	oRm.writeClasses();
	oRm.write(">");

	if (bHasTitleLine) {
		oRm.write("<div");
		oRm.addClass("sapUxAPObjectPageSubSectionHeader");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-header");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<div");
		oRm.addClass('sapUxAPObjectPageSubSectionHeaderTitle');
		oRm.writeAttributeEscaped("id", oControl.getId() + "-headerTitle");
		oRm.writeClasses();
		oRm.write(">");
		if (bHasTitle) {
			oRm.writeEscaped(oControl.getTitle());
		}
		oRm.write("</div>");

		if (aActions.length > 0) {
			oRm.write("<div");
			oRm.addClass('sapUxAPObjectPageSubSectionHeaderActions');
			oRm.writeClasses();
			oRm.write(">");

			jQuery.each(aActions, function (iIndex, oButton) {
				oRm.renderControl(oButton);
			});

			oRm.write("</div>");
		}

		oRm.write("</div>");
	}

	oRm.write("<div");
	oRm.addClass("sapUxAPBlockContainer");
	oRm.writeClasses();
	oRm.write(">");

	oRm.renderControl(oControl._oGrid);

	oRm.write("</div>");

	oRm.write("<div");
	oRm.addClass("sapUxAPSubSectionSeeMoreContainer");
	oRm.writeClasses();
	oRm.write(">");

	oRm.renderControl(oControl._oSeeMoreButton);

	oRm.write("</div>");


	oRm.write("</div>");
};

}; // end of sap/uxap/ObjectPageSubSectionRenderer.js
if ( !jQuery.sap.isDeclared('sap.uxap.component.Component') ) {
(function () {
	'use strict';
	jQuery.sap.declare("sap.uxap.component.Component");
	jQuery.sap.require('sap.uxap.ObjectPageConfigurationMode'); // unlisted dependency retained


	sap.ui.core.UIComponent.extend("sap.uxap.component.Component", {
		metadata: {
			/* nothing new compared to a standard UIComponent */
		},

		/**
		 * initialize the view containing the objectPageLayout
		 */
		init: function () {

			//step1: create model from configuration
			this._oModel = null;               //internal component model
			this._oViewConfig = {              //internal view configuration
				viewData: {
					component: this
				}
			};

			//step2: load model from the component configuration
			switch (this.oComponentData.mode) {
				case sap.uxap.ObjectPageConfigurationMode.JsonURL:
					// jsonUrl bootstraps the ObjectPageLayout on a json config url jsonConfigurationURL
					// case 1: load from an XML view + json for the object page layout configuration
					this._oModel = new sap.ui.model.json.JSONModel(this.oComponentData.jsonConfigurationURL);
					this._oViewConfig.viewName = "sap.uxap.component.ObjectPageLayoutUXDrivenFactory";
					this._oViewConfig.type = sap.ui.core.mvc.ViewType.XML;
					break;
				case sap.uxap.ObjectPageConfigurationMode.JsonModel:
					// JsonModel bootstraps the ObjectPageLayout from the external model objectPageLayoutMedatadata
					this._oViewConfig.viewName = "sap.uxap.component.ObjectPageLayoutUXDrivenFactory";
					this._oViewConfig.type = sap.ui.core.mvc.ViewType.XML;
					break;
				default:
					jQuery.sap.log.error("UxAPComponent :: missing bootstrap information. Expecting one of the following: JsonURL, JsonModel and FacetsAnnotation");
			}
			//create the UIComponent
			sap.ui.core.UIComponent.prototype.init.call(this);
		},

		/**
		 * create view corresponding to the chosen config
		 */
		createContent: function () {
			var oController;

			//step3: create view
			this._oView = sap.ui.view(this._oViewConfig);

			//step4: bind the view with the model
			if (this._oModel) {
				oController = this._oView.getController();

				//some factory requires pre-processing once the view and model are created
				if (oController && oController.connectToComponent) {
					oController.connectToComponent(this._oModel);
				}

				//can now apply the model and rely on the underlying factory logic
				this._oView.setModel(this._oModel, "objectPageLayoutMetadata");
			}

			return this._oView;
		},


		/**
		 * traps propagated properties for postprocessing on useExternalModel cases
		 * @param vName
		 * @returns {*}
		 */
		propagateProperties: function (vName) {

			if (this.oComponentData.mode === sap.uxap.ObjectPageConfigurationMode.JsonModel) {
				var oController = this._oView.getController();

				//some factory requires post-processing once the view and model are created
				if (oController && oController.connectToComponent) {
					oController.connectToComponent(this.getModel("objectPageLayoutMetadata"));
				}
			}

			return sap.ui.core.UIComponent.prototype.propagateProperties.apply(this, arguments);
		},

		/**
		 * destroy the view and model before exiting
		 */
		destroy: function () {
			if (this._oView) {
				this._oView.destroy();
				this._oView = null;
			}

			if (this._oModel) {
				this._oModel.destroy();
				this._oModel = null;
			}

			if (sap.ui.core.UIComponent.prototype.destroy) {
				sap.ui.core.UIComponent.prototype.destroy.call(this);
			}
		}

	});

}());

}; // end of sap/uxap/component/Component.js
if ( !jQuery.sap.isDeclared('sap.uxap.component.ObjectPageComponentContainer') ) {
  jQuery.sap.declare('sap.uxap.component.ObjectPageComponentContainer');
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained

jQuery.sap.require('sap.uxap.ObjectPageConfigurationMode'); // unlisted dependency retained

/**
 * The objectPageComponentContainer initialize and render an objectPageLayout
 */
sap.ui.core.ComponentContainer.extend("sap.uxap.component.ObjectPageComponentContainer", {
	metadata: {
		properties: {
			"jsonConfigurationURL": {type: "string", group: "Behavior"},
			"mode": {type: "sap.uxap.ObjectPageConfigurationMode", group: "Behavior"}
		}
	},

	/**
	 *  initialize the component container and set default configuration
	 */
	init: function () {
		//set default config
		this.setPropagateModel(true);
		this.setName("sap.uxap.component");
	},

	/**
	 * this ComponentContainer is working only with one component: the objectPageLayout
	 * unlike the standard ComponentContainer, this ones exposes properties to the outside world and pass them on to the underlying component
	 */
	onBeforeRendering: function () {

		this._oComponent = sap.ui.component("sap.uxap");
		if (!this._oComponent) {
			this._oComponent = sap.ui.component({
				name: this.getName(),
				url: this.getUrl(),
				componentData: {            //forward configuration to underlying component
					jsonConfigurationURL: this.getJsonConfigurationURL(),
					mode: this.getMode()
				}
			});

			this.setComponent(this._oComponent, true);
		}

		// call the parent onBeforeRendering
		if (sap.ui.core.ComponentContainer.prototype.onBeforeRendering) {
			sap.ui.core.ComponentContainer.prototype.onBeforeRendering.call(this);
		}
	},

	/**
	 * returns the instantiated objectPageLayout for further api manipulations or null if not not rendered already
	 */
	getObjectPageLayoutInstance: function () {
		var oObjectPageLayoutInstance = null;
		if (this._oComponent && this._oComponent._oView) {
			oObjectPageLayoutInstance = this._oComponent._oView.byId("ObjectPageLayout");
		}
		else {
			jQuery.sap.log.error("ObjectPageComponentContainer :: cannot find children ObjectPageLayout, has it been rendered already?");
		}

		return oObjectPageLayoutInstance;
	},

	/**
	 * use the standard renderer
	 */
	renderer: "sap.ui.core.ComponentContainerRenderer"
});
}; // end of sap/uxap/component/ObjectPageComponentContainer.js
if ( !jQuery.sap.isDeclared('sap.uxap.library') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.uxap (1.28.0)
 */
jQuery.sap.declare("sap.uxap.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UxAP
 *
 * @namespace
 * @name sap.uxap
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.uxap",
	dependencies : ["sap.ui.core"],
	types: [
		"sap.uxap.BlockBaseColumnLayout",
		"sap.uxap.ObjectPageConfigurationMode",
		"sap.uxap.ObjectPageHeaderDesign",
		"sap.uxap.ObjectPageHeaderPictureShape",
		"sap.uxap.ObjectPageSubSectionLayout",
		"sap.uxap.ObjectPageSubSectionMode"
	],
	interfaces: [],
	controls: [
		"sap.uxap.AnchorBar",
		"sap.uxap.BlockBase",
		"sap.uxap.HierarchicalSelect",
		"sap.uxap.ObjectPageHeader",
		"sap.uxap.ObjectPageHeaderActionButton",
		"sap.uxap.ObjectPageLayout",
		"sap.uxap.ObjectPageSection",
		"sap.uxap.ObjectPageSectionBase",
		"sap.uxap.ObjectPageSubSection"
	],
	elements: [
		"sap.uxap.ModelMapping",
		"sap.uxap.ObjectPageHeaderLayoutData"
	],
	version: "1.28.0"
});

/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.uxap.BlockBaseColumnLayout
jQuery.sap.declare('sap.uxap.BlockBaseColumnLayout');
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained


/**
 * @class Used by the BlockBase control to define how many columns should it be assigned by the objectPageSubSection.
 *     The allowed values can be auto (subsection assigned a number of columns based on the parent objectPageLayout subsectionLayout property), 1, 2 or 3
 *     (This may not be a valid value for some subSectionLayout, for example asking for 3 columns in a 2 column layout would raise warnings).
 *
 * @author SAP SE
 * @static
 * @public
 * @ui5-metamodel This simple type also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.BlockBaseColumnLayout = sap.ui.base.DataType.createType('sap.uxap.BlockBaseColumnLayout', {
    isValid : function(vValue) {
      return /^(auto|[1-3]{1})$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.uxap.ObjectPageConfigurationMode.
jQuery.sap.declare("sap.uxap.ObjectPageConfigurationMode");
/**
 * @class Used by the sap.uxap.component.Component how to initialize the ObjectPageLayout sections and subsections.
 *
 * @version 1.28.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageConfigurationMode = {

	/**
	 * 
	 * @public
	 */
	JsonURL : "JsonURL",

	/**
	 * 
	 * @public
	 */
	JsonModel : "JsonModel"

};
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.uxap.ObjectPageHeaderDesign.
jQuery.sap.declare("sap.uxap.ObjectPageHeaderDesign");
/**
 * @class Used by the ObjectPageHeader control to define which design to use.
 *
 * @version 1.28.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageHeaderDesign = {

	/**
	 * Light theme for the ObjectPageHeader.
	 * @public
	 */
	Light : "Light",

	/**
	 * Dark theme for the ObjectPageHeader.
	 * @public
	 */
	Dark : "Dark"

};
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.uxap.ObjectPageHeaderPictureShape.
jQuery.sap.declare("sap.uxap.ObjectPageHeaderPictureShape");
/**
 * @class Used by the ObjectPageHeader control to define which shape to use for the image.
 *
 * @version 1.28.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageHeaderPictureShape = {

	/**
	 * Circle shape for the images in the ObjectPageHeader.
	 * @public
	 */
	Circle : "Circle",

	/**
	 * Square shape for the images in the ObjectPageHeader.
	 * @public
	 */
	Square : "Square"

};
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.uxap.ObjectPageSubSectionLayout.
jQuery.sap.declare("sap.uxap.ObjectPageSubSectionLayout");
/**
 * @class Used by the ObjectPagSubSection control to define which layout to apply.
 *
 * @version 1.28.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageSubSectionLayout = {

	/**
	 * TitleOnTop: title and actions on top of the block area.
	 * @public
	 */
	TitleOnTop : "TitleOnTop",

	/**
	 * TitleOnLeft: title and actions on the left, inside the block area.
	 * @public
	 */
	TitleOnLeft : "TitleOnLeft"

};
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.uxap.ObjectPageSubSectionMode.
jQuery.sap.declare("sap.uxap.ObjectPageSubSectionMode");
/**
 * @class Used by the ObjectPageLayout control to define which layout to use (either Collapsed or Expanded).
 *
 * @version 1.28.0
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageSubSectionMode = {

	/**
	 * Collapsed mode of display of the ObjectPageLayout.
	 * @public
	 */
	Collapsed : "Collapsed",

	/**
	 * Expanded mode of displaying the ObjectPageLayout.
	 * @public
	 */
	Expanded : "Expanded"

};

}; // end of sap/uxap/library.js
if ( !jQuery.sap.isDeclared('sap.uxap.HierarchicalSelect') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.HierarchicalSelect.
jQuery.sap.declare("sap.uxap.HierarchicalSelect");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HierarchicalSelect.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getType type} : sap.m.SelectType (default: sap.m.SelectType.Default)</li>
 * <li>{@link #getAutoAdjustWidth autoAdjustWidth} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : string | sap.ui.core.Item</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uxap.HierarchicalSelect#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A select that display items on 2 level of hierarchy.
 * If a provided item has a custom data named "secondLevel", then it will be displayed as a second level, otherwise it would be displayed as a first level.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.HierarchicalSelect
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uxap.HierarchicalSelect", { metadata : {

	publicMethods : [
		// methods
		"isOpen", "close", "getItemByKey", "getFirstItem", "getLastItem", "getItemAt", "getEnabledItems"
	],
	library : "sap.uxap",
	properties : {
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"selectedKey" : {type : "string", group : "Data", defaultValue : null},
		"selectedItemId" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"type" : {type : "sap.m.SelectType", group : "Appearance", defaultValue : sap.m.SelectType.Default},
		"autoAdjustWidth" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
		"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item", bindable : "bindable"}, 
		"picker" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	associations : {
		"selectedItem" : {type : "sap.ui.core.Item", multiple : false}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.HierarchicalSelect with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.HierarchicalSelect.extend
 * @function
 */

sap.uxap.HierarchicalSelect.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.uxap.HierarchicalSelect#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#setName
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Determines whether the control is visible or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.uxap.HierarchicalSelect#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selected value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.uxap.HierarchicalSelect#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#setEnabled
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the select input. The default width of a select control depends on the width of the widest option/item in the list. This value can be provided in %, em, px… and all CSS units.
 * Note: The width will be ignored if the "autoAdjustWidth" property is set to true.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.uxap.HierarchicalSelect#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#setWidth
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width. This value can be provided in %, em, px… and all CSS units
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.uxap.HierarchicalSelect#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#setMaxWidth
 * @function
 */


/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item. If the key has no corresponding aggregated item, no changes will apply. If duplicate keys exists the first item matching the key is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @since 1.11
 * @name sap.uxap.HierarchicalSelect#getSelectedKey
 * @function
 */

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedKey  new value for property <code>selectedKey</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @since 1.11
 * @name sap.uxap.HierarchicalSelect#setSelectedKey
 * @function
 */


/**
 * Getter for property <code>selectedItemId</code>.
 * Id of the selected item. If the id has no corresponding aggregated item, no changes will apply.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * @since 1.12
 * @name sap.uxap.HierarchicalSelect#getSelectedItemId
 * @function
 */

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedItemId  new value for property <code>selectedItemId</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.uxap.HierarchicalSelect#setSelectedItemId
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The URI to the icon that will be displayed only when using the “IconOnly” type.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#setIcon
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a select. Possibles values "Default", "IconOnly".
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.SelectType} the value of property <code>type</code>
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.SelectType} oType  new value for property <code>type</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#setType
 * @function
 */


/**
 * Getter for property <code>autoAdjustWidth</code>.
 * If set to true, the width of the select input is determined by the selected item’s content.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoAdjustWidth</code>
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getAutoAdjustWidth
 * @function
 */

/**
 * Setter for property <code>autoAdjustWidth</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoAdjustWidth  new value for property <code>autoAdjustWidth</code>
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#setAutoAdjustWidth
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items of the Item control.
 * 
 * <strong>Note</strong>: this is the default aggregation for HierarchicalSelect.
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.uxap.HierarchicalSelect#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.uxap.HierarchicalSelect#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.HierarchicalSelect#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.HierarchicalSelect#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#unbindItems
 * @function
 */


/**
 * Retrieves the selected item from the aggregation named <code>items</code>.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedItem</code> association, or null
 * @public
 * @name sap.uxap.HierarchicalSelect#getSelectedItem
 * @function
 */

/**
 * Retrieves the selected item from the aggregation named <code>items</code>.
 *
 * @param {string | sap.ui.core.Item} vSelectedItem 
 *    Id of an element which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#setSelectedItem
 * @function
 */


	
/**
 * Occurs when the user changes the selected item.
 *
 * @name sap.uxap.HierarchicalSelect#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.uxap.HierarchicalSelect</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uxap.HierarchicalSelect</code>.<br/> itself. 
 *  
 * Occurs when the user changes the selected item.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uxap.HierarchicalSelect</code>.<br/> itself.
 *
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.uxap.HierarchicalSelect</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.HierarchicalSelect#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The selected item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uxap.HierarchicalSelect#fireChange
 * @function
 */


/**
 * Whether the control's Pop-up is open. It returns true when the control's Pop-up is currently open, this includes opening and closing animations, otherwise it returns false.
 *
 * @name sap.uxap.HierarchicalSelect#isOpen
 * @function
 * @type boolean
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Closes the Control's Pop-up.
 *
 * @name sap.uxap.HierarchicalSelect#close
 * @function
 * @type sap.uxap.HierarchicalSelect
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Retrieves the item with the given key from the aggregation named items.
 * If duplicate keys exists the first item matching the key is returned.
 *
 * @name sap.uxap.HierarchicalSelect#getItemByKey
 * @function
 * @param {string} sKey
 *         An item key that identifies the item to retrieve.
 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Retrieves the first item from the aggregation named items.
 *
 * @name sap.uxap.HierarchicalSelect#getFirstItem
 * @function
 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Retrieves the last item from the aggregation named items.
 *
 * @name sap.uxap.HierarchicalSelect#getLastItem
 * @function
 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Retrieves the item from the aggregation named items at the given 0-based index.
 *
 * @name sap.uxap.HierarchicalSelect#getItemAt
 * @function
 * @param {int} iIndex
 *         Index of the item to return.
 * @type sap.ui.core.Item
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Retrieves the enabled items from the aggregation named items.
 *
 * @name sap.uxap.HierarchicalSelect#getEnabledItems
 * @function
 * @type sap.ui.core.Item[]
 * @public
 * @since 1.22.0
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uxap/HierarchicalSelect.js
sap.uxap.HierarchicalSelect.M_EVENTS = {'change': 'change'};

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


jQuery.sap.require('sap.m.InputBase'); // unlisted dependency retained

jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained

jQuery.sap.require('sap.m.List'); // unlisted dependency retained

jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained

jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();
sap.ui.core.EnabledPropagator.apply(sap.uxap.HierarchicalSelect.prototype, [true]);

/* =========================================================== */
/* Private methods and properties                              */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* Private methods                                             */
/* ----------------------------------------------------------- */

/**
 * Retrieves the first enabled item from the aggregation named <code>items</code>.
 *
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @private
 * @name sap.uxap.HierarchicalSelect#findFirstEnabledItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.findFirstEnabledItem = function (aItems) {
	aItems = aItems || this.getItems();

	for (var i = 0; i < aItems.length; i++) {
		if (aItems[i].getEnabled()) {
			return aItems[i];
		}
	}

	return null;
};

/**
 * Retrieves the last enabled item from the aggregation named <code>items</code>.
 *
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @private
 * @name sap.uxap.HierarchicalSelect#findLastEnabledItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.findLastEnabledItem = function (aItems) {
	aItems = aItems || this.getItems();
	return this.findFirstEnabledItem(aItems.reverse());
};

/**
 * Sets the selected item by its index.
 *
 * @param {int} iIndex
 * @private
 * @name sap.uxap.HierarchicalSelect#setSelectedIndex
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setSelectedIndex = function (iIndex, _aItems /* only for internal usage */) {
	var oItem;
	_aItems = _aItems || this.getItems();

	// constrain the new index
	iIndex = (iIndex > _aItems.length - 1) ? _aItems.length - 1 : Math.max(0, iIndex);

	oItem = _aItems[iIndex];

	if (oItem) {

		this.setSelection(oItem, {suppressInvalidate: true});
	}
};

/**
 * Get the selected item in the List.
 *
 * @returns {sap.m.StandardListItem}
 * @private
 * @name sap.uxap.HierarchicalSelect#_getSelectedListItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._getSelectedListItem = function () {
	var oItem = this.getSelectedItem();
	return (oItem && oItem.data(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "ListItem")) || null;
};

/**
 * Scrolls an item into the visual viewport.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#scrollToItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.scrollToItem = function (oListItem) {
	var oPicker = this.getPicker(),
		oPickerDomRef = oPicker.getDomRef("cont"),
		oListItemDomRef = oListItem && oListItem.getDomRef();

	if (!oPicker || !oPickerDomRef || !oListItemDomRef) {
		return;
	}

	var iPickerScrollTop = oPickerDomRef.scrollTop,
		iListItemOffsetTop = oListItemDomRef.offsetTop,
		iPickerHeight = jQuery(oPickerDomRef).height(),
		iListItemHeight = jQuery(oListItemDomRef).height();

	if (iPickerScrollTop > iListItemOffsetTop) {

		// scroll up
		oPickerDomRef.scrollTop = iListItemOffsetTop;

		// bottom edge of item > bottom edge of viewport
	} else if ((iListItemOffsetTop + iListItemHeight) > (iPickerScrollTop + iPickerHeight)) {

		// scroll down, the item is partly below the viewport of the List
		oPickerDomRef.scrollTop = Math.ceil(iListItemOffsetTop + iListItemHeight - iPickerHeight);
	}
};

/**
 * Sets the text value of the Select field.
 *
 * @param {string} sValue
 * @private
 * @name sap.uxap.HierarchicalSelect#setValue
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setValue = function (sValue) {
	var $Label = this.$().children("." + sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Label");

	if ($Label && $Label.length) {
		$Label.text(sValue);
	}
};

/**
 * Map an item type of sap.ui.core.Item to an item type of sap.m.StandardListItem.
 *
 * @param {sap.ui.core.Item} oItem
 * @returns {sap.m.StandardListItem | null}
 * @private
 * @name sap.uxap.HierarchicalSelect#_mapItemToListItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._mapItemToListItem = function (oItem) {

	if (!oItem) {
		return null;
	}

	var CSS_CLASS = sap.uxap.HierarchicalSelectRenderer.CSS_CLASS,
		sListItem = CSS_CLASS + "Item",
		sListItemEnabled = oItem.getEnabled() ? "Enabled" : "Disabled",
		sListItemSelected = (oItem === this.getSelectedItem()) ? sListItem + "Selected" : "";

	var oListItem = new sap.m.StandardListItem().addStyleClass(sListItem + " " + sListItem + sListItemEnabled + " " + sListItemSelected);
	oListItem.setTitle(oItem.getText());
	oListItem.setType(oItem.getEnabled() ? sap.m.ListType.Active : sap.m.ListType.Inactive);
	oListItem.setTooltip(oItem.getTooltip());
	oItem.data(CSS_CLASS + "ListItem", oListItem);

	if (oItem.data("secondLevel") === true || oItem.data("secondLevel") == "true") {
		oListItem.addStyleClass("sapUxAPHierarchicalSelectSecondLevel");
	}
	else {
		oListItem.addStyleClass("sapUxAPHierarchicalSelectFirstLevel");
	}

	return oListItem;
};

/**
 * Given a item type of sap.m.StandardListItem, find the corresponding item type of sap.ui.core.Item.
 *
 * @param {sap.m.StandardListItem} oListItem
 * @param {array} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @private
 * @name sap.uxap.HierarchicalSelect#_findMappedItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._findMappedItem = function (oListItem, aItems) {
	for (var i = 0, aItems = aItems || this.getItems(), aItemsLength = aItems.length; i < aItemsLength; i++) {
		if (aItems[i].data(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "ListItem") === oListItem) {
			return aItems[i];
		}
	}

	return null;
};

/**
 * Fill the list of items.
 *
 * @param {array} aItems An array with items type of sap.ui.core.Item.
 * @private
 * @name sap.uxap.HierarchicalSelect#_fillList
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._fillList = function (aItems) {
	var oSelectedItem = this.getSelectedItem();

	for (var i = 0, oListItem, oItem; i < aItems.length; i++) {
		oItem = aItems[i];

		// add a private property to the added item containing a reference
		// to the corresponding mapped item
		oListItem = this._mapItemToListItem(oItem);

		// add the mapped item type of sap.m.StandardListItem to the List
		this.getList().addAggregation("items", oListItem, true);	// note: suppress re-rendering

		// add active state to the selected item
		if (oItem === oSelectedItem) {
			this.getList().setSelectedItem(oListItem, true);
		}
	}
};

/**
 * Destroy the items in the List.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#_clearList
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._clearList = function () {
	if (this.getList()) {
		this.getList().destroyAggregation("items", true);	// note: suppress re-rendering
	}
};

/**
 * Whether the native HTML Select Element is required.
 *
 * @returns {boolean}
 * @private
 * @name sap.uxap.HierarchicalSelect#_isRequiredSelectElement
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._isRequiredSelectElement = function () {
	if (this.getAutoAdjustWidth()) {
		return false;
	} else if (this.getWidth() === "auto") {
		return true;
	}
};

/**
 * Retrieves the first item from the aggregation named <code>items</code>
 * whose first character match with the given <code>sChar</code>.
 *
 * @param {string} sChar
 * @returns {sap.ui.core.Item | undefined}
 * @private
 * @name sap.uxap.HierarchicalSelect#_findItemByFirstCharacter
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._findItemByFirstCharacter = function (sChar) {
	for (var i = 0, aItems = this.getItems(); i < aItems.length; i++) {
		if (aItems[i].getText().charAt(0).toUpperCase() === sChar.toUpperCase()) {
			return aItems[i];
		}
	}
};

/**
 * Getter for the Select's List.
 *
 * @returns {sap.m.List}
 * @private
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#getList
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getList = function () {
	return this._oList;
};

/* ----------------------------------------------------------- */
/* Picker                                                      */
/* ----------------------------------------------------------- */

/**
 * This event handler will be called before the Select Picker is opened.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#onBeforeOpen
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onBeforeOpen = function () {
	var fnPickerTypeBeforeOpen = this["_onBeforeOpen" + this.getPickerType()];

	// add the active state to the Select's field
	this.addStyleClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Pressed");

	// call the hook to add additional content to the List
	this.addContent();

	fnPickerTypeBeforeOpen && fnPickerTypeBeforeOpen.call(this);
};

/**
 * This event handler will be called after the control's picker pop-up is opened.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#onAfterOpen
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onAfterOpen = function () {
};

/**
 * This event handler will be called before the picker pop-up is closed.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#onBeforeClose
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onBeforeClose = function () {

	// remove the active state of the Select's field
	this.removeStyleClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Pressed");
};

/**
 * This event handler will be called after the picker pop-up is closed.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#onAfterClose
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onAfterClose = function () {
};

/**
 * Getter for the control's picker pop-up.
 *
 * @returns {sap.m.Dialog | sap.m.Popover | null} The picker, creating it if necessary by calling <code>createPicker()</code> method.
 * @private
 * @name sap.uxap.HierarchicalSelect#getPicker
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getPicker = function () {
	if (this.bIsDestroyed) {
		return null;
	}

	// initialize the control's picker
	return this.createPicker(this.getPickerType());
};

/**
 * Setter for property <code>_sPickerType</code>.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#setPickerType
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setPickerType = function (sPickerType) {
	this._sPickerType = sPickerType;
};

/**
 * Getter for property <code>_sPickerType</code>
 *
 * @returns {string}
 * @private
 * @name sap.uxap.HierarchicalSelect#getPickerType
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getPickerType = function () {
	return this._sPickerType;
};

/* ----------------------------------------------------------- */
/* Popover                                                     */
/* ----------------------------------------------------------- */

/**
 * Creates an instance type of <code>sap.m.Popover</code>.
 *
 * @returns {sap.m.Popover}
 * @private
 * @name sap.uxap.HierarchicalSelect#_createPopover
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._createPopover = function () {

	// initialize Popover
	var oPicker = new sap.m.Popover({
		showHeader: false,
		placement: sap.m.PlacementType.Vertical,
		offsetX: 0,
		offsetY: 0,
		initialFocus: this,
		bounce: false
	});

	this._decoratePopover(oPicker);
	return oPicker;
};

/**
 * Decorate a Popover instance by adding some private methods.
 *
 * @param {sap.m.Popover}
 * @private
 * @name sap.uxap.HierarchicalSelect#_decoratePopover
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._decoratePopover = function (oPopover) {
	var self = this;

	// adding additional capabilities to the Popover
	oPopover._removeArrow = function () {
		this._marginTop = 0;
		this._marginLeft = 0;
		this._marginRight = 0;
		this._marginBottom = 0;
		this._arrowOffset = 0;
		this._offsets = ["0 0", "0 0", "0 0", "0 0"];
	};

	oPopover._setPosition = function () {
		this._myPositions = ["begin bottom", "begin center", "begin top", "end center"];
		this._atPositions = ["begin top", "end center", "begin bottom", "begin center"];
	};

	oPopover._setArrowPosition = function () {
	};

	oPopover._setMinWidth = function (sWidth) {
		this.getDomRef().style.minWidth = sWidth;
	};

	oPopover._setWidth = function (sWidth) {
		var bAutoAdjustWidth = self.getAutoAdjustWidth(),
			bIconOnly = self.getType() === "IconOnly",
			oPickerContentDomRef;

		// set the width of the content
		if (sap.ui.Device.system.desktop || sap.ui.Device.system.tablet) {

			oPickerContentDomRef = this.getContent()[0];

			if (bAutoAdjustWidth) {
				oPickerContentDomRef.setWidth("auto");
				oPickerContentDomRef.getDomRef().style.minWidth = sWidth;
			} else {
				oPickerContentDomRef.setWidth(sWidth);
			}
		}

		if (!bIconOnly) {

			// set the width of the popover
			this.getDomRef().style.minWidth = sWidth;
		}
	};

	oPopover.open = function () {
		return this.openBy(self);
	};
};

/**
 * Required adaptations after rendering of the Popover.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#_onAfterRenderingPopover
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._onAfterRenderingPopover = function () {
	var oPopover = this.getPicker(),
		sWidth = (this.$().outerWidth() / parseFloat(sap.m.BaseFontSize)) + "rem";

	// remove the Popover arrow
	oPopover._removeArrow();

	// position adaptations
	oPopover._setPosition();

	// width adaptations
	if (sap.ui.Device.system.phone) {
		oPopover._setMinWidth("100%");
	} else {
		oPopover._setWidth(sWidth);
	}
};

/* ----------------------------------------------------------- */
/* Dialog                                                      */
/* ----------------------------------------------------------- */

/**
 * Creates an instance type of <code>sap.m.Dialog</code>.
 *
 * @returns {sap.m.Dialog}
 * @private
 * @name sap.uxap.HierarchicalSelect#_createDialog
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._createDialog = function () {
	var CSS_CLASS = sap.uxap.HierarchicalSelectRenderer.CSS_CLASS;

	// initialize Dialog
	var oDialog = new sap.m.Dialog({
		stretchOnPhone: true,
		customHeader: new sap.m.Bar({
			contentLeft: new sap.m.InputBase({
				width: "100%",
				editable: false
			}).addStyleClass(CSS_CLASS + "Input")
		}).addStyleClass(CSS_CLASS + "Bar")
	});

	oDialog.getAggregation("customHeader").attachBrowserEvent("tap", function () {
		oDialog.close();
	}, this);

	return oDialog;
};

/**
 * Called before the Dialog is opened.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#_onBeforeOpenDialog
 * @function
 */
sap.uxap.HierarchicalSelect.prototype._onBeforeOpenDialog = function () {
	var oHeader = this.getPicker().getCustomHeader();
	oHeader.getContentLeft()[0].setValue(this.getSelectedItem().getText());
};

/* =========================================================== */
/* Lifecycle methods                                           */
/* =========================================================== */

/**
 * Initialization hook for the Select.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#init
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.init = function () {

	// initialize list
	this.createList();
};

/**
 * Required adaptations before rendering.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#onBeforeRendering
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onBeforeRendering = function () {
	var aItems = this.getItems();

	this.synchronizeSelection();
	this._clearList();
	this._fillList(aItems);
};

/**
 * Required adaptations after rendering.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#onAfterRendering
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onAfterRendering = function () {

	// whether the Select has a Bar as parent
	var bHasParentBar = !!this.$().closest(".sapMBar-CTX").length;

	// set the picker type
	this.setPickerType(sap.ui.Device.system.phone && !bHasParentBar ? "Dialog" : "Popover");
};

/**
 * Cleans up before destruction.
 *
 * @private
 * @name sap.uxap.HierarchicalSelect#exit
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.exit = function () {

	if (this.getList()) {
		this.getList().destroy();
		this._oList = null;
	}
};

/* =========================================================== */
/* Event handlers                                              */
/* =========================================================== */

/**
 * Handle the touch start event on the Select.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#ontouchstart
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.ontouchstart = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	if (this.getEnabled() && this.isOpenArea(oEvent.target)) {

		// add the active state to the Select's field
		this.addStyleClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Pressed");
	}
};

/**
 * Handle the touch end event on the Select.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#ontouchend
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.ontouchend = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	if (this.getEnabled() && (!this.isOpen() || !this.hasContent()) && this.isOpenArea(oEvent.target)) {

		// remove the active state of the Select HTMLDIVElement container
		this.removeStyleClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Pressed");
	}
};

/**
 * Handle the tap event on the Select.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#ontap
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.ontap = function (oEvent) {
	var CSS_CLASS = sap.uxap.HierarchicalSelectRenderer.CSS_CLASS;

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	if (!this.getEnabled()) {
		return;
	}

	if (this.isOpenArea(oEvent.target)) {

		if (this.isOpen()) {
			this.close();
			this.removeStyleClass(CSS_CLASS + "Pressed");
			return;
		}

		if (this.hasContent()) {
			this.open();
		}
	}

	if (this.isOpen()) {

		// add the active state to the Select's field
		this.addStyleClass(CSS_CLASS + "Pressed");
	}
};

/**
 * Handle the selection change event on the List.
 *
 * @param {sap.ui.base.Event} oControlEvent
 * @private
 * @name sap.uxap.HierarchicalSelect#onSelectionChange
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onSelectionChange = function (oControlEvent) {
	var oListItem = oControlEvent.getParameter("listItem"),
		oNewSelectedItem = this._findMappedItem(oListItem);

	if ((oListItem.getType() === "Inactive") ||	// workaround: this is needed because the List fires the "selectionChange" event on inactive items

			// a disabled Select, the selection cannot be modified
		!this.getEnabled()) {

		return;
	}

	// pre-assertion
	jQuery.sap.assert(oNewSelectedItem, "The corresponding mapped item was not found on " + this);

	this.close();

	if (oNewSelectedItem) {

		// update the selected item
		this.setSelection(oNewSelectedItem, {
			suppressInvalidate: true,
			listItemUpdated: true
		});

		this.fireChange({selectedItem: this.getSelectedItem()});

		// update the label text
		// note: if, due to invalid databinding, the selectedKey cannot be changed and is reset to null,
		// oNewSelectedItem does not match getSelectedItem() and a wrong text is displayed in the Select field
		oNewSelectedItem = this.getSelectedItem();
		this.setValue(oNewSelectedItem ? oNewSelectedItem.getText() : ((oNewSelectedItem = this.getDefaultSelectedItem()) ? oNewSelectedItem.getText() : ""));
	}
};

/* ----------------------------------------------------------- */
/* Keyboard handling                                           */
/* ----------------------------------------------------------- */

/**
 * Handle the keypress event.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onkeypress
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onkeypress = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	if (!this.getEnabled()) {
		return;
	}

	var oItem = this._findItemByFirstCharacter(String.fromCharCode(oEvent.which));	// jQuery oEvent.which normalizes oEvent.keyCode and oEvent.charCode

	if (oItem) {

		this.setSelection(oItem, {suppressInvalidate: true});
		this.fireChange({selectedItem: this.getSelectedItem()});
		this.setValue(oItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle when F4 or Alt + DOWN arrow are pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapshow
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapshow = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent browser address bar to be open in ie9, when F4 is pressed
	if (oEvent.keyCode === jQuery.sap.KeyCodes.F4) {
		oEvent.preventDefault();
	}

	if (this.isOpen()) {
		this.close();
		return;
	}

	if (this.hasContent()) {
		this.open();
	}
};

/**
 * Handle when Alt + UP arrow are pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsaphide
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsaphide = sap.uxap.HierarchicalSelect.prototype.onsapshow;

/**
 * Handle when escape is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapescape
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapescape = function (oEvent) {

	if (this.isOpen()) {

		// mark the event for components that needs to know if the event was handled
		oEvent.setMarked();

		this.close();
	}
};

/**
 * Handle when enter is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapenter
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapenter = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	this.close();
};

/**
 * Handle when keyboard DOWN arrow is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapdown
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapdown = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	var oNextSelectableItem,
		aSelectableItems = this.getSelectableItems();

	oNextSelectableItem = aSelectableItems[aSelectableItems.indexOf(this.getSelectedItem()) + 1];

	if (oNextSelectableItem) {

		this.setSelection(oNextSelectableItem, {suppressInvalidate: true});
		this.fireChange({selectedItem: this.getSelectedItem()});
		this.setValue(oNextSelectableItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle when keyboard UP arrow is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapup
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapup = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent document scrolling when arrow keys are pressed
	oEvent.preventDefault();

	var oPrevSelectableItem,
		aSelectableItems = this.getSelectableItems();

	oPrevSelectableItem = aSelectableItems[aSelectableItems.indexOf(this.getSelectedItem()) - 1];

	if (oPrevSelectableItem) {

		this.setSelection(oPrevSelectableItem, {suppressInvalidate: true});
		this.fireChange({selectedItem: this.getSelectedItem()});
		this.setValue(oPrevSelectableItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle Home key pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsaphome
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsaphome = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent document scrolling when Home key is pressed
	oEvent.preventDefault();

	var oFirstSelectableItem = this.getSelectableItems()[0];

	if (oFirstSelectableItem && (oFirstSelectableItem !== this.getSelectedItem())) {

		this.setSelection(oFirstSelectableItem, {suppressInvalidate: true});
		this.fireChange({selectedItem: this.getSelectedItem()});
		this.setValue(oFirstSelectableItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle End key pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapend
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapend = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent document scrolling when End key is pressed
	oEvent.preventDefault();

	var oLastSelectableItem = this.findLastEnabledItem(this.getSelectableItems());

	if (oLastSelectableItem && (oLastSelectableItem !== this.getSelectedItem())) {

		this.setSelection(oLastSelectableItem, {suppressInvalidate: true});
		this.fireChange({selectedItem: this.getSelectedItem()});
		this.setValue(oLastSelectableItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle when page down key is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsappagedown
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsappagedown = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent document scrolling when page down key is pressed
	oEvent.preventDefault();

	var aSelectableItems = this.getSelectableItems(),
		oSelectedItem = this.getSelectedItem();

	this.setSelectedIndex(aSelectableItems.indexOf(oSelectedItem) + 20, aSelectableItems);

	if (oSelectedItem !== this.getSelectedItem()) {
		this.fireChange({selectedItem: this.getSelectedItem()});
	}

	oSelectedItem = this.getSelectedItem();

	if (oSelectedItem) {
		this.setValue(oSelectedItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle when page up key is pressed.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsappageup
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsappageup = function (oEvent) {

	// mark the event for components that needs to know if the event was handled
	oEvent.setMarked();

	// note: prevent document scrolling when page up key is pressed
	oEvent.preventDefault();

	var aSelectableItems = this.getSelectableItems(),
		oSelectedItem = this.getSelectedItem();

	this.setSelectedIndex(aSelectableItems.indexOf(oSelectedItem) - 20, aSelectableItems);

	if (oSelectedItem !== this.getSelectedItem()) {
		this.fireChange({selectedItem: this.getSelectedItem()});
	}

	oSelectedItem = this.getSelectedItem();

	if (oSelectedItem) {
		this.setValue(oSelectedItem.getText());
	}

	this.scrollToItem(this.getList().getSelectedItem());
};

/**
 * Handle the focus leave event.
 *
 * @param {jQuery.Event} oEvent The event object.
 * @private
 * @name sap.uxap.HierarchicalSelect#onsapfocusleave
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onsapfocusleave = function (oEvent) {
	var oPicker = this.getAggregation("picker");

	if (!oEvent.relatedControlId || !oPicker) {
		return;
	}

	var oControl = sap.ui.getCore().byId(oEvent.relatedControlId),
		oFocusDomRef = oControl && oControl.getFocusDomRef();

	if (jQuery.sap.containsOrEquals(oPicker.getFocusDomRef(), oFocusDomRef)) {

		// force the focus to stay in the input field
		this.focus();
	}
};

/* =========================================================== */
/* API methods                                                 */
/* =========================================================== */

/* ----------------------------------------------------------- */
/* protected methods                                           */
/* ----------------------------------------------------------- */

/*
 * Update and synchronize "selectedItem" association, "selectedItemId", "selectedKey" properties and
 * the "selectedItem" in the List.
 *
 * @param {sap.ui.core.Item | null} vItem
 * @param {object} [mOptions]
 * @param {boolean} [mOptions.suppressInvalidate]
 * @param {boolean} [mOptions.listItemUpdated]
 * @protected
 * @name sap.uxap.HierarchicalSelect#setSelection
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setSelection = function (vItem, mOptions) {
	var oListItem;
	mOptions = mOptions || {};

	// Update and synchronize "selectedItem" association,
	// "selectedKey" and "selectedItemId" properties.
	this.setAssociation("selectedItem", vItem || null, mOptions.suppressInvalidate);
	this.setProperty("selectedItemId", vItem ? vItem.getId() : "", mOptions.suppressInvalidate);
	this.setProperty("selectedKey", vItem ? vItem.getKey() : "", mOptions.suppressInvalidate);

	// update the selection in the List
	if (!mOptions.listItemUpdated) {

		oListItem = this._getSelectedListItem();

		if (oListItem) {

			// set the selected item of the List
			this.getList().setSelectedItem(oListItem, true);
		} else if (this.getList()) {

			if (this.getDefaultSelectedItem()) {
				this.getList().setSelectedItem(this.getDefaultSelectedItem().data(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "ListItem"), true);
			} else if (this.getList().getSelectedItem()) {
				this.getList().setSelectedItem(this.getList().getSelectedItem(), false);
			}
		}
	}
};

/*
 * Determines whether the "selectedItem" association and "selectedKey" property are synchronized.
 *
 * @returns {boolean}
 * @protected
 * @since 1.26.0
 * @name sap.uxap.HierarchicalSelect#isSelectionSynchronized
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.isSelectionSynchronized = function () {
	var vItem = this.getSelectedItem();
	return this.getSelectedKey() === (vItem && vItem.getKey());
};

/*
 * Synchronize selected item and key.
 *
 * @protected
 * @name sap.uxap.HierarchicalSelect#synchronizeSelection
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.synchronizeSelection = function () {

	var vItem = this.getSelectedItem(),
		sKey = this.getSelectedKey(),
		aItems = this.getItems();

	/*
	 *	functional dependencies:
	 *
	 *	selectedKey  -> selectedItem, selectedItemId
	 *	selectedItem -> selectedItemId, selectedKey
	 *
	 *	items        -> selectedItem, selectedItemId, selectedKey
	 */

	// the "selectedKey" property is set, but it is not synchronized with the "selectedItem" association
	if (!this.isSelectionSynchronized()) {

		// find the first item with the given key
		vItem = this.getItemByKey("" + sKey);

		// if there is an item that match with the "selectedKey" property and
		// it does not have the default value
		if (vItem && (sKey !== "")) {

			// Update and synchronize "selectedItem" association and
			// "selectedKey" property.
			this.setAssociation("selectedItem", vItem, true);	// suppress re-rendering
			this.setProperty("selectedItemId", vItem.getId(), true);	// suppress re-rendering
			return;
		}

		// the "selectedKey" property have the default value
		vItem = this.getDefaultSelectedItem();

		// Update and synchronize "selectedItem" association,
		// "selectedKey" and "selectedItemId" properties.
		this.setSelection(vItem, {suppressInvalidate: true});

	} else if (aItems.indexOf(vItem) === -1) {	// validate if the selected item is aggregated
		jQuery.sap.log.warning('Warning: synchronizeSelection() the sap.ui.core.Item instance or sap.ui.core.Item id is not a valid aggregation on', this);
	}
};

/*
 * This hook method can be used to add additional content.
 *
 * @param {sap.m.Dialog | sap.m.Popover} [oPicker]
 * @protected
 * @name sap.uxap.HierarchicalSelect#addContent
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.addContent = function (oPicker) {
};


/**
 * Creates a picker.
 * To be overwritten by subclasses.
 *
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker pop-up to be used.
 * @protected
 * @name sap.uxap.HierarchicalSelect#createPicker
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.createPicker = function (sPickerType) {
	var oPicker = this.getAggregation("picker");

	if (oPicker) {
		return oPicker;
	}

	oPicker = this["_create" + sPickerType]();

	// define a parent-child relationship between the control's and the picker pop-up
	this.setAggregation("picker", oPicker, true);

	// configuration
	oPicker.setHorizontalScrolling(false)
		.addStyleClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "Picker")
		.attachBeforeOpen(this.onBeforeOpen, this)
		.attachAfterOpen(this.onAfterOpen, this)
		.attachBeforeClose(this.onBeforeClose, this)
		.attachAfterClose(this.onAfterClose, this)
		.addEventDelegate({
			onBeforeRendering: this.onBeforeRenderingPicker,
			onAfterRendering: this.onAfterRenderingPicker
		}, this)
		.addContent(this.getList());

	return oPicker;
};

/*
 * Create an instance type of <code>sap.m.List</code>.
 *
 * @returns {sap.m.List}
 * @protected
 * @name sap.uxap.HierarchicalSelect#createList
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.createList = function () {

	// list to use inside the picker pop-up
	this._oList = new sap.m.List({
		width: "100%",
		mode: sap.m.ListMode.SingleSelectMaster,
		rememberSelections: false	// select handles selection in itself, so list should not remember selection
	}).addStyleClass(sap.uxap.HierarchicalSelectRenderer.CSS_CLASS + "List")
		.addEventDelegate({
			ontap: function (oEvent) {
				this.close();
			}
		}, this)
		.attachSelectionChange(this.onSelectionChange, this);
};

/*
 * Determines whether the Select has content or not.
 *
 * @returns {boolean}
 * @protected
 * @name sap.uxap.HierarchicalSelect#hasContent
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.hasContent = function () {
	return !!this.getItems().length;
};

/*
 * This hook method is called before the control's picker pop-up is rendered.
 *
 * @protected
 * @name sap.uxap.HierarchicalSelect#onBeforeRenderingPicker
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onBeforeRenderingPicker = function () {
	var fnOnBeforeRenderingPickerType = this["_onBeforeRendering" + this.getPickerType()];
	fnOnBeforeRenderingPickerType && fnOnBeforeRenderingPickerType.call(this);
};

/*
 * This hook method is called after the control's picker pop-up is rendered.
 *
 * @protected
 * @name sap.uxap.HierarchicalSelect#onAfterRenderingPicker
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.onAfterRenderingPicker = function () {
	var fnOnAfterRenderingPickerType = this["_onAfterRendering" + this.getPickerType()];
	fnOnAfterRenderingPickerType && fnOnAfterRenderingPickerType.call(this);
};

/*
 * Open the control's picker pop-up.
 *
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#open
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.open = function () {
	var oPicker = this.getPicker();

	if (oPicker) {
		oPicker.open();
	}

	return this;
};

/*
 * Getter for visible <code>items</code>.
 *
 * @return {sap.ui.core.Item[]}
 * protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#getVisibleItems
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getVisibleItems = sap.uxap.HierarchicalSelect.prototype.getItems;

/*
 * Check whether an item is selected or not.
 *
 * @param {sap.ui.core.Item} vItem
 * @returns {boolean} Whether the item is selected.
 * @protected
 * @since 1.26.0
 * @name sap.uxap.HierarchicalSelect#isItemSelected
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.isItemSelected = function (vItem) {
	return vItem && (vItem.getId() === this.getAssociation("selectedItem"));
};

/*
 * Retrieves the default selected item object from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null}
 * protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#getDefaultSelectedItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getDefaultSelectedItem = function (aItems) {
	return this.findFirstEnabledItem();
};

/*
 * Retrieves the selectables items from the aggregation named <code>items</code>.
 *
 * @return {sap.ui.core.Item[]} An array containing the selectables items.
 * @protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#getSelectableItems
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getSelectableItems = function () {
	return this.getEnabledItems(this.getVisibleItems());
};

/*
 * Getter for the control's picker pop-up open area element.
 *
 * @returns {Element | null} Returns the element that is used as trigger to open the control's picker pop-up.
 * @protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#getOpenArea
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getOpenArea = function () {
	return this.getDomRef();
};

/*
 * Checks whether the provided element is the open area.
 *
 * @param {Element} oDomRef
 * @returns {boolean}
 * @protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#isOpenArea
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.isOpenArea = function (oDomRef) {
	var oOpenAreaDomRef = this.getOpenArea();
	return oOpenAreaDomRef && oOpenAreaDomRef.contains(oDomRef);
};

/*
 * Retrieves a item by searching for the given property/value from the aggregation named <code>items</code>.
 * If duplicate values exists the first item matching the value is returned.
 *
 * @param {string} sProperty An item property.
 * @param {string} sValue An item value that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null} The matched item or null.
 * @protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#findItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.findItem = function (sProperty, sValue) {
	for (var i = 0, aItems = this.getItems(); i < aItems.length; i++) {
		if (aItems[i]["get" + sProperty]() === sValue) {
			return aItems[i];
		}
	}

	return null;
};

/*
 * Clear the selection.
 *
 * @protected
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#clearSelection
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.clearSelection = function () {
	this.setSelection(null);
};

/* ----------------------------------------------------------- */
/* public methods                                              */
/* ----------------------------------------------------------- */

/**
 * Adds some item <code>oItem</code> to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item} oItem The item to add; if empty, nothing is inserted.
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @name sap.uxap.HierarchicalSelect#addItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.addItem = function (oItem) {
	this.addAggregation("items", oItem);

	if (this.getList()) {
		this.getList().addItem(this._mapItemToListItem(oItem));
	}

	return this;
};

/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item} oItem The item to insert; if empty, nothing is inserted.
 * @param {int} iIndex The <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at
 *             the last position.
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @name sap.uxap.HierarchicalSelect#insertItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.insertItem = function (oItem, iIndex) {
	this.insertAggregation("items", oItem, iIndex);

	if (this.getList()) {
		this.getList().insertItem(this._mapItemToListItem(oItem), iIndex);
	}

	return this;
};

/**
 * Setter for association <code>selectedItem</code>.
 *
 * @param {string | sap.ui.core.Item | null} vItem new value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given or null.
 *    If the value of null is provided the first enabled item will be selected (if any).
 *
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @name sap.uxap.HierarchicalSelect#setSelectedItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setSelectedItem = function (vItem) {

	if (typeof vItem === "string") {
		vItem = sap.ui.getCore().byId(vItem);
	}

	if (!(vItem instanceof sap.ui.core.Item) && vItem !== null) {
		jQuery.sap.log.warning('Warning: setSelectedItem() "vItem" has to be an instance of sap.ui.core.Item, a valid sap.ui.core.Item id, or null on', this);
		return this;
	}

	if (!vItem) {
		vItem = this.getDefaultSelectedItem();
	}

	// Update and synchronize "selectedItem" association,
	// "selectedKey" and "selectedItemId" properties.
	this.setSelection(vItem, {suppressInvalidate: true});

	// update the label text
	this.setValue(vItem ? vItem.getText() : ((vItem = this.getDefaultSelectedItem()) ? vItem.getText() : ""));

	return this;
};

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * If the provided <code>vItem</code> has a default value,
 * the first enabled item will be selected (if any).
 *
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @since 1.12
 * @name sap.uxap.HierarchicalSelect#setSelectedItemId
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setSelectedItemId = function (vItem) {
	vItem = this.validateProperty("selectedItemId", vItem);
	var oItem = sap.ui.getCore().byId(vItem);

	if (!(oItem instanceof sap.ui.core.Item) && vItem !== "") {
		jQuery.sap.log.warning('Warning: setSelectedItemId() "sItem" has to be a string id of an sap.ui.core.Item instance, an empty string or undefined on', this);
		return this;
	}

	if (!oItem) {
		oItem = this.getDefaultSelectedItem();
	}

	// Update and synchronize "selectedItem" association,
	// "selectedKey" and "selectedItemId" properties.
	this.setSelection(oItem, {suppressInvalidate: true});

	// update the label text
	this.setValue(oItem ? oItem.getText() : ((oItem = this.getDefaultSelectedItem()) ? oItem.getText() : ""));

	return this;
};

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 *
 * If the provided <code>sKey</code> has a default value,
 * the first enabled item will be selected (if any).
 * In the case that an item has the default key value, it will be selected instead.
 *
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @since 1.11
 * @name sap.uxap.HierarchicalSelect#setSelectedKey
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.setSelectedKey = function (sKey) {
	sKey = this.validateProperty("selectedKey", sKey);
	var oItem = this.getItemByKey(sKey);

	if (oItem || (sKey === "")) {

		// If the "sKey" value is an empty string "" or undefined,
		// the first enabled item will be selected (if any).
		// In the case that an item has the default key value, it will be selected instead.
		if (!oItem && sKey === "") {
			oItem = this.getDefaultSelectedItem();
		}

		// Update and synchronize "selectedItem" association,
		// "selectedKey" and "selectedItemId" properties.
		this.setSelection(oItem, {suppressInvalidate: true});

		// update the label text
		this.setValue(oItem ? oItem.getText() : ((oItem = this.getDefaultSelectedItem()) ? oItem.getText() : ""));

		return this;
	}

	// note: setSelectedKey() method sometimes is called
	// before the items are added, in this case the "selectedItem" association
	// and "selectedItemId" property need to be updated in onBeforeRendering()
	return this.setProperty("selectedKey", sKey);	// update "selectedKey" property, re-rendering is needed
};

/**
 * Retrieves the item from the aggregation named <code>items</code> at the given 0-based index.
 *
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getItemAt
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getItemAt = function (iIndex) {
	return this.getItems()[+iIndex] || null;
};

/**
 * Retrieves the selected item object from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * @name sap.uxap.HierarchicalSelect#getSelectedItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getSelectedItem = function () {
	var vSelectedItem = this.getAssociation("selectedItem");
	return (vSelectedItem === null) ? null : sap.ui.getCore().byId(vSelectedItem) || null;
};

/**
 * Retrieves the first item from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getFirstItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getFirstItem = function () {
	return this.getItems()[0] || null;
};

/**
 * Retrieves the last item from the aggregation named <code>items</code>.
 *
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getLastItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getLastItem = function () {
	var aItems = this.getItems();
	return aItems[aItems.length - 1] || null;
};

/**
 * Retrieves the enabled items from the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item[]} [aItems=getItems()] Items to filter.
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * @since 1.22.0
 * @name sap.uxap.HierarchicalSelect#getEnabledItems
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getEnabledItems = function (aItems) {
	aItems = aItems || this.getItems();

	return aItems.filter(function (oItem) {
		return oItem.getEnabled();
	});
};

/**
 * Retrieves the item with the given key from the aggregation named <code>items</code>.
 * If duplicate keys exists the first item matching the key is returned.
 *
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null}
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#getItemByKey
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.getItemByKey = function (sKey) {
	return this.findItem("Key", sKey);
};

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * @name sap.uxap.HierarchicalSelect#removeItem
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.removeItem = function (vItem) {
	var CSS_CLASS = sap.uxap.HierarchicalSelectRenderer.CSS_CLASS,
		oItem;

	// remove the item from the aggregation items
	vItem = this.removeAggregation("items", vItem);

	// remove the corresponding mapped item from the List
	if (this.getList()) {
		this.getList().removeItem(vItem && vItem.data(CSS_CLASS + "ListItem"));
	}

	// no items, the removed item was the last
	if (this.getItems().length === 0) {

		// clear the selection
		this.clearSelection();
	} else if (this.isItemSelected(vItem)) {	// if the removed item is selected

		oItem = this.findFirstEnabledItem();

		if (oItem) {

			this.setSelection(oItem);

			// set the input value
			this.setValue(oItem ? oItem.getText() : ((oItem = this.getDefaultSelectedItem()) ? oItem.getText() : ""));
		}
	}

	// return the removed item or null
	return vItem;
};

/**
 * Removes all the controls in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea and clears the selection.
 *
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * @name sap.uxap.HierarchicalSelect#removeAllItems
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.removeAllItems = function () {
	var aItems = this.removeAllAggregation("items");

	// clear the selection
	this.clearSelection();

	if (this.getList()) {
		this.getList().removeAllItems();
	}

	return aItems;
};

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 *
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @name sap.uxap.HierarchicalSelect#destroyItems
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.destroyItems = function () {

	this.destroyAggregation("items");

	if (this.getList()) {
		this.getList().destroyItems();
	}

	return this;
};

/**
 * Whether the control's picker pop-up is open. It returns true when the control's picker pop-up is currently open,
 * this includes opening and closing animations.
 *
 * @returns {boolean} Determines whether the Select is currently open (this includes opening and closing animations).
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#isOpen
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.isOpen = function () {
	var oPicker = this.getAggregation("picker");
	return !!(oPicker && oPicker.isOpen());
};

/**
 * Closes the control's picker pop-up.
 *
 * @returns {sap.uxap.HierarchicalSelect} <code>this</code> to allow method chaining.
 * @public
 * @since 1.16
 * @name sap.uxap.HierarchicalSelect#close
 * @function
 */
sap.uxap.HierarchicalSelect.prototype.close = function () {
	var oPicker = this.getAggregation("picker");

	if (oPicker) {
		oPicker.close();
	}

	return this;
};

}; // end of sap/uxap/HierarchicalSelect.js
if ( !jQuery.sap.isDeclared('sap.uxap.ModelMapping') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ModelMapping.
jQuery.sap.declare("sap.uxap.ModelMapping");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ModelMapping.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getExternalModelName externalModelName} : string</li>
 * <li>{@link #getInternalModelName internalModelName} : string (default: 'Model')</li>
 * <li>{@link #getExternalPath externalPath} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Define the entity that will be passed to the ObjectPageLayout.
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ModelMapping
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.uxap.ModelMapping", { metadata : {

	library : "sap.uxap",
	properties : {
		"externalModelName" : {type : "string", group : "Misc", defaultValue : null},
		"internalModelName" : {type : "string", group : "Misc", defaultValue : 'Model'},
		"externalPath" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ModelMapping with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ModelMapping.extend
 * @function
 */


/**
 * Getter for property <code>externalModelName</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>externalModelName</code>
 * @public
 * @name sap.uxap.ModelMapping#getExternalModelName
 * @function
 */

/**
 * Setter for property <code>externalModelName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sExternalModelName  new value for property <code>externalModelName</code>
 * @return {sap.uxap.ModelMapping} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ModelMapping#setExternalModelName
 * @function
 */


/**
 * Getter for property <code>internalModelName</code>.
 *
 * Default value is <code>Model</code>
 *
 * @return {string} the value of property <code>internalModelName</code>
 * @public
 * @name sap.uxap.ModelMapping#getInternalModelName
 * @function
 */

/**
 * Setter for property <code>internalModelName</code>.
 *
 * Default value is <code>Model</code> 
 *
 * @param {string} sInternalModelName  new value for property <code>internalModelName</code>
 * @return {sap.uxap.ModelMapping} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ModelMapping#setInternalModelName
 * @function
 */


/**
 * Getter for property <code>externalPath</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>externalPath</code>
 * @public
 * @name sap.uxap.ModelMapping#getExternalPath
 * @function
 */

/**
 * Setter for property <code>externalPath</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sExternalPath  new value for property <code>externalPath</code>
 * @return {sap.uxap.ModelMapping} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ModelMapping#setExternalPath
 * @function
 */

// Start of sap/uxap/ModelMapping.js

}; // end of sap/uxap/ModelMapping.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageHeader') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageHeader.
jQuery.sap.declare("sap.uxap.ObjectPageHeader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectPageHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getObjectImageURI objectImageURI} : string</li>
 * <li>{@link #getObjectImageAlt objectImageAlt} : string (default: '')</li>
 * <li>{@link #getObjectImageDensityAware objectImageDensityAware} : boolean (default: false)</li>
 * <li>{@link #getObjectTitle objectTitle} : string</li>
 * <li>{@link #getObjectSubtitle objectSubtitle} : string</li>
 * <li>{@link #getObjectImageShape objectImageShape} : sap.uxap.ObjectPageHeaderPictureShape (default: sap.uxap.ObjectPageHeaderPictureShape.Square)</li>
 * <li>{@link #getIsObjectIconAlwaysVisible isObjectIconAlwaysVisible} : boolean (default: false)</li>
 * <li>{@link #getIsObjectTitleAlwaysVisible isObjectTitleAlwaysVisible} : boolean (default: true)</li>
 * <li>{@link #getIsObjectSubtitleAlwaysVisible isObjectSubtitleAlwaysVisible} : boolean (default: true)</li>
 * <li>{@link #getIsActionAreaAlwaysVisible isActionAreaAlwaysVisible} : boolean (default: true)</li>
 * <li>{@link #getHeaderDesign headerDesign} : sap.uxap.ObjectPageHeaderDesign (default: sap.uxap.ObjectPageHeaderDesign.Light)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getNavigationBar navigationBar} : sap.m.Bar</li>
 * <li>{@link #getActions actions} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Header of an ObjectPage, based on a sap.ui.core.Control.
 * This control allows to specify the basic properties for an object (title / description / picture)
 * As well as define some actions and additional info that will be displayed in a float layout.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ObjectPageHeader
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uxap.ObjectPageHeader", { metadata : {

	library : "sap.uxap",
	properties : {
		"objectImageURI" : {type : "string", group : "", defaultValue : null},
		"objectImageAlt" : {type : "string", group : "", defaultValue : ''},
		"objectImageDensityAware" : {type : "boolean", group : "", defaultValue : false},
		"objectTitle" : {type : "string", group : "", defaultValue : null},
		"objectSubtitle" : {type : "string", group : "", defaultValue : null},
		"objectImageShape" : {type : "sap.uxap.ObjectPageHeaderPictureShape", group : "", defaultValue : sap.uxap.ObjectPageHeaderPictureShape.Square},
		"isObjectIconAlwaysVisible" : {type : "boolean", group : "", defaultValue : false},
		"isObjectTitleAlwaysVisible" : {type : "boolean", group : "", defaultValue : true},
		"isObjectSubtitleAlwaysVisible" : {type : "boolean", group : "", defaultValue : true},
		"isActionAreaAlwaysVisible" : {type : "boolean", group : "", defaultValue : true},
		"headerDesign" : {type : "sap.uxap.ObjectPageHeaderDesign", group : "", defaultValue : sap.uxap.ObjectPageHeaderDesign.Light}
	},
	aggregations : {
		"_overflowButton" : {type : "sap.m.Button", multiple : false, visibility : "hidden"}, 
		"_objectImage" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"navigationBar" : {type : "sap.m.Bar", multiple : false}, 
		"actions" : {type : "sap.ui.core.Control", multiple : true, singularName : "action"}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageHeader.extend
 * @function
 */


/**
 * Getter for property <code>objectImageURI</code>.
 * The path that can be used to retrieve a picture
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>objectImageURI</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getObjectImageURI
 * @function
 */

/**
 * Setter for property <code>objectImageURI</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sObjectImageURI  new value for property <code>objectImageURI</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setObjectImageURI
 * @function
 */


/**
 * Getter for property <code>objectImageAlt</code>.
 * The string to be used in the alt attribute for the objectImage.
 * See sap.m.Image for more detail on alt property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>objectImageAlt</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getObjectImageAlt
 * @function
 */

/**
 * Setter for property <code>objectImageAlt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sObjectImageAlt  new value for property <code>objectImageAlt</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setObjectImageAlt
 * @function
 */


/**
 * Getter for property <code>objectImageDensityAware</code>.
 * If this is set to true, the objectImage will send several requests trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * By default, this is set to false so the objectImage will be loaded directly saving bandwidth.
 * 
 * If pixel perfectness (versus bandwidth) is the key for the application, set this value to true.
 * 
 * Default value is false.
 * See sap.m.Image for more detail on density awareness.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>objectImageDensityAware</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getObjectImageDensityAware
 * @function
 */

/**
 * Setter for property <code>objectImageDensityAware</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bObjectImageDensityAware  new value for property <code>objectImageDensityAware</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setObjectImageDensityAware
 * @function
 */


/**
 * Getter for property <code>objectTitle</code>.
 * The title of the object
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>objectTitle</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getObjectTitle
 * @function
 */

/**
 * Setter for property <code>objectTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sObjectTitle  new value for property <code>objectTitle</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setObjectTitle
 * @function
 */


/**
 * Getter for property <code>objectSubtitle</code>.
 * The description of the object
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>objectSubtitle</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getObjectSubtitle
 * @function
 */

/**
 * Setter for property <code>objectSubtitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sObjectSubtitle  new value for property <code>objectSubtitle</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setObjectSubtitle
 * @function
 */


/**
 * Getter for property <code>objectImageShape</code>.
 * Information to know if the header picture should be displayed in a square or with a circle shaped mask.
 *
 * Default value is <code>Square</code>
 *
 * @return {sap.uxap.ObjectPageHeaderPictureShape} the value of property <code>objectImageShape</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getObjectImageShape
 * @function
 */

/**
 * Setter for property <code>objectImageShape</code>.
 *
 * Default value is <code>Square</code> 
 *
 * @param {sap.uxap.ObjectPageHeaderPictureShape} oObjectImageShape  new value for property <code>objectImageShape</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setObjectImageShape
 * @function
 */


/**
 * Getter for property <code>isObjectIconAlwaysVisible</code>.
 * Flag to set if the icon should always be visible or if it should be visible only when scrolling.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isObjectIconAlwaysVisible</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getIsObjectIconAlwaysVisible
 * @function
 */

/**
 * Setter for property <code>isObjectIconAlwaysVisible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsObjectIconAlwaysVisible  new value for property <code>isObjectIconAlwaysVisible</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setIsObjectIconAlwaysVisible
 * @function
 */


/**
 * Getter for property <code>isObjectTitleAlwaysVisible</code>.
 * Flag to set if the title should always be visible or if it should be visible only when scrolling.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>isObjectTitleAlwaysVisible</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getIsObjectTitleAlwaysVisible
 * @function
 */

/**
 * Setter for property <code>isObjectTitleAlwaysVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIsObjectTitleAlwaysVisible  new value for property <code>isObjectTitleAlwaysVisible</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setIsObjectTitleAlwaysVisible
 * @function
 */


/**
 * Getter for property <code>isObjectSubtitleAlwaysVisible</code>.
 * Flag to set if the title should always be visible or if it should be visible only when scrolling.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>isObjectSubtitleAlwaysVisible</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getIsObjectSubtitleAlwaysVisible
 * @function
 */

/**
 * Setter for property <code>isObjectSubtitleAlwaysVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIsObjectSubtitleAlwaysVisible  new value for property <code>isObjectSubtitleAlwaysVisible</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setIsObjectSubtitleAlwaysVisible
 * @function
 */


/**
 * Getter for property <code>isActionAreaAlwaysVisible</code>.
 * Flag to set if the action buttons should always be visible or if it should be visible only when scrolling.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>isActionAreaAlwaysVisible</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getIsActionAreaAlwaysVisible
 * @function
 */

/**
 * Setter for property <code>isActionAreaAlwaysVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIsActionAreaAlwaysVisible  new value for property <code>isActionAreaAlwaysVisible</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setIsActionAreaAlwaysVisible
 * @function
 */


/**
 * Getter for property <code>headerDesign</code>.
 * Represent the design either Light or Dark for the
 *
 * Default value is <code>Light</code>
 *
 * @return {sap.uxap.ObjectPageHeaderDesign} the value of property <code>headerDesign</code>
 * @public
 * @name sap.uxap.ObjectPageHeader#getHeaderDesign
 * @function
 */

/**
 * Setter for property <code>headerDesign</code>.
 *
 * Default value is <code>Light</code> 
 *
 * @param {sap.uxap.ObjectPageHeaderDesign} oHeaderDesign  new value for property <code>headerDesign</code>
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setHeaderDesign
 * @function
 */


/**
 * Getter for aggregation <code>navigationBar</code>.<br/>
 * 
 * A navigation bar you can embed in the header properly.
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.uxap.ObjectPageHeader#getNavigationBar
 * @function
 */


/**
 * Setter for the aggregated <code>navigationBar</code>.
 * @param {sap.m.Bar} oNavigationBar
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#setNavigationBar
 * @function
 */
	

/**
 * Destroys the navigationBar in the aggregation 
 * named <code>navigationBar</code>.
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#destroyNavigationBar
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * 
 * List of actions that will be displayed in the header.
 * You can use ObjectPageHeaderActionButton controls for having a different display between the header content and the action sheet.
 * You can add an use ObjectPageHeaderLayoutData that will be used to display a visual separator.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.uxap.ObjectPageHeader#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.core.Control}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.core.Control}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.core.Control} vAction the action to remove or its index or id
 * @return {sap.ui.core.Control} the removed action or null
 * @public
 * @name sap.uxap.ObjectPageHeader#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageHeader#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageHeader#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.uxap.ObjectPageHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeader#destroyActions
 * @function
 */

// Start of sap/uxap/ObjectPageHeader.js
sap.uxap.ObjectPageHeader.prototype.init = function () {

	// Overflow button
	var oOverflowActionSheet = new sap.m.ActionSheet({placement: "Bottom"});
	this._oOverflowButton = new sap.m.Button({
		icon: "sap-icon://overflow",
		type: sap.m.ButtonType.Transparent,
		press: function () {
			oOverflowActionSheet.openBy(this);
		}
	});
	this._oOverflowActionSheet = oOverflowActionSheet;
	this.setAggregation("_overflowButton", this._oOverflowButton);

	this._oActionSheetButtonMap = {};

	this._iResizeId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._adaptLayout, this));
};

sap.uxap.ObjectPageHeader.prototype.setHeaderDesign = function (sHeaderDesign) {
	this.setProperty("headerDesign", sHeaderDesign);
	if (this.getParent()) {
		this.getParent().invalidate(); // Force rerendering of ObjectPageLayout if the design change
	}

};

sap.uxap.ObjectPageHeader.prototype.onBeforeRendering = function () {
	var sObjectImageURI = this.getObjectImageURI();
	if (sObjectImageURI.indexOf("sap-icon://") == 0) {
		this._oObjectImage = new sap.ui.core.Icon();
	}
	else {
		this._oObjectImage = new sap.m.Image();
		this._oObjectImage.setDensityAware(this.getObjectImageDensityAware());
		this._oObjectImage.setAlt(this.getObjectImageAlt());
	}
	this._oObjectImage.setSrc(sObjectImageURI);
	this._oObjectImage.addStyleClass("sapUxAPObjectPageHeaderObjectImage");
	this.setAggregation("_objectImage", this._oObjectImage, true);

	var aActions = this.getActions() || [];
	this._oOverflowActionSheet.removeAllButtons();
	this._oActionSheetButtonMap = {};

	//display overflow if there are more than 1 item or only 1 item and it is showing its text
	if (aActions.length > 1 || this._hasOneButtonShowText(aActions)) {
		//create responsive equivalents of the provided controls
		jQuery.each(aActions, jQuery.proxy(function (iIndex, oAction) {
			// Force the design of the button to transparent
			if (oAction instanceof sap.m.Button && oAction.getVisible()) {
				oAction.setProperty("type", sap.m.ButtonType.Transparent, false);

				var oActionSheetButton = this._createActionSheetButton(oAction);

				this._oActionSheetButtonMap[oAction.getId()] = oActionSheetButton; //store the originalId/reference for later use (adaptLayout)

				this._oOverflowActionSheet.addButton(oActionSheetButton);
			}
		}, this));
	}

};

/**
 * "clone" the button provided by the app developer in order to create an equivalent for the actionsheet (displayed in overflowing scenarios)
 * @param oButton           the button to copy
 * @returns {sap.m.Button}  the copied button
 * @private
 */
sap.uxap.ObjectPageHeader.prototype._createActionSheetButton = function (oButton) {

	//copy binding if present
	var oCopy = new sap.m.Button({
		press: jQuery.proxy(this._onSeeMoreContentSelect, this),
		customData: new sap.ui.core.CustomData({
			key: "originalId",
			value: oButton.getId()
		})
	});

	//carry property & binding on text
	var oTextBinding = oButton.getBindingInfo("text"),
		oIconBinding = oButton.getBindingInfo("icon"),
		sModelName;

	if (oTextBinding && oTextBinding.parts && oTextBinding.parts.length > 0) {
		sModelName = oTextBinding.parts[0].model;

		//copy binding information
		oCopy.bindProperty("text", {
			path: oTextBinding.parts[0].path,
			model: sModelName,
			formatter: oTextBinding.formatter
		});

		//handle relative binding scenarios
		oCopy.setBindingContext(oButton.getBindingContext(sModelName), sModelName);
		oCopy.setModel(oButton.getModel(sModelName), sModelName);
	}
	else {
		oCopy.setText(oButton.getText());
	}


	//carry property & binding on icon
	if (oIconBinding && oIconBinding.parts && oIconBinding.parts.length > 0) {
		sModelName = oIconBinding.parts[0].model;

		//copy binding information
		oCopy.bindProperty("icon", {
			path: oIconBinding.parts[0].path,
			model: sModelName,
			formatter: oIconBinding.formatter
		});

		//handle relative binding scenarios
		oCopy.setBindingContext(oButton.getBindingContext(sModelName), sModelName);
		oCopy.setModel(oButton.getModel(sModelName), sModelName);
	}
	else {
		oCopy.setIcon(oButton.getIcon());
	}


	return oCopy;
};

sap.uxap.ObjectPageHeader.prototype.onAfterRendering = function () {
	this._oOverflowButton.$().hide();
	jQuery.sap.delayedCall(50, this, this._adaptLayout); //need to wait for the browser dom painting
};

sap.uxap.ObjectPageHeader.prototype._onSeeMoreContentSelect = function (oEvent) {
	var oPressedButton = oEvent.getSource(), oOriginalControl;

	oOriginalControl = sap.ui.getCore().byId(oPressedButton.data("originalId"));

	//forward press event
	if (oOriginalControl.firePress) {
		//provide parameters in case the handlers wants to know where was the even fired from
		oOriginalControl.firePress({
			overflowButtonId: this._oOverflowButton.getId()
		});
	}
	this._oOverflowActionSheet.close();
};

sap.uxap.ObjectPageHeader.prototype._hasOneButtonShowText = function (aActions) {

	var bOneButtonShowingText = false;

	if (aActions.length == 1) {
		if (aActions[0] instanceof sap.uxap.ObjectPageHeaderActionButton) {
			bOneButtonShowingText = (!aActions[0].getHideText() && aActions[0].getText() != "" );
		}
		else if (aActions[0] instanceof sap.m.Button){
			bOneButtonShowingText = (aActions[0].getText() != "" );
		}
	}

	return bOneButtonShowingText;
};

/**
 * show or hide the see more button and hide some content if there are not enough space for it
 * @private
 */
sap.uxap.ObjectPageHeader.prototype._adaptLayout = function () {

	var timestamp = (new Date()).getTime();
	jQuery.sap.measure.start("UxAP :: ObjectPageHeader._adaptLayout_" + timestamp, "actions responsiveness");

	var aActions = this.getActions() || [];
	this._oOverflowButton.$().hide();

	//display  overflow if on a mobile scenario and there are more than 1 item or only 1 item displaying only its icon
	if (aActions.length > 1 || this._hasOneButtonShowText(aActions)) {
		var iOverflowButtonSize = this._oOverflowButton.$().width(),
			iAvailableSize = this.$("identifierLine").width() - this.$("identifierLineContainer").width() - this._oObjectImage.$().width(),
			iAvailableSizeWithSeeMore = iAvailableSize - iOverflowButtonSize,
			iContentSize = 0,
			bMobileScenario = jQuery("html").hasClass("sapUiMedia-Std-Phone") || sap.ui.Device.system.phone;

		jQuery.each(aActions, jQuery.proxy(function (iIndex, oAction) {

			iContentSize += oAction.$().width();

			//hide the overflowing content and show their equivalent in the popover
			oAction.$().show();

			//separators and non sap.m.Button or not visible buttons have no equivalent in the overflow
			if (this._oActionSheetButtonMap[oAction.getId()]) {

				this._oActionSheetButtonMap[oAction.getId()].setVisible(false);
				if (iContentSize >= iAvailableSizeWithSeeMore || bMobileScenario) {
					oAction.$().hide();
					this._oActionSheetButtonMap[oAction.getId()].setVisible(true);
				}

			}

			return true;
		}, this));

		if (iContentSize >= iAvailableSizeWithSeeMore || bMobileScenario) {
			this._oOverflowButton.$().show();
		}
	}


	jQuery.sap.measure.end("UxAP :: ObjectPageHeader._adaptLayout_" + timestamp, "actions responsiveness");
};

}; // end of sap/uxap/ObjectPageHeader.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageHeaderActionButton') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageHeaderActionButton.
jQuery.sap.declare("sap.uxap.ObjectPageHeaderActionButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ObjectPageHeaderActionButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHideText hideText} : boolean (default: true)</li>
 * <li>{@link #getHideIcon hideIcon} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Button that can be used in the ObjectPageHeader action aggregation.
 * @extends sap.m.Button
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ObjectPageHeaderActionButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.uxap.ObjectPageHeaderActionButton", { metadata : {

	library : "sap.uxap",
	properties : {
		"hideText" : {type : "boolean", group : "", defaultValue : true},
		"hideIcon" : {type : "boolean", group : "", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageHeaderActionButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageHeaderActionButton.extend
 * @function
 */


/**
 * Getter for property <code>hideText</code>.
 * Hide the button text when rendered into the headerTitle part of the ObjectPageLayout.
 * This is useful if you want to display icons only in the headerTitle part but still want to display text + icon in the actionSheet that appears when not enough space is available on the screen for displaying all actions.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>hideText</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderActionButton#getHideText
 * @function
 */

/**
 * Setter for property <code>hideText</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHideText  new value for property <code>hideText</code>
 * @return {sap.uxap.ObjectPageHeaderActionButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderActionButton#setHideText
 * @function
 */


/**
 * Getter for property <code>hideIcon</code>.
 * Hide the button icon when rendered into the headerTitle part of the ObjectPageLayout.
 * This is useful if you want to display texts only in the headerTitle part but still want to display text + icon in the actionSheet that appears when not enough space is available on the screen for displaying all actions.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideIcon</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderActionButton#getHideIcon
 * @function
 */

/**
 * Setter for property <code>hideIcon</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideIcon  new value for property <code>hideIcon</code>
 * @return {sap.uxap.ObjectPageHeaderActionButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderActionButton#setHideIcon
 * @function
 */

// Start of sap/uxap/ObjectPageHeaderActionButton.js
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained


sap.uxap.ObjectPageHeaderActionButton.prototype.applySettings = function (mSettings, oScope) {

	if (sap.m.Button.prototype.applySettings) {
		sap.m.Button.prototype.applySettings.call(this, mSettings, oScope);
	}

	this.toggleStyleClass("sapUxAPObjectPageHeaderActionButtonHideText", this.getHideText());
	this.toggleStyleClass("sapUxAPObjectPageHeaderActionButtonHideIcon", this.getHideIcon());
};

sap.uxap.ObjectPageHeaderActionButton.prototype.setHideText = function (bValue, bInvalidate) {

	this.toggleStyleClass("sapUxAPObjectPageHeaderActionButtonHideText", bValue);

	return this.setProperty("hideText", bValue, bInvalidate);
};


sap.uxap.ObjectPageHeaderActionButton.prototype.setHideIcon = function (bValue, bInvalidate) {

	this.toggleStyleClass("sapUxAPObjectPageHeaderActionButtonHideIcon", bValue);

	return this.setProperty("hideIcon", bValue, bInvalidate);
};
}; // end of sap/uxap/ObjectPageHeaderActionButton.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageHeaderLayoutData') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageHeaderLayoutData.
jQuery.sap.declare("sap.uxap.ObjectPageHeaderLayoutData");

jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained



/**
 * Constructor for a new ObjectPageHeaderLayoutData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleS visibleS} : boolean (default: true)</li>
 * <li>{@link #getVisibleM visibleM} : boolean (default: true)</li>
 * <li>{@link #getVisibleL visibleL} : boolean (default: true)</li>
 * <li>{@link #getShowSeparatorBefore showSeparatorBefore} : boolean (default: false)</li>
 * <li>{@link #getShowSeparatorAfter showSeparatorAfter} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This is a LayoutData Element that can be added to a control if this control is used within an ObjectPage headerContent aggregation
 * @extends sap.ui.core.LayoutData
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @since 1.16.0
 * @name sap.uxap.ObjectPageHeaderLayoutData
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.LayoutData.extend("sap.uxap.ObjectPageHeaderLayoutData", { metadata : {

	library : "sap.uxap",
	properties : {
		"visibleS" : {type : "boolean", group : "Misc", defaultValue : true},
		"visibleM" : {type : "boolean", group : "Misc", defaultValue : true},
		"visibleL" : {type : "boolean", group : "Misc", defaultValue : true},
		"showSeparatorBefore" : {type : "boolean", group : "Misc", defaultValue : false},
		"showSeparatorAfter" : {type : "boolean", group : "Misc", defaultValue : false},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageHeaderLayoutData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageHeaderLayoutData.extend
 * @function
 */


/**
 * Getter for property <code>visibleS</code>.
 * If this property is set the control will be visible (or not) in a small sized layout.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visibleS</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#getVisibleS
 * @function
 */

/**
 * Setter for property <code>visibleS</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisibleS  new value for property <code>visibleS</code>
 * @return {sap.uxap.ObjectPageHeaderLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#setVisibleS
 * @function
 */


/**
 * Getter for property <code>visibleM</code>.
 * If this property is set the control will be visible (or not) in a medium sized layout.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visibleM</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#getVisibleM
 * @function
 */

/**
 * Setter for property <code>visibleM</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisibleM  new value for property <code>visibleM</code>
 * @return {sap.uxap.ObjectPageHeaderLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#setVisibleM
 * @function
 */


/**
 * Getter for property <code>visibleL</code>.
 * If this property is set the control will be visible (or not) in a large sized layout.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visibleL</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#getVisibleL
 * @function
 */

/**
 * Setter for property <code>visibleL</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisibleL  new value for property <code>visibleL</code>
 * @return {sap.uxap.ObjectPageHeaderLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#setVisibleL
 * @function
 */


/**
 * Getter for property <code>showSeparatorBefore</code>.
 * If this property is set the control will display a separator before it.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showSeparatorBefore</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#getShowSeparatorBefore
 * @function
 */

/**
 * Setter for property <code>showSeparatorBefore</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowSeparatorBefore  new value for property <code>showSeparatorBefore</code>
 * @return {sap.uxap.ObjectPageHeaderLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#setShowSeparatorBefore
 * @function
 */


/**
 * Getter for property <code>showSeparatorAfter</code>.
 * If this property is set the control will display a separator after it.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showSeparatorAfter</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#getShowSeparatorAfter
 * @function
 */

/**
 * Setter for property <code>showSeparatorAfter</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowSeparatorAfter  new value for property <code>showSeparatorAfter</code>
 * @return {sap.uxap.ObjectPageHeaderLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#setShowSeparatorAfter
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * If this property is set the control will take the provided size.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.uxap.ObjectPageHeaderLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageHeaderLayoutData#setWidth
 * @function
 */

// Start of sap/uxap/ObjectPageHeaderLayoutData.js
/*!
 * @copyright@
 */
}; // end of sap/uxap/ObjectPageHeaderLayoutData.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageSectionBase') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageSectionBase.
jQuery.sap.declare("sap.uxap.ObjectPageSectionBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectPageSectionBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomAnchorBarButton customAnchorBarButton} : sap.m.Button</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An abstract container for object page sections and subSections
 * @extends sap.ui.core.Control
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ObjectPageSectionBase
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uxap.ObjectPageSectionBase", { metadata : {

	"abstract" : true,
	publicMethods : [
		// methods
		"connectToModels"
	],
	library : "sap.uxap",
	properties : {
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	aggregations : {
		"customAnchorBarButton" : {type : "sap.m.Button", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageSectionBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageSectionBase.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Section Title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.uxap.ObjectPageSectionBase#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.uxap.ObjectPageSectionBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSectionBase#setTitle
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible ObjectPageSectionBase are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.uxap.ObjectPageSectionBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.uxap.ObjectPageSectionBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSectionBase#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>customAnchorBarButton</code>.<br/>
 * The custom button that will provide a link to the section in the ObjectPageLayout anchor bar.
 * This button will be used as a custom template to be into the ObjectPageLayout anchorBar area, therefore property changes happening on this button template after the first rendering won't affect the actual button copy used in the anchorBar.
 * 
 * If you want to change some of the button properties, you would need to bind them to a model.
 * 
 * @return {sap.m.Button}
 * @public
 * @name sap.uxap.ObjectPageSectionBase#getCustomAnchorBarButton
 * @function
 */


/**
 * Setter for the aggregated <code>customAnchorBarButton</code>.
 * @param {sap.m.Button} oCustomAnchorBarButton
 * @return {sap.uxap.ObjectPageSectionBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSectionBase#setCustomAnchorBarButton
 * @function
 */
	

/**
 * Destroys the customAnchorBarButton in the aggregation 
 * named <code>customAnchorBarButton</code>.
 * @return {sap.uxap.ObjectPageSectionBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSectionBase#destroyCustomAnchorBarButton
 * @function
 */


/**
 * Explicitly ask to connect to the UI5 model tree
 *
 * @name sap.uxap.ObjectPageSectionBase#connectToModels
 * @function
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uxap/ObjectPageSectionBase.js
sap.uxap.ObjectPageSectionBase.prototype.init = function () {

	//handled for ux rules management
	this._bInternalVisible = true;
	this._bInternalTitleVisible = true;
	this._sInternalTitle = "";
	this._bRendered = false;

	this._oParentObjectPageLayout = undefined; //store the parent objectPageLayout
};

sap.uxap.ObjectPageSectionBase.prototype.onBeforeRendering = function () {
	if (!this._getObjectPageLayout()) {
		this._findObjectPageLayout();
	}
};


sap.uxap.ObjectPageSectionBase.prototype.onAfterRendering = function () {
	if (this._getObjectPageLayout()) {
		this._getObjectPageLayout()._adjustLayout();
	}

	this._bRendered = true;
};

/**
 * set the internal visibility of the sectionBase. This is set by the ux rules (for example don't display a section that has no subSections)
 * @param bValue
 * @param bInvalidate if set to true, the sectionBase should be rerendered in order to be added or removed to the dom (similar to what a "real" internalVisibility property would trigger
 * @private
 */
sap.uxap.ObjectPageSectionBase.prototype._setInternalVisible = function (bValue, bInvalidate) {
	if (bValue != this._bInternalVisible) {
		this._bInternalVisible = bValue;
		if (bInvalidate) {
			this.invalidate();
		}
	}
};

sap.uxap.ObjectPageSectionBase.prototype._getInternalVisible = function () {
	return this._bInternalVisible;
};

/**
 * set the internal visibility of the sectionBase title. This is set by the ux rules (for example don't display a subSection title if there are only 1 in the section)
 * @param bValue
 * @param bInvalidate if set to true, the sectionBase should be rerendered in order to be added or removed to the dom (similar to what a "real" internalVisibility property would trigger
 * @private
 */
sap.uxap.ObjectPageSectionBase.prototype._setInternalTitleVisible = function (bValue, bInvalidate) {
	if (bValue != this._bInternalTitleVisible) {
		this._bInternalTitleVisible = bValue;
		if (bInvalidate) {
			this.invalidate();
		}
	}
};

sap.uxap.ObjectPageSectionBase.prototype._getInternalTitleVisible = function () {
	return this._bInternalTitleVisible;
};

/**
 * set the internal title of the sectionBase. This is set by the ux rules (for example the subSection title becomes the section title if there are only 1 subSection in the section)
 * @param sValue
 * @param bInvalidate if set to true, the sectionBase should be rerendered in order to be added or removed to the dom (similar to what a "real" internalVisibility property would trigger
 * @private
 */

sap.uxap.ObjectPageSectionBase.prototype._setInternalTitle = function (sValue, bInvalidate) {
	if (sValue != this._sInternalTitle) {
		this._sInternalTitle = sValue;
		if (bInvalidate) {
			this.invalidate();
		}
	}
};

sap.uxap.ObjectPageSectionBase.prototype._getInternalTitle = function () {
	return this._sInternalTitle;
};

/**
 * find the parent sap.uxap.ObjectPageLayout in the control tree
 * @private
 */
sap.uxap.ObjectPageSectionBase.prototype._findObjectPageLayout = function () {
	this._oParentObjectPageLayout = this.getParent();

	while (this._oParentObjectPageLayout && !(this._oParentObjectPageLayout instanceof sap.uxap.ObjectPageLayout)) {
		this._oParentObjectPageLayout = this._oParentObjectPageLayout.getParent();
	}
};

/**
 * getter for the parent object page layout
 * @returns {*}
 * @private
 */
sap.uxap.ObjectPageSectionBase.prototype._getObjectPageLayout = function () {
	return this._oParentObjectPageLayout;
};


/*************************************************************************************
 *  notify the parent objectPageLayout of structural changes after the first rendering
 ************************************************************************************/
sap.uxap.ObjectPageSectionBase.prototype._notifyObjectPageLayout = function () {
	if (this._bRendered && this._getObjectPageLayout()) {
		this._getObjectPageLayout()._adjustLayoutAndUxRules();
	}
};


sap.uxap.ObjectPageSectionBase.prototype.addAggregation = function (sAggregationName, oObject) {
	var oResult = sap.ui.core.Control.prototype.addAggregation.call(this, sAggregationName, oObject);
	this._notifyObjectPageLayout();
	return oResult;
};

sap.uxap.ObjectPageSectionBase.prototype.insertAggregation = function (sAggregationName, oObject, iIndex) {
	var oResult = sap.ui.core.Control.prototype.insertAggregation.call(this, sAggregationName, oObject, iIndex);
	this._notifyObjectPageLayout();
	return oResult;
};

sap.uxap.ObjectPageSectionBase.prototype.removeAllAggregation = function (sAggregationName) {
	var oResult = sap.ui.core.Control.prototype.removeAllAggregation.call(this, sAggregationName);
	this._notifyObjectPageLayout();
	return oResult;
};

sap.uxap.ObjectPageSectionBase.prototype.removeAggregation = function (sAggregationName, oObject) {
	var oResult = sap.ui.core.Control.prototype.removeAggregation.call(this, sAggregationName, oObject);
	this._notifyObjectPageLayout();
	return oResult;
};

sap.uxap.ObjectPageSectionBase.prototype.destroyAggregation = function (sAggregationName) {
	var oResult = sap.ui.core.Control.prototype.destroyAggregation.call(this, sAggregationName);
	this._notifyObjectPageLayout();
	return oResult;
};


sap.uxap.ObjectPageSectionBase.prototype.setVisible = function (bValue, bSuppressInvalidate) {


	if (this._getObjectPageLayout()) {
		this.setProperty("visible", bValue, true) /* handle invalidation ourselves in adjustLayoutAndUxRules */;
		this._getObjectPageLayout()._adjustLayoutAndUxRules();
		this.invalidate();
	}
	else {
		this.setProperty("visible", bValue, bSuppressInvalidate);
	}


	return this;
};

sap.uxap.ObjectPageSectionBase.prototype.setTitle = function (sValue, bSuppressInvalidate) {

	this.setProperty("title", sValue, bSuppressInvalidate);
	this._notifyObjectPageLayout();

	return this;
};



}; // end of sap/uxap/ObjectPageSectionBase.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageSubSection') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageSubSection.
jQuery.sap.declare("sap.uxap.ObjectPageSubSection");




/**
 * Constructor for a new ObjectPageSubSection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMode mode} : sap.uxap.ObjectPageSubSectionMode (default: sap.uxap.ObjectPageSubSectionMode.Collapsed)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getBlocks blocks} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getMoreBlocks moreBlocks} : sap.ui.core.Control[]</li>
 * <li>{@link #getActions actions} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.uxap.ObjectPageSectionBase#constructor sap.uxap.ObjectPageSectionBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SubSection in the ObjectPage layout is a container for Objectpage Blocks
 * @extends sap.uxap.ObjectPageSectionBase
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ObjectPageSubSection
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageSectionBase.extend("sap.uxap.ObjectPageSubSection", { metadata : {

	publicMethods : [
		// methods
		"refreshSeeMoreVisibility"
	],
	library : "sap.uxap",
	properties : {
		"mode" : {type : "sap.uxap.ObjectPageSubSectionMode", group : "Appearance", defaultValue : sap.uxap.ObjectPageSubSectionMode.Collapsed}
	},
	defaultAggregation : "blocks",
	aggregations : {
		"_grid" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
		"blocks" : {type : "sap.ui.core.Control", multiple : true, singularName : "block"}, 
		"moreBlocks" : {type : "sap.ui.core.Control", multiple : true, singularName : "moreBlock"}, 
		"actions" : {type : "sap.ui.core.Control", multiple : true, singularName : "action"}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageSubSection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageSubSection.extend
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Mode of subsection (propagated to the children blocks and moreBlocks modes)
 * Blocks of moreBlocks aggregation are getting displayed only when SubSection mode is set to Expanded.
 *
 * Default value is <code>Collapsed</code>
 *
 * @return {sap.uxap.ObjectPageSubSectionMode} the value of property <code>mode</code>
 * @public
 * @name sap.uxap.ObjectPageSubSection#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>Collapsed</code> 
 *
 * @param {sap.uxap.ObjectPageSubSectionMode} oMode  new value for property <code>mode</code>
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#setMode
 * @function
 */


/**
 * Getter for aggregation <code>blocks</code>.<br/>
 * controls to display in the subsection
 * 
 * <strong>Note</strong>: this is the default aggregation for ObjectPageSubSection.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.uxap.ObjectPageSubSection#getBlocks
 * @function
 */


/**
 * Inserts a block into the aggregation named <code>blocks</code>.
 *
 * @param {sap.ui.core.Control}
 *          oBlock the block to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the block should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the block is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the block is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#insertBlock
 * @function
 */

/**
 * Adds some block <code>oBlock</code> 
 * to the aggregation named <code>blocks</code>.
 *
 * @param {sap.ui.core.Control}
 *            oBlock the block to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#addBlock
 * @function
 */

/**
 * Removes an block from the aggregation named <code>blocks</code>.
 *
 * @param {int | string | sap.ui.core.Control} vBlock the block to remove or its index or id
 * @return {sap.ui.core.Control} the removed block or null
 * @public
 * @name sap.uxap.ObjectPageSubSection#removeBlock
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>blocks</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageSubSection#removeAllBlocks
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>blocks</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oBlock the block whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageSubSection#indexOfBlock
 * @function
 */
	

/**
 * Destroys all the blocks in the aggregation 
 * named <code>blocks</code>.
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#destroyBlocks
 * @function
 */


/**
 * Getter for aggregation <code>moreBlocks</code>.<br/>
 * Additional controls to display when the show more / see all button is pressed
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.uxap.ObjectPageSubSection#getMoreBlocks
 * @function
 */


/**
 * Inserts a moreBlock into the aggregation named <code>moreBlocks</code>.
 *
 * @param {sap.ui.core.Control}
 *          oMoreBlock the moreBlock to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the moreBlock should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the moreBlock is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the moreBlock is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#insertMoreBlock
 * @function
 */

/**
 * Adds some moreBlock <code>oMoreBlock</code> 
 * to the aggregation named <code>moreBlocks</code>.
 *
 * @param {sap.ui.core.Control}
 *            oMoreBlock the moreBlock to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#addMoreBlock
 * @function
 */

/**
 * Removes an moreBlock from the aggregation named <code>moreBlocks</code>.
 *
 * @param {int | string | sap.ui.core.Control} vMoreBlock the moreBlock to remove or its index or id
 * @return {sap.ui.core.Control} the removed moreBlock or null
 * @public
 * @name sap.uxap.ObjectPageSubSection#removeMoreBlock
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>moreBlocks</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageSubSection#removeAllMoreBlocks
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>moreBlocks</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oMoreBlock the moreBlock whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageSubSection#indexOfMoreBlock
 * @function
 */
	

/**
 * Destroys all the moreBlocks in the aggregation 
 * named <code>moreBlocks</code>.
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#destroyMoreBlocks
 * @function
 */


/**
 * Getter for aggregation <code>actions</code>.<br/>
 * Actions available for this subSection
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.uxap.ObjectPageSubSection#getActions
 * @function
 */


/**
 * Inserts a action into the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.core.Control}
 *          oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the action should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the action is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#insertAction
 * @function
 */

/**
 * Adds some action <code>oAction</code> 
 * to the aggregation named <code>actions</code>.
 *
 * @param {sap.ui.core.Control}
 *            oAction the action to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#addAction
 * @function
 */

/**
 * Removes an action from the aggregation named <code>actions</code>.
 *
 * @param {int | string | sap.ui.core.Control} vAction the action to remove or its index or id
 * @return {sap.ui.core.Control} the removed action or null
 * @public
 * @name sap.uxap.ObjectPageSubSection#removeAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>actions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageSubSection#removeAllActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>actions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oAction the action whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageSubSection#indexOfAction
 * @function
 */
	

/**
 * Destroys all the actions in the aggregation 
 * named <code>actions</code>.
 * @return {sap.uxap.ObjectPageSubSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSubSection#destroyActions
 * @function
 */


/**
 * Refresh the seeMore button visibility
 *
 * @name sap.uxap.ObjectPageSubSection#refreshSeeMoreVisibility
 * @function
 * @type 
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uxap/ObjectPageSubSection.js
jQuery.sap.require('sap.uxap.ObjectPageSubSectionLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained

jQuery.sap.require('sap.uxap.ObjectPageSubSectionMode'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained


/**
 * @private
 */
sap.uxap.ObjectPageSubSection.prototype.init = function () {

	sap.uxap.ObjectPageSectionBase.prototype.init.call(this);

	//i18n: load once for every subsections
	if (!sap.uxap.i18nModel) {
		sap.uxap.i18nModel = new sap.ui.model.resource.ResourceModel({
			bundleUrl: jQuery.sap.getModulePath("sap.uxap.i18n.i18n", ".properties")
		});
	}

	this.oResourceBundle = sap.uxap.i18nModel.getResourceBundle();

	//build private aggregations
	this._oGrid = new sap.ui.layout.Grid({
		id: this.getId() + "-innerGrid",
		defaultSpan: "L12 M12 S12",
		hSpacing: 1,
		vSpacing: 1,
		width: "100%"
	});

	this.setAggregation("_grid", this._oGrid);

	//build inner controls
	this._buildSeeMoreControl();

	this._iResizeId = undefined;    //resize handler if needed

	//proxy public aggregations
	this._bRenderedFirstTime = false;
	this._aAggregationProxy = {blocks: [], moreBlocks: []};

	//dom reference
	this._$spacer = [];

	//switch logic for the default mode
	this._switchSubSectionMode(this.getMode());
};

sap.uxap.ObjectPageSubSection.prototype.connectToModels = function () {
	var aBlocks = this.getBlocks() || [],
		aMoreBlocks = this.getMoreBlocks() || [];

	if (aBlocks.length > 0) {
		jQuery.each(aBlocks, jQuery.proxy(function (iBlockIndex, oBlock) {
			if (oBlock instanceof sap.uxap.BlockBase) {
				if (!oBlock.getMode()) {
					oBlock.setMode(this.getMode());
				}
				oBlock.connectToModels();
			}
		}, this));
	}

	if (aMoreBlocks.length > 0 && this.getMode() == sap.uxap.ObjectPageSubSectionMode.Expanded) {
		jQuery.each(aMoreBlocks, jQuery.proxy(function (iBlockIndex, oMoreBlock) {
			if (oMoreBlock instanceof sap.uxap.BlockBase) {
				if (!oMoreBlock.getMode()) {
					oMoreBlock.setMode(this.getMode());
				}
				oMoreBlock.connectToModels();
			}
		}, this));
	}
};

sap.uxap.ObjectPageSubSection.prototype.exit = function () {
	if (this._oSeeMoreButton) {
		this._oSeeMoreButton.destroy();
		this._oSeeMoreButton = null;
	}

	if (this._iResizeId) {
		sap.ui.core.ResizeHandler.deregister(this._iResizeId);
	}

	if (sap.uxap.ObjectPageSectionBase.prototype.exit) {
		sap.uxap.ObjectPageSectionBase.prototype.exit.call(this);
	}
};

sap.uxap.ObjectPageSubSection.prototype.onAfterRendering = function () {

	if (sap.uxap.ObjectPageSectionBase.prototype.onAfterRendering) {
		sap.uxap.ObjectPageSectionBase.prototype.onAfterRendering.call(this);
	}

	if (this._getObjectPageLayout()) {

		switch (this._getObjectPageLayout().getSubSectionLayout()) {
			case sap.uxap.ObjectPageSubSectionLayout.TitleOnLeft:
				this._afterRenderingTitleOnLeftLayout();
				break;
			default:
			/* nothing */
		}

		this._$spacer = jQuery.sap.byId(this._getObjectPageLayout().getId() + "-spacer");
	}
};

sap.uxap.ObjectPageSubSection.prototype.onBeforeRendering = function () {

	if (sap.uxap.ObjectPageSectionBase.prototype.onBeforeRendering) {
		sap.uxap.ObjectPageSectionBase.prototype.onBeforeRendering.call(this);
	}

	var aVisibleBlocks, sLayout;

	//proxy aggregations
	this._setAggregationProxy();

	this._oGrid.removeAllContent();

	//build layouts
	try {
		//propagate subSectionLayout from objectPageLayout subSections
		var iColumnLayout;

		if (this._getObjectPageLayout()) {
			sLayout = this._getObjectPageLayout().getSubSectionLayout();
		}

		//layout specific configuration
		switch (sLayout) {
			case sap.uxap.ObjectPageSubSectionLayout.TitleOnLeft:
				this._oGrid.setContainerQuery(false);
				iColumnLayout = 2;
				break;
			default:
				this._oGrid.setContainerQuery(true);
				iColumnLayout = 3;
		}


		//apply the layouting information
		aVisibleBlocks = this._calcBlockColumnLayout(this.getBlocks(), iColumnLayout);

		jQuery.each(aVisibleBlocks, jQuery.proxy(function (iIndex, oBlock) {

			//propagate section state to blocks
			this._setBlockMode(oBlock, this.getMode());

			this._oGrid.addContent(oBlock);

		}, this));

		//also add the more blocks defined for being visible in expanded mode only
		if (this.getMode() === sap.uxap.ObjectPageSubSectionMode.Expanded) {

			//apply the layouting information
			aVisibleBlocks = this._calcBlockColumnLayout(this.getMoreBlocks(), iColumnLayout);

			jQuery.each(aVisibleBlocks, jQuery.proxy(function (iIndex, oMoreBlock) {
				//propagate section state to blocks
				this._setBlockMode(oMoreBlock, sap.uxap.ObjectPageSubSectionMode.Expanded);
				this._oGrid.addContent(oMoreBlock);
			}, this));
		}
	}
	catch (sError) {
		jQuery.sap.log.error("ObjectPageSubSection :: error while building layout " + sLayout + ": " + sError);
	}

	this.refreshSeeMoreVisibility();
};

sap.uxap.ObjectPageSubSection.prototype.refreshSeeMoreVisibility = function () {
	var bBlockHasMore = jQuery.isArray(this.getMoreBlocks()) && this.getMoreBlocks().length > 0; //we have moreBlocks therefore we always display the seeMore

	if (!bBlockHasMore) {
		jQuery.each(this.getBlocks(), jQuery.proxy(function (iIndex, oBlock) {

			//check if the block ask for the global see more the rule is
			//by default we don't display the see more
			//if one control is visible and ask for it then we display it
			if (oBlock instanceof sap.uxap.BlockBase && oBlock.getVisible() && oBlock.getShowSubSectionMore()) {
				bBlockHasMore = true;
			}
			return !bBlockHasMore;
		}, this));
	}

	//if the subsection is already rendered, don't rerender it all for showing a more button
	if (this.$().length > 0) {
		this.$().toggleClass("sapUxAPObjectPageSubSectionWithSeeMore", bBlockHasMore);
	}

	this.toggleStyleClass("sapUxAPObjectPageSubSectionWithSeeMore", bBlockHasMore);

	if (this._oSeeMoreButton.$().length > 0) {
		this._oSeeMoreButton.$().toggleClass("sapUxAPSubSectionSeeMoreButtonVisible", bBlockHasMore);
	}
	this._oSeeMoreButton.toggleStyleClass("sapUxAPSubSectionSeeMoreButtonVisible", bBlockHasMore);

	return bBlockHasMore;
};

sap.uxap.ObjectPageSubSection.prototype.setMode = function (sMode) {
	if (this.getMode() !== sMode) {
		this._switchSubSectionMode(sMode);

		if (this._bRenderedFirstTime) {
			this.rerender();
		}
	}
	return this;
};

/*************************************************************************************
 * generic block layout calculation
 ************************************************************************************/

/**
 * calculate the layout data to use for subsection blocks
 * Aligned with PUX specifications as of Oct 14, 2014
 */
sap.uxap.ObjectPageSubSection.prototype._calcBlockColumnLayout = function (aBlocks, iColumnLayout) {

	var iRemainingL,
		iRemainingM,
		aVisibleBlocks = [];

	//step 1: get only visible blocks into consideration
	jQuery.each(aBlocks, jQuery.proxy(function (iIndex, oBlock) {

		//if this is the first rendering and a layout has been defined by the subsection developer,
		//we remove it and let the built-in mechanism decide on the layouting aspects
		if (!this._bRenderedFirstTime && oBlock.getLayoutData()) {
			oBlock.destroyLayoutData();
			jQuery.sap.log.warning("ObjectPageSubSection :: forbidden use of layoutData for block " + oBlock.getMetadata().getName(), "layout will be set by subSection");
		}

		if (!oBlock.getVisible || oBlock.getVisible()) {
			aVisibleBlocks.push(oBlock);
		}
	}, this));

	//step 2: set layout for each blocks based on their columnLayout configuration
	//As of Oct 14, 2014, the default behavior is:
	//on phone, blocks take always the full line
	//on tablet, desktop:
	//1 block on the line: takes 3/3 columns
	//2 blocks on the line: takes 1/3 columns then 2/3 columns
	//3 blocks on the line: takes 1/3 columns then 1/3 columns and last 1/3 columns

	//rules for translating auto: LL2 grammar
	//1 by default
	//fills the line if the next 2 blocks permit it
	iRemainingL = iColumnLayout;
	iRemainingM = 2;

	jQuery.each(aVisibleBlocks, jQuery.proxy(function (iIndex, oBlock) {

		var iSizeL, iSizeM;

		iSizeL = this._calculatedSize(oBlock, iRemainingL, aVisibleBlocks[iIndex + 1], aVisibleBlocks[iIndex + 2], iColumnLayout);

		if (iColumnLayout == 3) {
			iSizeM = this._calculatedSize(oBlock, iRemainingM, aVisibleBlocks[iIndex + 1], aVisibleBlocks[iIndex + 2], 2);
		}
		else {
			iSizeM = iSizeL;
		}

		//set block layout based on resolution and break to a new line if necessary
		oBlock.setLayoutData(new sap.ui.layout.GridData({
			spanS: 12,
			spanM: iSizeM * (12 / 2),                       //iColumnLayout is 2 already
			spanL: iSizeL * (12 / iColumnLayout),
			linebreakM: (iIndex > 0 && iRemainingM === 2), //iColumnLayout is 2 already
			linebreakL: (iIndex > 0 && iRemainingL === iColumnLayout)
		}));


		iRemainingL -= iSizeL;
		if (iRemainingL <= 0) {
			iRemainingL = iColumnLayout;
		}

		if (iColumnLayout !== 1) {
			iRemainingM -= iSizeM;
			if (iRemainingM <= 0) {
				iRemainingM = 2;
			}
		}

	}, this));

	return aVisibleBlocks;
};

sap.uxap.ObjectPageSubSection.prototype._calculatedSize = function (oBlock, iRemaining, oNext, oFollowing, iMax) {
	var iCalculatedSize, iCalc;

	if (!this._hasAutoLayout(oBlock)) {
		iCalculatedSize = Math.min(iMax, window.parseInt(oBlock.getColumnLayout(), 10));
	}
	else {
		iRemaining -= 1;
		iCalc = this._calcLayout(oNext);
		if (iCalc <= iRemaining) {
			iRemaining -= iCalc;

			iCalc = this._calcLayout(oFollowing);
			if (iCalc <= iRemaining) {
				iRemaining -= iCalc;
			}
		}

		iCalculatedSize = iRemaining + 1;
	}

	return iCalculatedSize;
};

sap.uxap.ObjectPageSubSection.prototype._calcLayout = function (oBlock) {
	var iLayoutCols = 1;

	if (!oBlock) {
		iLayoutCols = 0;
	}
	else if (oBlock instanceof sap.uxap.BlockBase && oBlock.getColumnLayout() != "auto") {
		iLayoutCols = window.parseInt(oBlock.getColumnLayout(), 10);
	}

	return iLayoutCols;
};

sap.uxap.ObjectPageSubSection.prototype._hasAutoLayout = function (oBlock) {
	return !(oBlock instanceof sap.uxap.BlockBase) || oBlock.getColumnLayout() == "auto";
};


/*************************************************************************************
 * TitleOnLeft layout
 ************************************************************************************/

/**
 * on after rendering actions for the titleOnLeft Layout
 * @private
 */
sap.uxap.ObjectPageSubSection.prototype._afterRenderingTitleOnLeftLayout = function () {
	this._$standardHeader = jQuery.sap.byId(this.getId() + "-header");
	this._$grid = this._oGrid.$();

	if (!this._iResizeId) {
		this._iResizeId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._titleOnLeftSynchronizeLayouts, this));
	}

	this._titleOnLeftSynchronizeLayouts();
};

sap.uxap.ObjectPageSubSection.prototype._titleOnLeftSynchronizeLayouts = function () {
	jQuery.sap.delayedCall(50 /* dom painting */, this, function () {
		this._$standardHeader.toggleClass("titleOnLeftLayout", this._$grid.hasClass("sapUiRespGridMedia-Std-Desktop"));
	});
};


/*************************************************************************************
 *  blocks & moreBlocks aggregation proxy
 *  getter and setters works with _aAggregationProxy instead of the blocks aggregation
 ************************************************************************************/

sap.uxap.ObjectPageSubSection.prototype._setAggregationProxy = function () {
	if (this._bRenderedFirstTime) {
		return;
	}

	//empty real aggregations and feed internal ones at first rendering only
	jQuery.each(this._aAggregationProxy, jQuery.proxy(function (sAggregationName, aValue) {
		this._setAggregation(sAggregationName, this.removeAllAggregation(sAggregationName));
	}, this));

	this._bRenderedFirstTime = true;
};

sap.uxap.ObjectPageSubSection.prototype.hasProxy = function (sAggregationName) {
	return this._bRenderedFirstTime && this._aAggregationProxy.hasOwnProperty(sAggregationName);
};

sap.uxap.ObjectPageSubSection.prototype._getAggregation = function (sAggregationName) {
	return this._aAggregationProxy[sAggregationName];
};

sap.uxap.ObjectPageSubSection.prototype._setAggregation = function (sAggregationName, aValue) {
	this._aAggregationProxy[sAggregationName] = aValue;
	this._notifyObjectPageLayout();
	this.invalidate();
	return this._aAggregationProxy[sAggregationName];
};

sap.uxap.ObjectPageSubSection.prototype.addAggregation = function (sAggregationName, oObject) {
	if (this.hasProxy(sAggregationName)) {
		var aAggregation = this._getAggregation(sAggregationName);
		aAggregation.push(oObject);
		this._setAggregation(aAggregation);
		return this;
	}

	return sap.uxap.ObjectPageSectionBase.prototype.addAggregation.apply(this, arguments);
};

sap.uxap.ObjectPageSubSection.prototype.insertAggregation = function (sAggregationName, oObject, iIndex) {
	if (this.hasProxy(sAggregationName)) {
		jQuery.sap.log.warning("ObjectPageSubSection :: used of insertAggregation for " + sAggregationName + " is not supported, will use addAggregation instead");
		return this.addAggregation(sAggregationName, oObject);
	}

	return sap.uxap.ObjectPageSectionBase.prototype.insertAggregation.apply(this, arguments);
};

sap.uxap.ObjectPageSubSection.prototype.removeAllAggregation = function (sAggregationName) {
	if (this.hasProxy(sAggregationName)) {
		var aInternalAggregation = this._getAggregation(sAggregationName);
		var aItems = aInternalAggregation.slice(0, aInternalAggregation.length - 1);
		this._setAggregation(sAggregationName, []);
		return aItems;
	}

	return sap.uxap.ObjectPageSectionBase.prototype.removeAllAggregation.apply(this, arguments);
};

sap.uxap.ObjectPageSubSection.prototype.removeAggregation = function (sAggregationName, oObject) {

	if (this.hasProxy(sAggregationName)) {
		var bRemoved = false, aInternalAggregation = this._getAggregation(sAggregationName);

		jQuery.each(aInternalAggregation, jQuery.proxy(function (iIndex, oObjectCandidate) {
			if (oObjectCandidate.getId() === oObject.getId()) {
				aInternalAggregation.splice(iIndex, 1);
				this._setAggregation(aInternalAggregation);
				bRemoved = true;
			}
			return !bRemoved;
		}, this));

		return (bRemoved ? oObject : null);
	}

	return sap.uxap.ObjectPageSectionBase.prototype.removeAggregation.apply(this, arguments);
};

sap.uxap.ObjectPageSubSection.prototype.indexOfAggregation = function (sAggregationName, oObject) {

	if (this.hasProxy(sAggregationName)) {

		var iIndexFound = -1, aInternalAggregation = this._getAggregation(sAggregationName);

		jQuery.each(aInternalAggregation, jQuery.proxy(function (iIndex, oObjectCandidate) {
			if (oObjectCandidate.getId() === oObject.getId()) {
				iIndexFound = iIndex;
			}
			return (iIndexFound < 0);
		}, this));

		return iIndexFound;
	}

	return sap.uxap.ObjectPageSectionBase.prototype.indexOfAggregation.apply(this, arguments);
};

sap.uxap.ObjectPageSubSection.prototype.getAggregation = function (sAggregationName) {
	if (this.hasProxy(sAggregationName)) {
		return this._getAggregation(sAggregationName);
	}

	return sap.uxap.ObjectPageSectionBase.prototype.getAggregation.apply(this, arguments);
};

sap.uxap.ObjectPageSubSection.prototype.destroyAggregation = function (sAggregationName) {

	if (this.hasProxy(sAggregationName)) {

		var aInternalAggregation = this._getAggregation(sAggregationName);

		jQuery.each(aInternalAggregation, function (iIndex, oObject) {
			oObject.destroy();
		});

		this._setAggregation(sAggregationName, []);

		return this;
	}

	return sap.uxap.ObjectPageSectionBase.prototype.destroyAggregation.apply(this, arguments);
};

/*************************************************************************************
 *  Private section : should overridden with care
 ************************************************************************************/

/**
 * build the control that will used internally for the see more / see less
 * @private
 */
sap.uxap.ObjectPageSubSection.prototype._buildSeeMoreControl = function () {
	this._oSeeMoreButton = new sap.m.Button(this.getId() + "--seeMore", {
		type: sap.m.ButtonType.Transparent,
		iconFirst: false,
		press: jQuery.proxy(this._onSeeMorePress, this)
	}).addStyleClass("sapUxAPSubSectionSeeMoreButton");
};

/**
 * called when a user clicks on the see more or see all button
 * @param oEvent
 * @private
 */
sap.uxap.ObjectPageSubSection.prototype._onSeeMorePress = function (oEvent) {

	var sCurrentMode = this.getMode(),
		sTargetMode,
		aMoreBlocks = this.getMoreBlocks() || [];

	//we just switch the layoutMode for the underlying blocks
	if (sCurrentMode === sap.uxap.ObjectPageSubSectionMode.Expanded) {
		sTargetMode = sap.uxap.ObjectPageSubSectionMode.Collapsed;
	}
	else {/* we are in Collapsed */
		sTargetMode = sap.uxap.ObjectPageSubSectionMode.Expanded;

		if (aMoreBlocks.length > 0) {
			jQuery.each(aMoreBlocks, jQuery.proxy(function (iBlockIndex, oMoreBlock) {
				if (oMoreBlock instanceof sap.uxap.BlockBase) {
					if (!oMoreBlock.getMode()) {
						oMoreBlock.setMode(this.getMode());
					}
					oMoreBlock.connectToModels();
				}
			}, this));
		}
	}
	this._switchSubSectionMode(sTargetMode);

	//avoid to reapply the focus after rendering on tablet and desktop (finalizeRendering)
	if (!jQuery.device.is.phone) {
		oEvent.getSource().$().blur();
	}

	//in case of the last subsection of an objectpage we need to compensate its height change while rerendering)
	if (this._$spacer.length > 0) {
		this._$spacer.height(this._$spacer.height() + this.$().height());
	}

	//need to re-render the subsection in order to render all the blocks with the appropriate mode & layout
	//0000811842 2014
	this.rerender();

};

/**
 * switch the state for the subsection
 * @param sSwitchToMode
 * @private
 */
sap.uxap.ObjectPageSubSection.prototype._switchSubSectionMode = function (sSwitchToMode) {
	sSwitchToMode = this.validateProperty("mode", sSwitchToMode);

	if (sSwitchToMode === sap.uxap.ObjectPageSubSectionMode.Collapsed) {
		this.setProperty("mode", sap.uxap.ObjectPageSubSectionMode.Collapsed, true);
		this._oSeeMoreButton.setText(this.oResourceBundle.getText("SEE_MORE"));
	}
	else {
		this.setProperty("mode", sap.uxap.ObjectPageSubSectionMode.Expanded, true);
		this._oSeeMoreButton.setText(this.oResourceBundle.getText("SEE_LESS"));
	}
};

/**
 * set the mode on a control if there is such mode property
 * @param oBlock
 * @param sMode
 * @private
 */
sap.uxap.ObjectPageSubSection.prototype._setBlockMode = function (oBlock, sMode) {
	if (oBlock instanceof sap.uxap.BlockBase) {
		oBlock.setMode(sMode);
	}
	else {
		jQuery.sap.log.debug("ObjectPageSubSection :: cannot propagate mode " + sMode + " to " + oBlock.getMetadata().getName());
	}
};

}; // end of sap/uxap/ObjectPageSubSection.js
if ( !jQuery.sap.isDeclared('sap.uxap.AnchorBar') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.AnchorBar.
jQuery.sap.declare("sap.uxap.AnchorBar");

jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained



/**
 * Constructor for a new AnchorBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowPopover showPopover} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Toolbar#constructor sap.m.Toolbar}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A AnchorBar is bar that displays content differently between desktop/tablet and phone.
 * @extends sap.m.Toolbar
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.AnchorBar
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Toolbar.extend("sap.uxap.AnchorBar", { metadata : {

	publicMethods : [
		// methods
		"scrollToSection", "getScrollDelegate"
	],
	library : "sap.uxap",
	properties : {
		"showPopover" : {type : "boolean", group : "", defaultValue : true}
	},
	associations : {
		"selectedButton" : {type : "sap.m.Button", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.AnchorBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.AnchorBar.extend
 * @function
 */


/**
 * Getter for property <code>showPopover</code>.
 * Show or not the popover when clicking on first level buttons
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPopover</code>
 * @public
 * @name sap.uxap.AnchorBar#getShowPopover
 * @function
 */

/**
 * Setter for property <code>showPopover</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPopover  new value for property <code>showPopover</code>
 * @return {sap.uxap.AnchorBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.AnchorBar#setShowPopover
 * @function
 */


/**
 * The button that represents the section being scrolled by the user.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * @public
 * @name sap.uxap.AnchorBar#getSelectedButton
 * @function
 */

/**
 * The button that represents the section being scrolled by the user.
 *
 * @param {string | sap.m.Button} vSelectedButton 
 *    Id of an element which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.uxap.AnchorBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.AnchorBar#setSelectedButton
 * @function
 */


	
/**
 * Scrolls to the given section
 *
 * @name sap.uxap.AnchorBar#scrollToSection
 * @function
 * @param {string} sId
 *         The section id to scroll to
 * @param {int} iDuration
 *         Scroll duration (in ms). Default value is 0
 * @type sap.uxap.ObjectPageLayout
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Returns a sap.ui.core.delegate.ScrollEnablement object used to handle scrolling
 *
 * @name sap.uxap.AnchorBar#getScrollDelegate
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uxap/AnchorBar.js

jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained

jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


sap.uxap.AnchorBar.prototype.init = function () {
	if (sap.m.Toolbar.prototype.init) {
		sap.m.Toolbar.prototype.init.call(this);
	}

	this.addStyleClass("sapUxAPAnchorBar");

	this._aPopovers = [];       //keep references on the popovers in order to clean them on exit
	this._oPressHandlers = {};  //keep references on the press handlers we set on first level items (in case of behavior change)
	this._oSectionInfo = {};    //keep scrolling info on sections
	this._oPhoneAction = null;
	this._oScroller = null;
	this._oArrowLeft = null;
	this._oArrowRight = null;

	//store reference on the phone control dom for perf
	this._$phone = [];

	//are we on a rtl scenario?
	//IE handles rtl in a transparent way (positions positives, scroll starts at the end)
	//while firefox, safari and chrome have a special management (scroll at the beginning and negative positioning)
	//therefore we will apply some specific actions only if are in rtl and not in IE.
	this._bRtlScenario = sap.ui.getCore().getConfiguration().getRTL() && !sap.ui.Device.browser.msie;

	//there are 3 different uses cases:
	//case 1: on a real phone we don't need the scrolling anchorBar, just the hierarchicalSelect
	//case 2: on a real ipad, we don't need the hierarchicalSelect select, just the anchorBar
	//case 3: on a desktop we need both as the size may change

	this._bPhoneScenario = sap.ui.Device.system.phone || sap.ui.Device.system.desktop;
	this._bTabletScenario = sap.ui.Device.system.tablet || sap.ui.Device.system.desktop;

	//case 2&3 require the scrolling anchorBar
	if (this._bTabletScenario) {
		//horizontal scrolling
		this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
			horizontal: true,
			vertical: false,
			nonTouchScrolling: true
		});

		this._oArrowLeft = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollLeft", this._oArrowLeft, this, {
			src: "sap-icon://navigation-left-arrow"
		}, ["sapMITBArrowScroll", "sapMITBArrowScrollLeft", "sapUxAPAnchorBarArrowScroll"]);     //same classes as the iconTabBar as requested by Ux

		this._oArrowRight = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollRight", this._oArrowRight, this, {
			src: "sap-icon://navigation-right-arrow"
		}, ["sapMITBArrowScroll", "sapMITBArrowScrollRight", "sapUxAPAnchorBarArrowScroll"]);   //same classes as the iconTabBar as requested by Ux

		this._iREMSize = parseInt(jQuery("body").css("font-size"), 10);
		this._iTolerance = this._iREMSize * 2;  // 2 rem

		//listen to resize
		this._sResizeListenerId = undefined; //defined in onAfterRendering
	}

	if (this._bPhoneScenario) {
		//select to display in phone scenario
		this._oPhoneAction = new sap.uxap.HierarchicalSelect({
			width: "100%",
			change: jQuery.proxy(this._onPhoneSelectChange, this)
		});
		this._oPhoneAction.setParent(this);
	}

	//composite controls
	this.setDesign("Transparent"); //styling is coming from css
};

/*******************************************************************************
 * UX design
 ******************************************************************************/
sap.uxap.AnchorBar.SCROLL_STEP = 250; // how many pixels to scroll with every overflow arrow click
sap.uxap.AnchorBar.SCROLL_DURATION = 500; // ms
sap.uxap.AnchorBar.DOM_CALC_DELAY = 200;  //ms.

sap.uxap.AnchorBar.prototype.setSelectedButton = function (oButton) {

	if (typeof oButton === "string") {
		oButton = sap.ui.getCore().byId(oButton);
	}

	if (oButton) {

		if (this._bTabletScenario) {
			//remove selection class from the currently selected item
			this.$().find(".sapUxAPAnchorBarButtonSelected").removeClass("sapUxAPAnchorBarButtonSelected");
			oButton.$().addClass("sapUxAPAnchorBarButtonSelected");
		}

		if (oButton.data("sectionId")) {
			if (this._bTabletScenario) {
				this.scrollToSection(oButton.data("sectionId"), sap.uxap.AnchorBar.SCROLL_DURATION);
			}

			if (this._bPhoneScenario) {
				this._oPhoneAction.setSelectedKey(oButton.getId());
			}
		}
	}

	return this.setAssociation("selectedButton", oButton, true /* don't rerender */);
};

/*******************************************************************************
 * Responsive behavior
 ******************************************************************************/

sap.uxap.AnchorBar.prototype.setShowPopover = function (bValue, bSuppressInvalidate) {

	var sSelectedButton, bNeedInvalidate = !jQuery.isEmptyObject(this._oPressHandlers);

	//changing the behavior after the firstRendering is removing all press handlers on first level items
	if (bNeedInvalidate) {
		var aContent = this.getContent() || [];
		sSelectedButton = this.getSelectedButton();

		jQuery.each(aContent, jQuery.proxy(function (iIndex, oButton) {
			if (this._oPressHandlers[oButton.getId()]) {
				oButton.detachPress(this._oPressHandlers[oButton.getId()]);
				this._oPressHandlers[oButton.getId()] = null;
			}
		}, this));
	}

	this.setProperty("showPopover", bValue, true /* always trigger re-rendering manually */);

	if (bNeedInvalidate) {
		this.rerender();

		if (sSelectedButton) {
			this.setSelectedButton(sSelectedButton);
		}
	}

	return this;
};

/**
 * create phone equivalents for each of the provided content controls
 */
sap.uxap.AnchorBar.prototype.onBeforeRendering = function () {
	if (sap.m.Toolbar.prototype.onBeforeRendering) {
		sap.m.Toolbar.prototype.onBeforeRendering.call(this);
	}

	var aContent = this.getContent() || [],
		oLastFirstLevelButton = null,
		oCurrentPopover = null,
		oPhoneItem,
		fnPressHandler = null;

	if (this._bPhoneScenario) {
		this._oPhoneAction.removeAllItems();
	}

	//create responsive equivalents of the provided controls
	jQuery.each(aContent, jQuery.proxy(function (iIndex, oButton) {
		var bIsSecondLevel = oButton.data("secondLevel") === true || oButton.data("secondLevel") === "true";

		//create the phone equivalent item if the button has some visible text (UX rule)
		if (this._bPhoneScenario) {
			if (oButton.getText().trim() != "" && (!bIsSecondLevel || oButton.data("phoneVisibility") === true)) {
				oPhoneItem = new sap.ui.core.Item({
					key: oButton.getId(),
					text: oButton.getText(),
					customData: [
						new sap.ui.core.CustomData({
							key: "secondLevel",
							value: oButton.data("secondLevel")
						})
					]
				});

				this._oPhoneAction.addItem(oPhoneItem);
			}
		}

		//desktop scenario logic: builds the scrolling anchorBar
		if (this._bTabletScenario) {
			//handles the tablet/desktop hierarchical behavior
			//a second level is injected into the latest first level
			//at this point we know that there are children to the last firstLevel therefore we can create the popover
			if (bIsSecondLevel) {

				if (oLastFirstLevelButton && oCurrentPopover) {

					//don't attach the parent press handler for each child
					if (!this._oPressHandlers[oLastFirstLevelButton.getId()]) {

						fnPressHandler = jQuery.proxy(function (oEvent) {
								var aPopoverButtons = this.oCurrentPopover.getContent() || [];

								//open the popover only if we are in Tablet/Desktop scenario = the button is visible in the anchorBar
								if (this.oLastFirstLevelButton.$().is(":visible")) {

									//specific use case management: if there are only 1 button in the popover, then we don't display it and navigate directly (= the subsection is "promoted" it to a section level)
									//this is a specific behavior asked by UX as of Sep 25, 2014
									if (aPopoverButtons.length == 1) {
										aPopoverButtons[0].firePress({});
									}
									else {
										this.oCurrentPopover.openBy(this.oLastFirstLevelButton);
									}
								}
							}, /* closure with oLastFirstLevelButton and oCurrentPopover as context */
							{
								oCurrentPopover: oCurrentPopover,
								oLastFirstLevelButton: oLastFirstLevelButton
							}
						);


						oLastFirstLevelButton.attachPress(fnPressHandler);
						this._oPressHandlers[oLastFirstLevelButton.getId()] = fnPressHandler;
					}

					oCurrentPopover.addContent(oButton);
				}
				else if (this.getShowPopover()) {
					jQuery.sap.log.error("sapUxApAnchorBar :: missing parent first level for item " + oButton.getText());
				}
				else {
					this.removeContent(oButton);
				}
			}
			else {
				oLastFirstLevelButton = oButton;

				//default behavior: the first level show a popover containing second levels
				if (this.getShowPopover()) {
					oCurrentPopover = new sap.m.Popover({
						placement: sap.m.PlacementType.Bottom,
						showHeader: false,
						verticalScrolling: true,
						horizontalScrolling: false,
						contentWidth: "auto"
					});

					//UX design as of Sep 30, 2014
					//remove the arrow and reposition the whole popover
					oCurrentPopover.openBy = jQuery.proxy(function (oControl) {
						var iPlacePos = jQuery.inArray(sap.m.PlacementType.Bottom, this._placements);

						this._arrowOffset = 0;
						this._offsets[iPlacePos] = "0 0";

						sap.m.Popover.prototype.openBy.apply(this, arguments);
					}, oCurrentPopover);

					oCurrentPopover.addStyleClass("sapUxAPAnchorBarPopover");
					this._aPopovers.push(oCurrentPopover);
				}
				//alternative behavior: the first level triggers direct navigation
				else {

					if (!this._oPressHandlers[oLastFirstLevelButton.getId()]) {

						fnPressHandler = jQuery.proxy(function (oEvent) {
							if (this.getParent() instanceof sap.uxap.ObjectPageLayout) {
								this.getParent().scrollToSection(oEvent.getSource().data("sectionId"));
							}
						}, this);

						oLastFirstLevelButton.attachPress(fnPressHandler);

						this._oPressHandlers[oLastFirstLevelButton.getId()] = fnPressHandler;
					}
				}
			}
		}

	}, this));
};


sap.uxap.AnchorBar.prototype.addContent = function (oButton, bInvalidate) {
	oButton.addStyleClass("sapUxAPAnchorBarButton");

	if (this._bTabletScenario && (oButton.data("secondLevel") === true || oButton.data("secondLevel") === "true")) {

		//attach handler on the scrolling mechanism
		oButton.attachPress(function (oEvent) {
			if (oEvent.getSource().getParent() instanceof sap.m.Popover) {
				oEvent.getSource().getParent().close();
			}

			if (this.getParent() instanceof sap.uxap.ObjectPageLayout) {
				this.getParent().scrollToSection(oEvent.getSource().data("sectionId"));
			}
		}, this);
	}

	return this.addAggregation("content", oButton, bInvalidate);
};

/**
 * called on phone display only when a user selects a section to navigate to
 * simulate the press on the corresponding button
 * @param oEvent
 * @private
 */
sap.uxap.AnchorBar.prototype._onPhoneSelectChange = function (oEvent) {
	var oSelectedItem = oEvent.getParameter("selectedItem"), oOriginalControl;

	oOriginalControl = sap.ui.getCore().byId(oSelectedItem.getKey());

	if (oOriginalControl) {

		//forward press event
		if (oOriginalControl.firePress) {
			oOriginalControl.firePress({});
		}

		//in any case, call the scrolling mechanism
		if (this.getParent() instanceof sap.uxap.ObjectPageLayout) {
			this.getParent().scrollToSection(oOriginalControl.data("sectionId"));
		}
	}
	else {
		jQuery.sap.log.error("AnchorBar :: cannot find corresponding button", oSelectedItem.getKey());
	}
};


/*******************************************************************************
 * Horizontal scrolling
 ******************************************************************************/

sap.uxap.AnchorBar.prototype._adjustSize = function () {

	var $dom = this.$(),
		bNeedScrollingBegin,
		bNeedScrollingEnd,
		iContainerWidth;

	//don't go any further if the phone control is displayed = we never need scrolling
	if (this._$phone.length > 0 && this._$phone.is(":visible")) {
		return;
	}

	//don't go any further if the positions of the items are not calculated yet
	if (this._iMaxPosition < 0) {
		return;
	}

	iContainerWidth = this.$().parent().width();

	//do we need to scroll left or right
	if (this._bRtlScenario) {

		if (sap.ui.Device.browser.firefox) {
			bNeedScrollingEnd = Math.abs(this._oScroller.getScrollLeft()) + iContainerWidth < this._iMaxPosition;
			bNeedScrollingBegin = Math.abs(this._oScroller.getScrollLeft()) >= this._iTolerance;
		}
		else {
			bNeedScrollingEnd = Math.abs(this._oScroller.getScrollLeft()) >= this._iTolerance;
			bNeedScrollingBegin = Math.abs(this._oScroller.getScrollLeft()) + iContainerWidth < this._iMaxPosition;
		}
	}
	else {
		bNeedScrollingEnd = this._oScroller.getScrollLeft() + iContainerWidth < this._iMaxPosition;
		bNeedScrollingBegin = this._oScroller.getScrollLeft() >= this._iTolerance;
	}

	jQuery.sap.log.debug("AnchorBar :: scrolled at " + this._oScroller.getScrollLeft(), "scrollBegin [" + (bNeedScrollingBegin ? "true" : "false") + "] scrollEnd [" + (bNeedScrollingEnd ? "true" : "false") + "]");

	$dom.toggleClass("sapUxAPAnchorBarScrollLeft", bNeedScrollingBegin);
	$dom.toggleClass("sapUxAPAnchorBarScrollRight", bNeedScrollingEnd);
};

/**
 * Handles touch end and events and trigger selection if bar was not dragged.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.uxap.AnchorBar.prototype.ontap = function (oEvent) {
	var sTargetId = oEvent.target.id,
		sId = this.getId(),
		bScrollLeft = (sTargetId == sId + "-arrowScrollLeft"),
		bScrollRight = (sTargetId == sId + "-arrowScrollRight"),
		iScrollDirection;

	//we have tap on a navigation arrow
	if (bScrollLeft || bScrollRight) {
		oEvent.preventDefault();

		//calculate the direction where to scroll
		//increase if:
		// - lft and right arrow was pressed
		// - rtl and the left arrow was pressed
		//decrease if:
		// - lft and the left arrow was pressed
		// - rtl and the right arrow was pressed
		if ( (!this._bRtlScenario && bScrollLeft) || (this._bRtlScenario && bScrollRight) ) {
			iScrollDirection = -1;
		}
		else {
			iScrollDirection = 1;
		}

		this._oScroller.scrollTo(this._oScroller.getScrollLeft() + sap.uxap.AnchorBar.SCROLL_STEP * iScrollDirection, 0, sap.uxap.AnchorBar.SCROLL_DURATION);
	}
	/*
	 else {
	 do nothing we didn't press or select a navigation arrow
	 }*/
};

/**
 * Scroll to a specific Section
 *
 * @param sId       id of the section to scroll to
 * @param duration  Scroll duration. Default value is 0
 *
 */
sap.uxap.AnchorBar.prototype.scrollToSection = function (sId, duration) {

	if (this._bTabletScenario) {
		var iDuration = duration || sap.uxap.AnchorBar.SCROLL_DURATION,
			iScrollTo;

		if ((this._$phone.length == 0 || !this._$phone.is(":visible")) && this._oSectionInfo[sId]) {

			//scroll to the positionRtl minus the tolerance (so the navigation arrow never hide the content)
			iScrollTo = this._oSectionInfo[sId].scrollLeft - this._iTolerance;

			jQuery.sap.log.debug("AnchorBar :: scrolling to section " + sId + " of " + iScrollTo);

			//avoid triggering twice the scrolling onto the same target section
			if (this._sCurrentScrollId != sId) {
				this._sCurrentScrollId = sId;

				if (this._iCurrentScrollTimeout) {
					jQuery.sap.clearDelayedCall(this._iCurrentScrollTimeout);
					jQuery.sap.byId(this.getId() + "-scroll").parent().stop(true, false);
				}

				this._iCurrentScrollTimeout = jQuery.sap.delayedCall(duration, this, function () {
					this._sCurrentScrollId = undefined;
					this._iCurrentScrollTimeout = undefined;
				});

				this._oScroller.scrollTo(iScrollTo, 0, iDuration);
			}
		}
		else {
			jQuery.sap.log.debug("AnchorBar :: no need to scroll to " + sId);
		}
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 */
sap.uxap.AnchorBar.prototype.getScrollDelegate = function () {
	return this._oScroller;
};

/*******************************************************************************
 * Keyboard navigation
 ******************************************************************************/

/**
 * called for figuring out responsive scenarios
 */

sap.uxap.AnchorBar.prototype.onAfterRendering = function () {
	if (sap.m.Toolbar.prototype.onAfterRendering) {
		sap.m.Toolbar.prototype.onAfterRendering.call(this);
	}

	if (this._bPhoneScenario) {
		//store reference on control doms for perf reasons
		this._$phone = this._oPhoneAction.$();
	}

	//save max for arrow show/hide management, the max position is the required scroll for the the item to be fully visible
	this._iMaxPosition = -1;

	//show/hide scrolling arrows
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._adjustSize, this));

	this.$().find(".sapUxAPAnchorBarScrollContainer").scroll(jQuery.proxy(function () {
		if (!this._iCurrentSizeCheckTimeout) {
			this._iCurrentSizeCheckTimeout = jQuery.sap.delayedCall(sap.uxap.AnchorBar.SCROLL_DURATION, this, function () {
				this._iCurrentSizeCheckTimeout = undefined;
				this._adjustSize();
			});
		}

	}, this));

	//initial state
	if (this._bTabletScenario) {

		jQuery.sap.delayedCall(sap.uxap.AnchorBar.DOM_CALC_DELAY, this, function () {

			var aContent = this.getContent() || [];

			//reset the max position
			this._iMaxPosition = 0;

			jQuery.each(aContent, jQuery.proxy(function (iIndex, oContent) {


				var iWidth = oContent.$().outerWidth(true);

				//store info on the various sections for horizontalScrolling
				//scrollLeft is the amount of scroll required for reaching that item in normal mode
				this._oSectionInfo[oContent.data("sectionId")] = {
					scrollLeft: this._iMaxPosition,
					width: iWidth
				};

				this._iMaxPosition += iWidth;

			}, this));


			//post processing based on how browsers implement rtl
			if (this._bRtlScenario) {

				//chrome, safari
				if (sap.ui.Device.browser.webkit) {

					//reverse all positions as the scroll 0 is at the far end (first item = maxPosition, last item = 0)
					jQuery.each(aContent, jQuery.proxy(function (iIndex, oContent) {
						var oSectionInfo = this._oSectionInfo[oContent.data("sectionId")];

						oSectionInfo.scrollLeft = this._iMaxPosition - oSectionInfo.scrollLeft - oSectionInfo.width;
					}, this));

					this._oScroller.scrollTo(this._iMaxPosition, 0, 0);
				}
				//firefox not working yet see internal incident 1570001701
			}

			this._adjustSize();
		});
	}

	//restore state from previous rendering
	if (this.getSelectedButton()) {
		this.setSelectedButton(this.getSelectedButton());
	}
};

/**
 * clean created controls and deregister handlers
 */
sap.uxap.AnchorBar.prototype.exit = function () {

	if (this._oPhoneAction) {
		this._oPhoneAction.destroy();
		this._oPhoneAction = null;
	}

	if (this._oArrowLeft) {
		this._oArrowLeft.destroy();
		this._oArrowLeft = null;
	}

	if (this._oArrowRight) {
		this._oArrowRight.destroy();
		this._oArrowRight = null;
	}

	if (this._aPopovers) {
		jQuery.each(this._aPopovers, function (iIndex, oActionSheet) {
			oActionSheet.destroy();
			oActionSheet = null;
		});
	}

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	if (this._oScroller) {
		this._oScroller.destroy();
		this._oScroller = null;
	}
};


}; // end of sap/uxap/AnchorBar.js
if ( !jQuery.sap.isDeclared('sap.uxap.BlockBase') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.BlockBase.
jQuery.sap.declare("sap.uxap.BlockBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new BlockBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumnLayout columnLayout} : sap.uxap.BlockBaseColumnLayout (default: 'auto')</li>
 * <li>{@link #getShowSubSectionMore showSubSectionMore} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMode mode} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMappings mappings} : sap.uxap.ModelMapping[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedView selectedView} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * A block is the main element that will be displayed, mainly in an object page, but not necessarily
 * only there.
 * 
 * A block is a control that use a view for storing its internal control tree.
 * A block is a control that has modes and a view associated to each modes.
 * At rendering time, the view associated to the mode is rendered.
 * 
 * As any UI5 views, the view can have a controller which automatically comes a this.oParentBlock attribute (so that the controller can interacts with the block).
 * If the controller implements the onParentBlockModeChange method, this method will get called with the sMode parameter when the view is used or re-used by the block.
 * 
 * For the actual properties of this control please see the .js file as we are defining a custom Metadata
 * to be used for this control.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.BlockBase
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uxap.BlockBase", { metadata : {

	publicMethods : [
		// methods
		"getSupportedModes"
	],
	library : "sap.uxap",
	properties : {
		"columnLayout" : {type : "sap.uxap.BlockBaseColumnLayout", group : "Behavior", defaultValue : 'auto'},
		"showSubSectionMore" : {type : "boolean", group : "Behavior", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"mode" : {type : "string", group : "", defaultValue : null}
	},
	aggregations : {
		"mappings" : {type : "sap.uxap.ModelMapping", multiple : true, singularName : "mapping"}
	},
	associations : {
		"selectedView" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.BlockBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.BlockBase.extend
 * @function
 */


/**
 * Getter for property <code>columnLayout</code>.
 * Defines how many columns should it be assigned by the objectPageSubSection
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.uxap.BlockBaseColumnLayout} the value of property <code>columnLayout</code>
 * @public
 * @name sap.uxap.BlockBase#getColumnLayout
 * @function
 */

/**
 * Setter for property <code>columnLayout</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.uxap.BlockBaseColumnLayout} sColumnLayout  new value for property <code>columnLayout</code>
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#setColumnLayout
 * @function
 */


/**
 * Getter for property <code>showSubSectionMore</code>.
 * Ask the parent sap.uxap.ObjectPageSubSection to show its "see more" button.
 * If at least one block within the ObjectPageSubSection is of type BlockBase and ask for the "see more" button then it would be displayed. Otherwise it's always hidden.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showSubSectionMore</code>
 * @public
 * @name sap.uxap.BlockBase#getShowSubSectionMore
 * @function
 */

/**
 * Setter for property <code>showSubSectionMore</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowSubSectionMore  new value for property <code>showSubSectionMore</code>
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#setShowSubSectionMore
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible blocks are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.uxap.BlockBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#setVisible
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * The mode to use for rendering the block.
 * The mode can be anything as long as the block developer is providing a corresponding view for it.
 * 
 * When running inside of an ObjectPageLayout, the Block is expected to provide a view for the "Collapsed" and "Expanded" modes (which can be the same).
 * views: {
 * 
 * define your views here following the pattern:
 * "yourModeName": {viewName: "your.view.path" , type: "yourUI5ViewType" }
 * 
 * for example:
 * "OneLine": {
 * viewName: "MyBlock.OneLine",
 * type: "XML"
 * },
 * "TwoLine": {
 * viewName: "MyBlock.ViewNameAndModeCanBeDifferent",
 * type: "XML"
 * }
 * 
 * if no views are provided, the blockBase looks for an xml view which name is equal to the block's one in this case MyBlock.view.xml
 * 
 * }
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>mode</code>
 * @public
 * @name sap.uxap.BlockBase#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMode  new value for property <code>mode</code>
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#setMode
 * @function
 */


/**
 * Getter for aggregation <code>mappings</code>.<br/>
 * the model mappings to use at runtime: provide a mapping between the runtime model bindings and the block design time model bindings
 * 
 * @return {sap.uxap.ModelMapping[]}
 * @public
 * @name sap.uxap.BlockBase#getMappings
 * @function
 */


/**
 * Inserts a mapping into the aggregation named <code>mappings</code>.
 *
 * @param {sap.uxap.ModelMapping}
 *          oMapping the mapping to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the mapping should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the mapping is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the mapping is inserted at 
 *             the last position        
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#insertMapping
 * @function
 */

/**
 * Adds some mapping <code>oMapping</code> 
 * to the aggregation named <code>mappings</code>.
 *
 * @param {sap.uxap.ModelMapping}
 *            oMapping the mapping to add; if empty, nothing is inserted
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#addMapping
 * @function
 */

/**
 * Removes an mapping from the aggregation named <code>mappings</code>.
 *
 * @param {int | string | sap.uxap.ModelMapping} vMapping the mapping to remove or its index or id
 * @return {sap.uxap.ModelMapping} the removed mapping or null
 * @public
 * @name sap.uxap.BlockBase#removeMapping
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>mappings</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.uxap.ModelMapping[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.BlockBase#removeAllMappings
 * @function
 */

/**
 * Checks for the provided <code>sap.uxap.ModelMapping</code> in the aggregation named <code>mappings</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.uxap.ModelMapping}
 *            oMapping the mapping whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.BlockBase#indexOfMapping
 * @function
 */
	

/**
 * Destroys all the mappings in the aggregation 
 * named <code>mappings</code>.
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#destroyMappings
 * @function
 */


/**
 * The view that is currently being used for rendering the control.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedView</code> association, or null
 * @public
 * @name sap.uxap.BlockBase#getSelectedView
 * @function
 */

/**
 * The view that is currently being used for rendering the control.
 *
 * @param {string | sap.ui.core.Control} vSelectedView 
 *    Id of an element which becomes the new target of this <code>selectedView</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.uxap.BlockBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.BlockBase#setSelectedView
 * @function
 */


	
/**
 * Returns an object containing the supported modes for the block.
 *
 * @name sap.uxap.BlockBase#getSupportedModes
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uxap/BlockBase.js
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained




sap.ui.core.Control.extend("sap.uxap.BlockBase", {
	metadata: {

		// ---- object ----

		// ---- control specific ----
		library: "sap.uxap",
		publicMethods: ["getSupportedModes"],
		properties: {
			"mode": {type: "string", group: "Appearance"},
			"visible": {type: "boolean", group: "Appearance", defaultValue: true},
			"columnLayout": {type: "sap.uxap.BlockBaseColumnLayout", group: "Behavior", defaultValue: "auto"},
			"showSubSectionMore": {type: "boolean", group: "Behavior", defaultValue: false}
		},
		defaultAggregation: "mappings",
		aggregations: {
			"_views": {type: "sap.ui.core.Control", multiple: true, singularName: "view", visibility: "hidden"},
			"mappings": {type: "sap.uxap.ModelMapping", multiple: true, singularName: "mapping"}
		},
		associations: {
			"selectedView": {type: "sap.ui.core.Control", multiple: false}
		},
		views: {
			/*
			 define your views here following the pattern:
			 "yourModeName": {viewName: "your.view.path" , type: "yourUI5ViewType" }

			 for example:
			 "Collapsed": {
			 viewName: "sap.uxap.testblocks.multiview.MultiViewBlockCollapsed",
			 type: "XML"
			 },
			 "Expanded": {
			 viewName: "sap.uxap.testblocks.multiview.MultiViewBlockExpanded",
			 type: "XML"
			 }

			 if no views are provided, the blockBase looks for an xml view which name is equal to the block's one
			 */
		}
	},
	renderer: "sap.uxap.BlockBaseRenderer"
}, sap.uxap.BlockBaseMetadata);

sap.uxap.BlockBase.prototype.init = function () {

	//convenience mechanism:
	//if there are no views defined by the Block,
	// we look for the default one which would have the same name as the block and type XML
	if (!this.getMetadata().hasViews()) {
		this.getMetadata().setView("defaultXML", {viewName: this.getMetadata().getName(), type: "XML"});
	}

	//for performance optimization
	this._oMappingApplied = {};

	//lazy loading
	this._bLazyLoading = false; //by default, no lazy loading so we can use it out of an objectPageLayout
	this._bConnected = false;   //indicates connectToModels function has been called
	this._oUpdatedModels = {};

	//store the parent objectPageLayout if used within an objectPageLayout
	//this is needed to reflect the state of this block (visible) and benefit from lazy loading features
	this._oParentObjectPageLayout = undefined;
	this._oParentObjectPageSubSection = undefined;
};

/**
 * set the parent control for the current block
 * every time the parent changes, we try to find the parent objectPageLayout in order to determine the lazy loading strategy to apply
 * @param oParent
 * @param sAggregationName
 * @param bSuppressInvalidate
 */
sap.uxap.BlockBase.prototype.setParent = function (oParent, sAggregationName, bSuppressInvalidate) {

	sap.ui.core.Control.prototype.setParent.call(this, oParent, sAggregationName, bSuppressInvalidate);

	if (oParent instanceof sap.uxap.ObjectPageSubSection) {
		this._bLazyLoading = true; //we activate the block lazy loading since we are within an objectPageLayout
		this._oParentObjectPageSubSection = oParent;
	}
};

/*********************************************
 * model mapping management
 * *******************************************/


/**
 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
 * @protected
 * @name sap.ui.base.ManagedObject#invalidate
 * @function
 */
sap.uxap.BlockBase.prototype.invalidate = function (oOrigin) {
	this._applyMapping();
	sap.ui.core.Control.prototype.invalidate.call(this, oOrigin);
};

/**
 * intercept direct setModel calls
 * @param oModel
 * @param sName
 * @returns {sap.ui.base.ManagedObject}
 */
sap.uxap.BlockBase.prototype.setModel = function (oModel, sName) {
	this._applyMapping(sName);
	return sap.ui.core.Control.prototype.setModel.call(this, oModel, sName);
};

/**
 * called for applying the modelmapping once all properties are set
 * @private
 */
sap.uxap.BlockBase.prototype._applyMapping = function () {

	if (this._bLazyLoading && !this._bConnected) {
		jQuery.sap.log.debug("BlockBase ::: Ignoring the _applyMapping as the block is not connected");
	}
	else {
		var that = this;

		jQuery.each(this.getMappings(), function (iIndex, oMapping) {
			var oModel,
				sInternalModelName = oMapping.getInternalModelName(),
				sExternalPath = oMapping.getExternalPath(),
				sExternalModelName = oMapping.getExternalModelName(),
				sPath;

			if (sExternalPath) {
				if (sInternalModelName == "" || sExternalPath == "") {
					throw new Error("BlockBase :: incorrect mapping, one of the modelMapping property is empty");
				}

				//only set this model if it is not set already
				if (!that.getModel(sInternalModelName) && !that._oMappingApplied[sInternalModelName]) {

					jQuery.sap.log.info("BlockBase :: mapping external model " + sExternalModelName + " to " + sInternalModelName);

					oModel = that.getModel(sExternalModelName);

					if (oModel) {
						sPath = oModel.resolve(sExternalPath, that.getBindingContext(sExternalModelName));

						that._oMappingApplied[sInternalModelName] = true;
						that.setBindingContext(new sap.ui.model.Context(oModel, sPath), sInternalModelName);
						sap.ui.core.Control.prototype.setModel.call(that, oModel, sInternalModelName);
					}
				}
			}
		});
	}

};

/**
 * intercept propagated properties
 * @param vName
 * @returns {*}
 */
sap.uxap.BlockBase.prototype.propagateProperties = function (vName) {

	if (this._bLazyLoading && !this._bConnected && !this._oUpdatedModels.hasOwnProperty(vName)) {
		this._oUpdatedModels[vName] = true;
	}
	else {
		this._applyMapping(vName);
	}
	return sap.ui.core.Control.prototype.propagateProperties.call(this, vName);
};

/*********************************************
 * mode vs views management
 * *******************************************/


/**
 * Returns an object containing the supported modes for the block.
 * @returns {sap.ui.core/object}
 */
sap.uxap.BlockBase.prototype.getSupportedModes = function () {
	var oSupportedModes = jQuery.extend({}, this.getMetadata().getViews());
	for (var key in oSupportedModes) {
		oSupportedModes[key] = key; //this is what developers expect, for ex: {Collapsed:"Collapsed"}
	}
	return oSupportedModes;
};

/**
 * Set the view mode for this particular block
 * @param sMode {string} the mode to apply to the control (that should be synchronized with view declared)
 * @public
 */
sap.uxap.BlockBase.prototype.setMode = function (sMode) {
	sMode = this._validateMode(sMode);

	if (this.getMode() !== sMode) {
		this.setProperty("mode", sMode, false);
		//if Lazy loading is enabled, and if the block is not connected
		//delay the view creation (will be done in connectToModels function)
		if (!this._bLazyLoading || this._bConnected) {
			this._initView(sMode);
		}
	}

	return this;
};

/**
 * called after the control is rendered
 */
sap.uxap.BlockBase.prototype.onBeforeRendering = function () {
	if (!this.getMode() || this.getMode() === "") {
		if (this.getMetadata().getView("defaultXML")) {
			this.setMode("defaultXML");
		}
		else {
			jQuery.sap.log.error("BlockBase ::: there is no mode defined for rendering " + this.getMetadata().getName() +
			". You can either set a default mode on the block metadata or set the mode property before rendering the block.");
		}
	}

	if (!this._getObjectPageLayout()) {
		this._findObjectPageLayout();
	}

	if (this._getObjectPageLayout()) {
		this._bLazyLoading = this._getObjectPageLayout().getEnableLazyLoading();
	}
	else {
		this._bLazyLoading = false;
	}
};


/**
 * called after the control is rendered
 */
sap.uxap.BlockBase.prototype.onAfterRendering = function () {
	if (this._getObjectPageLayout()) {
		this._getObjectPageLayout()._adjustLayout();
	}
};

/**
 * provide a clone mechanism: the selectedView needs to point to one of the _views
 * @returns {sap.ui.core.Element}
 */
sap.uxap.BlockBase.prototype.clone = function () {

	var iAssocIndex = -1,
		sAssoc = this.getAssociation("selectedView"),
		aViews = this.getAggregation("_views") || [];

	//find the n-view associated
	if (sAssoc) {
		jQuery.each(aViews, function (iIndex, oView) {

			if (oView.getId() === sAssoc) {
				iAssocIndex = iIndex;
			}

			return iAssocIndex < 0;
		});
	}

	var oNewThis = sap.ui.core.Control.prototype.clone.call(this);
	//we need to maintain the association onto the new object
	if (iAssocIndex >= 0) {
		oNewThis.setAssociation("selectedView", oNewThis.getAggregation("_views")[iAssocIndex]);
	}
	return oNewThis;
};

/**
 * validate that the provided mode has been declared in the metadata views section
 * throw an exception otherwise
 * @param sMode
 * @private
 */
sap.uxap.BlockBase.prototype._validateMode = function (sMode) {

	this.validateProperty("mode", sMode); //type expected as per properties definition

	if (!this.getMetadata().getView(sMode)) {
		var sBlockName = this.getMetadata()._sClassName || this.getId();

		//the view wasn't defined.
		//as a fallback mechanism: we look for the defaultXML one and raise an error before raising an exception
		if (this.getMetadata().getView("defaultXML")) {
			jQuery.sap.log.warning("BlockBase :: no view defined for block " + sBlockName + " for mode " + sMode + ", loading defaultXML instead");
			sMode = "defaultXML";
		}
		else {
			throw new Error("BlockBase :: no view defined for block " + sBlockName + " for mode " + sMode);
		}
	}
	return sMode;
};

/**
 * get the view associated with the selectedView
 * @returns {null}
 * @private
 */
sap.uxap.BlockBase.prototype._getSelectedViewContent = function () {
	var oView = null, sSelectedViewId, aViews;

	sSelectedViewId = this.getAssociation("selectedView");
	aViews = this.getAggregation("_views");

	if (aViews) {
		for (var i = 0; !oView && i < aViews.length; i++) {
			if (aViews[i].getId() === sSelectedViewId) {
				oView = aViews[i];
			}
		}
	}

	return oView;
};

/***
 * Create view
 * @param mParameter
 * @returns {sap.ui.core.mvc.View}
 * @protected
 */
sap.uxap.BlockBase.prototype.createView = function (mParameter) {
	return sap.ui.xmlview(mParameter);
};

/**
 * initialize a view and returns it if it has not been defined already
 * @param sMode the valid mode corresponding to the view to initialize
 * @returns {sap.ui.view}
 * @private
 */
sap.uxap.BlockBase.prototype._initView = function (sMode) {
	var oView, mParameter, aViews;

	mParameter = this.getMetadata().getView(sMode);

	//look for the views if it was already instantiated
	aViews = this.getAggregation("_views") || [];

	for (var i = 0; !oView && i < aViews.length; i++) {
		if (aViews[i].data("layoutMode") === sMode) {
			oView = aViews[i];
		}
	}

	//the view is not instantiated yet, handle a new view scenario
	if (!oView) {

		oView = this._getSelectedViewContent();

		//check if the new view is not the current one (we may want to have the same view for several modes)
		if (!oView || mParameter.viewName != oView.getViewName()) {
			oView = this.createView(mParameter);

			//link to the controller defined in the Block
			if (oView) {

				//inject a reference to this
				if (oView.getController()) {
					oView.getController().oParentBlock = this;
				}

				oView.addCustomData(new sap.ui.core.CustomData({
					"key": "layoutMode",
					"value": sMode
				}));

				this.addAggregation("_views", oView, true);
			}
			else {
				throw new Error("BlockBase :: no view defined in metadata.views for mode " + sMode);
			}
		}
	}

	this.setAssociation("selectedView", oView, true);

	//try to notify the associated controller that the view is being used for this mode
	if (oView.getController() && oView.getController().onParentBlockModeChange) {
		oView.getController().onParentBlockModeChange(sMode);
	}
	else {
		jQuery.sap.log.info("BlockBase ::: could not notify " + mParameter.viewName + " of loading in mode " + sMode + ": missing controller onParentBlockModeChange method");
	}

	return oView;
};

/*************************************************************************************
 * objectPageLayout integration & lazy loading management
 ************************************************************************************/

/**
 * find the parent sap.uxap.ObjectPageLayout in the control tree
 * @private
 */
sap.uxap.BlockBase.prototype._findObjectPageLayout = function () {

	//if we are not even within an subSection we don't need to look for the objectPageLayout
	if (this._oParentObjectPageSubSection) {
		this._oParentObjectPageLayout = this._oParentObjectPageSubSection.getParent();

		while (this._oParentObjectPageLayout && !(this._oParentObjectPageLayout instanceof sap.uxap.ObjectPageLayout)) {
			this._oParentObjectPageLayout = this._oParentObjectPageLayout.getParent();
		}
	}
};

/**
 * getter for the parent object page layout
 * @returns {*}
 * @private
 */
sap.uxap.BlockBase.prototype._getObjectPageLayout = function () {
	return this._oParentObjectPageLayout;
};

sap.uxap.BlockBase.prototype.setVisible = function (bValue, bSuppressInvalidate) {


	if (this._getObjectPageLayout()) {
		this.setProperty("visible", bValue, true) /* handle invalidation ourselves */;
		this._getObjectPageLayout()._adjustLayoutAndUxRules();
		this.invalidate();
	}
	else {
		this.setProperty("visible", bValue, bSuppressInvalidate);
	}


	return this;
};

/**
 * set the showSubSectionMore property
 * ask the parent ObjectPageSubSection to refresh its see more visibility state if present
 * @param bValue
 * @param bInvalidate
 * @returns {*}
 */
sap.uxap.BlockBase.prototype.setShowSubSectionMore = function (bValue, bInvalidate) {

	//suppress invalidate as ShowSubSectionMore has no impact on block itself.
	if (bValue != this.getShowSubSectionMore()) {
		this.setProperty("showSubSectionMore", bValue, true);

		//refresh the parent subsection see more visibility if we have changed it and we are within an objectPageSubSection
		if (this._oParentObjectPageSubSection) {
			this._oParentObjectPageSubSection.refreshSeeMoreVisibility();
		}
	}

	return this;
};

sap.uxap.BlockBase.prototype.connectToModels = function () {
	if (!this._bConnected) {
		jQuery.sap.log.debug("BlockBase :: Connecting block to the UI5 model tree");
		this._bConnected = true;
		if (this._bLazyLoading) {
			//if lazy loading is enabled, the view has not been created during the setMode
			//so create it now
			var sMode = this.getMode();
			if (sMode) {
				this._initView(sMode);
			}
		}

		this.invalidate();
	}
};

/**
 * Override of the default model lifecycle method to disable the automatic binding resolution for lazyloading
 * @override
 * @param bSkipLocal
 * @param bSkipChildren
 * @param sModelName
 * @param bUpdateAll
 * @returns {*}
 */
sap.uxap.BlockBase.prototype.updateBindingContext = function (bSkipLocal, bSkipChildren, sModelName, bUpdateAll) {
	if (!this._bLazyLoading || this._bConnected) {
		return sap.ui.core.Control.prototype.updateBindingContext.call(this, bSkipLocal, bSkipChildren, sModelName, bUpdateAll);
	} else {
		jQuery.sap.log.debug("BlockBase ::: Ignoring the updateBindingContext as the block is not visible for now in the ObjectPageLayout");
	}
};

/**
 * Override of the default model lifecycle method to disable the automatic binding resolution for lazyloading
 * @override
 * @param bUpdateAll
 * @param sModelName
 * @returns {*}
 */
sap.uxap.BlockBase.prototype.updateBindings = function (bUpdateAll, sModelName) {
	if (!this._bLazyLoading || this._bConnected) {
		return sap.ui.core.Control.prototype.updateBindings.call(this, bUpdateAll, sModelName);
	}
	else {
		jQuery.sap.log.debug("BlockBase ::: Ignoring the updateBindingContext as the block is not visible for now in the ObjectPageLayout");
	}
};

}; // end of sap/uxap/BlockBase.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageLayout') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageLayout.
jQuery.sap.declare("sap.uxap.ObjectPageLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ObjectPageLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowAnchorBar showAnchorBar} : boolean (default: true)</li>
 * <li>{@link #getShowAnchorBarPopover showAnchorBarPopover} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnableLazyLoading enableLazyLoading} : boolean (default: false)</li>
 * <li>{@link #getSubSectionLayout subSectionLayout} : sap.uxap.ObjectPageSubSectionLayout (default: sap.uxap.ObjectPageSubSectionLayout.TitleOnTop)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSections sections} <strong>(default aggregation)</strong> : sap.uxap.ObjectPageSection[]</li>
 * <li>{@link #getHeaderTitle headerTitle} : sap.uxap.ObjectPageHeader</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.uxap.ObjectPageLayout#event:toggleAnchorBar toggleAnchorBar} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An ObjectPageLayout is a generic view to display blocks of information.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ObjectPageLayout
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.uxap.ObjectPageLayout", { metadata : {

	publicMethods : [
		// methods
		"scrollToSection", "getScrollDelegate", "getScrollingSectionId"
	],
	library : "sap.uxap",
	properties : {
		"showAnchorBar" : {type : "boolean", group : "", defaultValue : true},
		"showAnchorBarPopover" : {type : "boolean", group : "", defaultValue : true},
		"height" : {type : "sap.ui.core.CSSSize", group : "", defaultValue : '100%'},
		"enableLazyLoading" : {type : "boolean", group : "", defaultValue : false},
		"subSectionLayout" : {type : "sap.uxap.ObjectPageSubSectionLayout", group : "", defaultValue : sap.uxap.ObjectPageSubSectionLayout.TitleOnTop}
	},
	defaultAggregation : "sections",
	aggregations : {
		"sections" : {type : "sap.uxap.ObjectPageSection", multiple : true, singularName : "section"}, 
		"headerTitle" : {type : "sap.uxap.ObjectPageHeader", multiple : false}, 
		"headerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerContent"}, 
		"_anchorBar" : {type : "sap.uxap.AnchorBar", multiple : false, visibility : "hidden"}
	},
	events : {
		"toggleAnchorBar" : {}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageLayout.extend
 * @function
 */

sap.uxap.ObjectPageLayout.M_EVENTS = {'toggleAnchorBar':'toggleAnchorBar'};


/**
 * Getter for property <code>showAnchorBar</code>.
 * Show or not the anchor bar
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showAnchorBar</code>
 * @public
 * @name sap.uxap.ObjectPageLayout#getShowAnchorBar
 * @function
 */

/**
 * Setter for property <code>showAnchorBar</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowAnchorBar  new value for property <code>showAnchorBar</code>
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#setShowAnchorBar
 * @function
 */


/**
 * Getter for property <code>showAnchorBarPopover</code>.
 * Show or not the anchor bar popover when clicking on section links
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showAnchorBarPopover</code>
 * @public
 * @name sap.uxap.ObjectPageLayout#getShowAnchorBarPopover
 * @function
 */

/**
 * Setter for property <code>showAnchorBarPopover</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowAnchorBarPopover  new value for property <code>showAnchorBarPopover</code>
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#setShowAnchorBarPopover
 * @function
 */


/**
 * Getter for property <code>height</code>.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.uxap.ObjectPageLayout#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#setHeight
 * @function
 */


/**
 * Getter for property <code>enableLazyLoading</code>.
 * Enable the lazy loading based on the position in the current window
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableLazyLoading</code>
 * @public
 * @name sap.uxap.ObjectPageLayout#getEnableLazyLoading
 * @function
 */

/**
 * Setter for property <code>enableLazyLoading</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableLazyLoading  new value for property <code>enableLazyLoading</code>
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#setEnableLazyLoading
 * @function
 */


/**
 * Getter for property <code>subSectionLayout</code>.
 * Display the titles on the left or on top of the subSection contents.
 *
 * Default value is <code>TitleOnTop</code>
 *
 * @return {sap.uxap.ObjectPageSubSectionLayout} the value of property <code>subSectionLayout</code>
 * @public
 * @name sap.uxap.ObjectPageLayout#getSubSectionLayout
 * @function
 */

/**
 * Setter for property <code>subSectionLayout</code>.
 *
 * Default value is <code>TitleOnTop</code> 
 *
 * @param {sap.uxap.ObjectPageSubSectionLayout} oSubSectionLayout  new value for property <code>subSectionLayout</code>
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#setSubSectionLayout
 * @function
 */


/**
 * Getter for aggregation <code>sections</code>.<br/>
 * The various sections or subSections contained within the Object Page.
 * 
 * <strong>Note</strong>: this is the default aggregation for ObjectPageLayout.
 * @return {sap.uxap.ObjectPageSection[]}
 * @public
 * @name sap.uxap.ObjectPageLayout#getSections
 * @function
 */


/**
 * Inserts a section into the aggregation named <code>sections</code>.
 *
 * @param {sap.uxap.ObjectPageSection}
 *          oSection the section to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the section should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the section is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the section is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#insertSection
 * @function
 */

/**
 * Adds some section <code>oSection</code> 
 * to the aggregation named <code>sections</code>.
 *
 * @param {sap.uxap.ObjectPageSection}
 *            oSection the section to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#addSection
 * @function
 */

/**
 * Removes an section from the aggregation named <code>sections</code>.
 *
 * @param {int | string | sap.uxap.ObjectPageSection} vSection the section to remove or its index or id
 * @return {sap.uxap.ObjectPageSection} the removed section or null
 * @public
 * @name sap.uxap.ObjectPageLayout#removeSection
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>sections</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.uxap.ObjectPageSection[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageLayout#removeAllSections
 * @function
 */

/**
 * Checks for the provided <code>sap.uxap.ObjectPageSection</code> in the aggregation named <code>sections</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.uxap.ObjectPageSection}
 *            oSection the section whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageLayout#indexOfSection
 * @function
 */
	

/**
 * Destroys all the sections in the aggregation 
 * named <code>sections</code>.
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#destroySections
 * @function
 */


/**
 * Getter for aggregation <code>headerTitle</code>.<br/>
 * Object Page header (ObjectHeader).
 * 
 * @return {sap.uxap.ObjectPageHeader}
 * @public
 * @name sap.uxap.ObjectPageLayout#getHeaderTitle
 * @function
 */


/**
 * Setter for the aggregated <code>headerTitle</code>.
 * @param {sap.uxap.ObjectPageHeader} oHeaderTitle
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#setHeaderTitle
 * @function
 */
	

/**
 * Destroys the headerTitle in the aggregation 
 * named <code>headerTitle</code>.
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#destroyHeaderTitle
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * Object Page header content (What's up / KPI List).
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.uxap.ObjectPageLayout#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * @name sap.uxap.ObjectPageLayout#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageLayout#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageLayout#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#destroyHeaderContent
 * @function
 */


/**
 * Event is fired when the anchorBar is switch from moving to fixed.
 *
 * @name sap.uxap.ObjectPageLayout#toggleAnchorBar
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.fixed This flag indicates whether the anchorBar is switched to fixed or not (if false it is switched to moving).
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toggleAnchorBar' event of this <code>sap.uxap.ObjectPageLayout</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.uxap.ObjectPageLayout</code>.<br/> itself. 
 *  
 * Event is fired when the anchorBar is switch from moving to fixed.
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.uxap.ObjectPageLayout</code>.<br/> itself.
 *
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#attachToggleAnchorBar
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toggleAnchorBar' event of this <code>sap.uxap.ObjectPageLayout</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageLayout#detachToggleAnchorBar
 * @function
 */

/**
 * Fire event toggleAnchorBar to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'fixed' of type <code>boolean</code> This flag indicates whether the anchorBar is switched to fixed or not (if false it is switched to moving).</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.uxap.ObjectPageLayout} <code>this</code> to allow method chaining
 * @protected
 * @name sap.uxap.ObjectPageLayout#fireToggleAnchorBar
 * @function
 */


/**
 * Scrolls to the given section
 *
 * @name sap.uxap.ObjectPageLayout#scrollToSection
 * @function
 * @param {string} sId
 *         The section id to scroll to
 * @param {int} iDuration
 *         Scroll duration (in ms). Default value is 0
 * @type sap.uxap.ObjectPageLayout
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Returns a sap.ui.core.delegate.ScrollEnablement object used to handle scrolling
 *
 * @name sap.uxap.ObjectPageLayout#getScrollDelegate
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Returns the ui5 id of the section that is currently being scrolled.
 *
 * @name sap.uxap.ObjectPageLayout#getScrollingSectionId
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/uxap/ObjectPageLayout.js
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.require('sap.uxap.ObjectPageSubSectionLayout'); // unlisted dependency retained


/*************************************************************************************
 * life cycle management
 ************************************************************************************/

sap.uxap.ObjectPageLayout.prototype.init = function () {

	this._oScroller = null; //will be set onBeforeRendering

	//lazy loading
	this._bFirstRendering = true;

	//anchorbar management
	this._oDefaultAnchorBar = new sap.uxap.AnchorBar({
		showPopover: this.getShowAnchorBarPopover()
	});
	this._bInternalAnchorBarVisible = true;

	this.setAggregation("_anchorBar", this._oDefaultAnchorBar);

	this._$opWrapper = [];                      //dom reference to the header for Dark mode background image scrolling scenario
	this._$anchorBar = [];                      //dom reference to the anchorBar
	this._$headerTitle = [];                    //dom reference to the header title
	this._$stickyAnchorBar = [];                //dom reference to the sticky anchorBar
	this._bStickyAnchorBar = false;             //status of the header
	this._bDomReady = false;                    //dom is fully ready to be inspected
	this._$headerContent = [];                  //dom reference to the headerContent

	//header animation && anchor bar management
	this._bMobileScenario = false;              //are we in a mobile scenario or the desktop one?
	this._oSectionInfo = {};                    //register some of the section info sSectionId:{offset,buttonClone} for updating the anchorbar accordingly
	this._aSectionBases = [];                   //hold reference to all sections and subsections alike (for perf reasons)
	this._sScrolledSectionId = "";              //section id that is currently scrolled
	this._iScrollToSectionDuration = 600;       //ms
	this._$spacer = [];                         //dom reference to the bottom padding spacing
	this.iHeaderContentHeight = 0;              // original height of the header content
	this.iHeaderTitleHeight = 0;                // original height of the header title
	this.iHeaderTitleHeightStickied = 0;        // height of the header title when stickied (can be different from the collapsed height because of isXXXAlwaysVisible options or text wrapping)
	this.iAnchorBarHeight = 0;                  // original height of the anchorBar
	this.iTotalHeaderSize = 0;                  // total size of headerTitle + headerContent

	this._iResizeId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._onUpdateScreenSize, this));

	//scroll values kept for lazy loaing purpose
	this._iPreviousScrollTop = 0;               //scroll top of the last scroll event
	this._iScrollProgress = 0;                  //progress done between the 2 lkast scroll events
	this._iPreviousScrollTimestamp = 0;         //Timestamp of the last scroll event

	this.setLazyLoadingParameters();
};

sap.uxap.ObjectPageLayout.HEADER_CALC_DELAY = 350;   //ms. The higher the safer and the uglier...
sap.uxap.ObjectPageLayout.DOM_CALC_DELAY = 200;      //ms.

sap.uxap.ObjectPageLayout.prototype.exit = function () {
	if (this._oScroller) {
		this._oScroller.destroy();
		this._oScroller = null;
	}

	if (this._iResizeId) {
		sap.ui.core.ResizeHandler.deregister(this._iResizeId);
	}
};

/*************************************************************************************
 * Ux rules
 ************************************************************************************/
/**
 * updates the objectPageLayout structure based on ux rules
 * This affects data!
 * @private
 * @param bInvalidate request the invalidation of the sectionBase that would turn into visible or hidden. This may not be necessary if you are already within a rendering process.
 */
sap.uxap.ObjectPageLayout.prototype._applyUxRules = function (bInvalidate) {
	var oObjectPageLayout, aSection, aSubSection, iVisibleSubSections, iVisibleSection, iVisibleBlocks, bVisibleAnchorBar, oFirstVisibleSection, oFirstVisibleSubSection;

	oObjectPageLayout = this;
	aSection = oObjectPageLayout.getSections() || [];
	iVisibleSection = 0;
	bVisibleAnchorBar = this.getShowAnchorBar();
	oFirstVisibleSection = null;

	this._cleanMemory();

	jQuery.each(aSection, function (iIndex, oSection) {

		//ignore hidden sections
		if (!oSection.getVisible()) {
			return true;
		}

		oObjectPageLayout._registerSectionBaseInfo(oSection);
		aSubSection = oSection.getSubSections() || [];
		iVisibleSubSections = 0;
		oFirstVisibleSubSection = null;

		jQuery.each(aSubSection, function (iIndex, oSubSection) {

			//ignore hidden subSection
			if (!oSubSection.getVisible()) {
				return true;
			}

			oObjectPageLayout._registerSectionBaseInfo(oSubSection);
			iVisibleBlocks = 0;

			jQuery.each(oSubSection.getBlocks() || [], function (iIndex, oBlock) {
				if (oBlock.getVisible && !oBlock.getVisible()) {
					return true;
				}

				iVisibleBlocks++;
				return true;
			});

			jQuery.each(oSubSection.getMoreBlocks() || [], function (iIndex, oMoreBlock) {
				if (oMoreBlock.getVisible && !oMoreBlock.getVisible()) {
					return true;
				}

				iVisibleBlocks++;
				return true;
			});

			//rule noVisibleBlock: If a subsection has no visible content the subsection will be hidden.
			if (iVisibleBlocks == 0) {
				oSubSection._setInternalVisible(false, bInvalidate);
				jQuery.sap.log.info("ObjectPageLayout :: noVisibleBlock UX rule matched", "subSection " + oSubSection.getTitle() + " forced to hidden");
			}
			else {
				oSubSection._setInternalVisible(true, bInvalidate);
				//if TitleOnTop.sectionGetSingleSubSectionTitle is matched, this will be hidden back
				oSubSection._setInternalTitleVisible(true, bInvalidate);
				iVisibleSubSections++;
				if (!oFirstVisibleSubSection) {
					oFirstVisibleSubSection = oSubSection;
				}
			}

			return true;
		});

		//rule noVisibleSubSection: If a section has no content (or only empty subsections) the section will be hidden.
		if (iVisibleSubSections == 0) {
			oSection._setInternalVisible(false, bInvalidate);
			jQuery.sap.log.info("ObjectPageLayout :: noVisibleSubSection UX rule matched", "section " + oSection.getTitle() + " forced to hidden");
		}
		else {
			oSection._setInternalVisible(true, bInvalidate);
			oSection._setInternalTitleVisible(true, bInvalidate);
			if (!oFirstVisibleSection) {
				oFirstVisibleSection = oSection;
			}

			//rule TitleOnTop.sectionGetSingleSubSectionTitle: If a section as only 1 subsection and the subsection title is not empty, the section takes the subsection title on titleOnTop layout only
			if (oObjectPageLayout.getSubSectionLayout() === sap.uxap.ObjectPageSubSectionLayout.TitleOnTop &&
				iVisibleSubSections == 1 && oFirstVisibleSubSection.getTitle().trim() !== "") {
				jQuery.sap.log.info("ObjectPageLayout :: TitleOnTop.sectionGetSingleSubSectionTitle UX rule matched", "section " + oSection.getTitle() + " is taking its single subsection title " + oFirstVisibleSubSection.getTitle());
				oSection._setInternalTitle(oFirstVisibleSubSection.getTitle(), bInvalidate);
				oFirstVisibleSubSection._setInternalTitleVisible(false, bInvalidate);
			}
			else {
				oSection._setInternalTitle("", bInvalidate);
			}

			iVisibleSection++;
		}

		return true;
	});

	//rule notEnoughVisibleSection: If there is only 1 section overall, the navigation control shall be hidden.
	if (iVisibleSection <= 1) {
		bVisibleAnchorBar = false;
		jQuery.sap.log.info("ObjectPageLayout :: notEnoughVisibleSection UX rule matched", "anchorBar forced to hidden");
	}
	//rule firstSectionTitleHidden: the first section title is never visible if there is an anchorBar
	else if (oFirstVisibleSection && bVisibleAnchorBar) {
		oFirstVisibleSection._setInternalTitleVisible(false, bInvalidate);
		jQuery.sap.log.info("ObjectPageLayout :: firstSectionTitleHidden UX rule matched", "section " + oFirstVisibleSection.getTitle() + " title forced to hidden");
	}
	oObjectPageLayout._setInternalAnchorBarVisible(bVisibleAnchorBar, bInvalidate);

	//the anchor bar needs to reflect the dom state
	if (bVisibleAnchorBar) {
		this._buildAnchorBar();
	}

};

/*************************************************************************************
 * lazy loading
 ************************************************************************************/

/**
 * Set the lazy loading tuning parameters.
 */
sap.uxap.ObjectPageLayout.prototype.setLazyLoadingParameters = function () {
	//delay before loading data for visible sub-sections
	//this delay avoid loading data for every subsections during scroll
	this.LAZY_LOADING_DELAY = 200;  //ms.

	//lazy loading fine tuning
	//An extra non visible subsection will be loaded if the the top of this subsection is at
	//no more than LAZY_LOADING_EXTRA_PAGE_SIZE * page height from the the bottom of the page.
	this.LAZY_LOADING_EXTRA_PAGE_SIZE = 0.5;

	//number of subsections which should be preloaded :
	//   - FirstRendering : for first loading
	//   - ScrollToSection : default value when scrolling to a subsection
	var $html = jQuery("html");
	if ($html.hasClass("sapUiMedia-Std-Phone") || sap.ui.Device.system.phone) {
		this.NUMBER_OF_SUBSECTIONS_TO_PRELOAD = {"FirstRendering": 1, "ScrollToSection": 1};
	}
	else if (sap.ui.Device.system.tablet) {
		//on tablet scrolling may be slow.
		this.NUMBER_OF_SUBSECTIONS_TO_PRELOAD = {"FirstRendering": 2, "ScrollToSection": 1};
	}
	else if ($html.hasClass("sapUiMedia-Std-Tablet")) {
		//Desktop with a "tablet" window size
		this.NUMBER_OF_SUBSECTIONS_TO_PRELOAD = {"FirstRendering": 2, "ScrollToSection": 2};
	}
	else {
		this.NUMBER_OF_SUBSECTIONS_TO_PRELOAD = {"FirstRendering": 3, "ScrollToSection": 3};
	}

	//Threshold beyond which we consider that user is scrolling fast and thus that lazy loading must be differed.
	//(percentage of the pageheight).
	this.LAZY_LOADING_FAST_SCROLLING_THRESHOLD = 5;

};

/**
 * Load in advance the subsections which will likely be visible once the operation (firstRendering or scrolltoSection)
 * will be complete.
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._preLoad = function (sId) {
	var iSubsectionsToPreLoad,
		bTargetSubsectionReached;

	//if no sId, target section is the first section (first rendering).
	if (sId) {
		iSubsectionsToPreLoad = this.NUMBER_OF_SUBSECTIONS_TO_PRELOAD.ScrollToSection;
		bTargetSubsectionReached = false;
	}
	else {
		iSubsectionsToPreLoad = this.NUMBER_OF_SUBSECTIONS_TO_PRELOAD.FirstRendering;
		bTargetSubsectionReached = true;
	}

	jQuery.each(this._aSectionBases, jQuery.proxy(function (iIndex, oSection) {
		if (!bTargetSubsectionReached && sId) {
			bTargetSubsectionReached = oSection.getId() == sId;
		}
		if (bTargetSubsectionReached && oSection instanceof sap.uxap.ObjectPageSubSection) {
			if (oSection.getVisible() && oSection._getInternalVisible()) {
				oSection.connectToModels();
				iSubsectionsToPreLoad--;
			}
		}
		return iSubsectionsToPreLoad > 0;
	}, this));
};


/*************************************************************************************
 * anchor bar management
 ************************************************************************************/

sap.uxap.ObjectPageLayout.prototype.setShowAnchorBarPopover = function (bValue, bSuppressInvalidate) {
	this._oDefaultAnchorBar.setShowPopover(bValue);
	return this.setProperty("showAnchorBarPopover", bValue, true /* don't re-render the whole objectPageLayout */);
};

sap.uxap.ObjectPageLayout.prototype._getInternalAnchorBarVisible = function () {
	return this._bInternalAnchorBarVisible;
};

sap.uxap.ObjectPageLayout.prototype._setInternalAnchorBarVisible = function (bValue, bInvalidate) {
	if (bValue != this._bInternalAnchorBarVisible) {
		this._bInternalAnchorBarVisible = bValue;
		if (bInvalidate === true) {
			this.invalidate();
		}
	}
};

sap.uxap.ObjectPageLayout.prototype._adjustLayout = function (oEvent, bImmediate, bNeedLazyLoading) {

	//adjust the layout only if the object page is full ready
	if (this._bDomReady) {
		//postpone until we get requests
		if (this._iLayoutTimer) {
			jQuery.sap.log.debug("ObjectPageLayout :: _adjustLayout", "delayed by " + sap.uxap.ObjectPageLayout.DOM_CALC_DELAY + " ms because of dom modifications");
			jQuery.sap.clearDelayedCall(this._iLayoutTimer);
		}

		if (bImmediate) {
			this._updateDomPositions();
			this._iLayoutTimer = undefined;
		}
		else {
			//need to "remember" if one of the adjustLayout is requesting the lazyLoading
			this._bNeedLazyLoading = this._bNeedLazyLoading !== undefined || bNeedLazyLoading;

			this._iLayoutTimer = jQuery.sap.delayedCall(sap.uxap.ObjectPageLayout.DOM_CALC_DELAY, this, function () {
				jQuery.sap.log.debug("ObjectPageLayout :: _adjustLayout", "re-evaluating dom positions");
				this._updateDomPositions();

				//in case the layout has changed we need to re-evaluate the lazy loading
				if (this._bNeedLazyLoading) {
					this._lazyLoading();
				}

				this._bNeedLazyLoading = undefined;
				this._iLayoutTimer = undefined;
			});
		}
	}
};


/**
 * adjust the layout but also the ux rules
 * used for refreshing the overall structure of the objectPageLayout when it as been updated after the first rendering
 * @private
 */

sap.uxap.ObjectPageLayout.prototype._adjustLayoutAndUxRules = function () {
	//in case we have added a section or subSection which change the ux rules
	jQuery.sap.log.debug("ObjectPageLayout :: _adjustLayout", "refreshing ux rules");

	this._applyUxRules(true);
	this._adjustLayout(null, false, true /* requires a check on lazy loading */);
};

/**
 * update the anchor bar content accordingly to the section info and enable the lazy loading of the first visible sections
 */

sap.uxap.ObjectPageLayout.prototype.onBeforeRendering = function () {

	//are we re-rendering an existing objectPageLayout?
	//if so we need to reset the scroller as it gets confused
	if (this._oScroller) {
		this._oScroller.scrollTo(0, 0, 0);         //reset the actual scroll position
		this._oScroller.destroy();
	}

	//Internal Incident: 1482023778: workaround BB10 = use zynga instead of iScroll
	var bEnforceZynga = (sap.ui.Device.os.blackberry && sap.ui.Device.os.version >= 10.0 && sap.ui.Device.os.version < 11.0);

	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
		horizontal: false,
		vertical: true,
		zynga: bEnforceZynga,
		preventDefault: true,
		nonTouchScrolling: "scrollbar",
		scrollbarClass: "sapUxAPObjectPageScroll"
	});

	//update aggregation content with the ux rules
	this._applyUxRules();

	// If we are on the first true rendering : first time we render the page with section and blocks
	if (!jQuery.isEmptyObject(this._oSectionInfo) && this._bFirstRendering) {
		if (!this.getEnableLazyLoading()) {
			// In case we are not lazy loaded make sure that we connect the blocks properly...
			jQuery.each(this.getSections() || [], jQuery.proxy(function (iIndex, oSection) {
				oSection.connectToModels();
			}, this));
		}
		else {
			// connect first visible subsections
			this._preLoad();
		}
		this._bFirstRendering = false;
	}

	this._bStickyAnchorBar = false; //reset default state in case of re-rendering
};

/**
 * build a sap.m.button equivalent to a section or sub section for insertion in the anchorBar
 * also registers the section info for further dom position updates
 * @param oSectionBase
 * @param bIsSection
 * @returns {null}
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._buildAnchorBarButton = function (oSectionBase, bIsSection) {

	var oButtonClone = null,
		oButton,
		oSectionBindingInfo,
		sModelName;

	if (oSectionBase.getVisible() && oSectionBase._getInternalVisible()) {
		oButton = oSectionBase.getCustomAnchorBarButton();

		//by default we get create a button with the section title as text
		if (!oButton) {
			oButtonClone = new sap.m.Button({
				ariaDescribedBy: oSectionBase
			});

			//has a ux rule been applied that we need to reflect here?
			if (oSectionBase._getInternalTitle() != "") {
				oButtonClone.setText(oSectionBase._getInternalTitle());
			}
			else {

				//is the section title bound to a model? in this case we need to apply the same binding
				oSectionBindingInfo = oSectionBase.getBindingInfo("title");
				if (oSectionBindingInfo && oSectionBindingInfo.parts && oSectionBindingInfo.parts.length > 0) {

					sModelName = oSectionBindingInfo.parts[0].model;

					//handle relative binding scenarios
					oButtonClone.setBindingContext(oSectionBase.getBindingContext(sModelName), sModelName);

					//copy binding information
					oButtonClone.bindProperty("text", {
						path: oSectionBindingInfo.parts[0].path,
						model: sModelName
					});
				}
				//otherwise just copy the plain text
				else {
					oButtonClone.setText(oSectionBase.getTitle());
				}
			}
		}
		else {
			oButtonClone = oButton.clone(); //keep original button parent control hierarchy
		}

		//update the section info
		this._oSectionInfo[oSectionBase.getId()].buttonId = oButtonClone.getId();

		//the anchorBar needs to know the sectionId for automatic horizontal scrolling
		oButtonClone.addCustomData(new sap.ui.core.CustomData({
			key: "sectionId", value: oSectionBase.getId()
		}));

		//the anchorBar needs to know whether the title is actually displayed or not (so the anchorBar is really reflecting the objactPage layout state)
		oButtonClone.addCustomData(new sap.ui.core.CustomData({
			key: "phoneVisibility",
			value: oSectionBase._getInternalTitleVisible()
		}));

		if (!bIsSection) {
			//the anchorBar needs to know that this is a second section because it will handle responsive scenarios
			oButtonClone.addCustomData(new sap.ui.core.CustomData({
				key: "secondLevel", value: true
			}));
		}
	}

	return oButtonClone;
};

/**
 * clean the oSectionInfo and aSectionBases internal properties
 * as the oSectionInfo contains references to created objects, we make sure to destroy them properly in order to avoid memory leaks
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._cleanMemory = function () {

	var oAnchorBar = this.getAggregation("_anchorBar");

	jQuery.each(this._oSectionInfo, function (sSectionId, oInfo) {
		var oButton = sap.ui.getCore().byId(oInfo.buttonId);

		if (oAnchorBar && oButton) {
			oAnchorBar.destroyContent(oButton);
		}

	});

	this._oSectionInfo = {};
	this._aSectionBases = [];
};

/**
 * build the anchorBar and all the anchorBar buttons
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._buildAnchorBar = function () {
	var aSections = this.getSections() || [],
		oAnchorBar = this.getAggregation("_anchorBar");

	//tablet & desktop mechanism
	if (oAnchorBar && this.getShowAnchorBar()) {

		oAnchorBar.removeAllContent();

		//first level
		jQuery.each(aSections, jQuery.proxy(function (iIndex, oSection) {

			if (!oSection.getVisible() || !oSection._getInternalVisible()) {
				return true;
			}

			var oButtonClone,
				aSubSections = oSection.getSubSections() || [];

			oButtonClone = this._buildAnchorBarButton(oSection, true);

			if (oButtonClone) {
				oAnchorBar.addContent(oButtonClone);

				//second Level
				jQuery.each(aSubSections, jQuery.proxy(function (iIndex, oSubSection) {

					if (!oSubSection.getVisible() || !oSubSection._getInternalVisible()) {
						return true;
					}

					var oButtonClone = this._buildAnchorBarButton(oSubSection, false);

					if (oButtonClone) {
						oAnchorBar.addContent(oButtonClone);
					}

					return true;

				}, this));
			}

			return true;
		}, this));
	}
};

/**
 * register the section within the internal property used for lazy loading and navigation
 * most of these properties are going to be updated later when the dom will be ready (positions) or when the anchorBar button will be created (buttonId)
 * @param oSectionBase the section to register
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._registerSectionBaseInfo = function (oSectionBase) {
	this._oSectionInfo[oSectionBase.getId()] = {
		$dom: [],
		positionTop: 0,
		positionTopMobile: 0,
		realTop: 0.0,
		buttonId: "",
		isSection: (oSectionBase instanceof sap.uxap.ObjectPageSection)
	};

	this._aSectionBases.push(oSectionBase);
};

/**
 * Scroll to a specific Section
 *
 * @param sId       id of the section to scroll to
 * @param duration  Scroll duration. Default value is 0
 *
 */
sap.uxap.ObjectPageLayout.prototype.scrollToSection = function (sId, duration) {

	//call _adjustLayout synchronously to make extra sure we have the right positionTops for all sectionBase before scrolling
	this._adjustLayout(null, true);

	var iDuration = duration || this._iScrollToSectionDuration,
		iScrollTo = this._bMobileScenario || !this.getShowAnchorBarPopover() ? this._oSectionInfo[sId].positionTopMobile : this._oSectionInfo[sId].positionTop;

	//avoid triggering twice the scrolling onto the same target section
	if (this._sCurrentScrollId != sId) {
		this._sCurrentScrollId = sId;

		if (this._iCurrentScrollTimeout) {
			clearTimeout(this._iCurrentScrollTimeout);
			this._$contentContainer.parent().stop(true, false);
		}

		this._iCurrentScrollTimeout = jQuery.sap.delayedCall(duration, this, function () {
			this._sCurrentScrollId = undefined;
			this._iCurrentScrollTimeout = undefined;
		});


		if (this.getEnableLazyLoading()) {
			//connect target subsection to avoid delay in data loading
			if (sap.ui.Device.system.desktop) {
				//on desktop we delay the call to have the preload done during the scrolling animation
				jQuery.sap.delayedCall(50, this, function () {
					this._preLoad(sId);
				});
			}
			else {
				//on device, do the preload first then scroll.
				//doing anything during the scrolling animation may
				//trouble animation and lazy loading on slow devices.
				this._preLoad(sId);
			}
		}

		this._scrollTo(iScrollTo, iDuration);
	}

};

sap.uxap.ObjectPageLayout.prototype.getScrollingSectionId = function () {
	return this._sScrolledSectionId;
};

/**
 * Scroll to the y position in dom
 * @param y the position in pixel
 * @param time the animation time
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._scrollTo = function (y, time) {
	if (this._oScroller) {
		jQuery.sap.log.debug("ObjectPageLayout :: scrolling to " + y);
		this._oScroller.scrollTo(0, y, time);
	}
	return this;
};

/**
 * update the section dom reference
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._updateDomPositions = function () {
	var iLastVisibleHeight,
		oLastVisibleSubSection,
		iSpacerHeight,
		sPreviousSubSectionId,
		sPreviousSectionId,
		iHeaderGap;

	this.iScreenHeight = this.$().height();

	iHeaderGap = this.iHeaderTitleHeightStickied - this.iHeaderTitleHeight;

	jQuery.each(this._aSectionBases, jQuery.proxy(function (iIndex, oSectionBase) {
		var oInfo = this._oSectionInfo[oSectionBase.getId()],
			$this = oSectionBase.$(),
			$mobileAnchor;

		if (oInfo /* sectionBase is visible */ && $this.length > 0) {

			oInfo.$dom = $this;

			//calculate the scrollTop value to get the section title at the bottom of the header
			//performance improvements possible here as .position() is costly
			oInfo.realTop = $this.position().top; //first get the dom position = scrollTop to get the section at the window top

			//the amount of scrolling required is the distance between their position().top and the bottom of the anchorBar
			oInfo.positionTop = Math.ceil(oInfo.realTop) - this.iAnchorBarHeight - iHeaderGap;

			//the amount of scrolling required for the mobile scenario
			//we want to navigate just below its title
			//as of UX specs Oct 7, 2014
			if (oInfo.isSection) {
				$mobileAnchor = oSectionBase.$("header");
			}
			else {
				$mobileAnchor = oSectionBase.$("headerTitle");
			}

			//calculate the mobile position
			if ($mobileAnchor.length > 0) {
				oInfo.positionTopMobile = Math.ceil($mobileAnchor.position().top) + $mobileAnchor.height() - this.iAnchorBarHeight - iHeaderGap;
			}
			else {
				//title wasn't found (=first section, hidden title, promoted subsection), scroll to the same position as desktop
				oInfo.positionTopMobile = oInfo.positionTop;
			}

			//for calculating the currently scrolled section of subsection (and for lazy loading) we also need to know the bottom of the section and subsections
			//we can't use oInfo.$dom.height() since the margin are not taken into account.
			//therefore the most reliable calculation is to consider as a bottom, the top of the next section/subsection
			//on mobile, each section and subsection is considered equally (a section is a very tiny subsection containing only a title)
			if (this._bMobileScenario) {
				if (sPreviousSectionId) {               //except for the very first section
					this._oSectionInfo[sPreviousSectionId].positionBottom = oInfo.positionTop;
				}
				sPreviousSectionId = oSectionBase.getId();
				oLastVisibleSubSection = oSectionBase;
			}
			//on desktop, we update section by section (each section is resetting the calculation)
			else {
				//on a desktop the previous section bottom is the top of the current section
				if (oInfo.isSection) {
					if (sPreviousSectionId) {           //except for the very first section
						this._oSectionInfo[sPreviousSectionId].positionBottom = oInfo.positionTop;
						this._oSectionInfo[sPreviousSubSectionId].positionBottom = oInfo.positionTop;
					}
					sPreviousSectionId = oSectionBase.getId();
					sPreviousSubSectionId = null;
				}
				//on desktop, the previous subsection bottom is the top of the current subsection
				else {
					if (sPreviousSubSectionId) {        //except for the very first subSection
						this._oSectionInfo[sPreviousSubSectionId].positionBottom = oInfo.positionTop;
					}
					sPreviousSubSectionId = oSectionBase.getId();
					oLastVisibleSubSection = oSectionBase;
				}
			}

		}
	}, this));

	//calculate the bottom spacer height and update the last section/subSection bottom (with our algorithm of having section tops based on the next section, we need to have a special handling for the very last subSection)
	if (oLastVisibleSubSection) {
		iLastVisibleHeight = this._$spacer.position().top - this._oSectionInfo[oLastVisibleSubSection.getId()].realTop;

		//on desktop we need to set the bottom of the last section as well
		if (this._bMobileScenario) {
			this._oSectionInfo[sPreviousSectionId].positionBottom = this._oSectionInfo[sPreviousSectionId].positionTop + iLastVisibleHeight;
		}
		//update the position bottom for the last subsection
		else {
			this._oSectionInfo[sPreviousSubSectionId].positionBottom = this._oSectionInfo[sPreviousSubSectionId].positionTop + iLastVisibleHeight;
			this._oSectionInfo[sPreviousSectionId].positionBottom = this._oSectionInfo[sPreviousSubSectionId].positionTop + iLastVisibleHeight;
		}

		//calculate the required additional space for the last section only
		if (iLastVisibleHeight < this.iScreenHeight) {

			//the amount of space required is what is needed to get the latest position you can scroll to up to the "top"
			//therefore we need to create enough space below the last subsection to get it displayed on top = the spacer
			//the "top" is just below the sticky header + anchorBar, therefore we just need enough space to get the last subsection below these elements

			//the latest position is below the last subsection title in case of a mobile scroll to the last subsection
			iSpacerHeight = this.iScreenHeight - iLastVisibleHeight - this.iHeaderTitleHeightStickied - this.iAnchorBarHeight;

			//take into account that we may need to scroll down to the positionMobile, thus we need to make sure we have enough space at the bottom
			if (this._bMobileScenario) {
				iSpacerHeight += (this._oSectionInfo[oLastVisibleSubSection.getId()].positionTopMobile - this._oSectionInfo[oLastVisibleSubSection.getId()].positionTop);
			}

			this._$spacer.height(iSpacerHeight + "px");
			jQuery.sap.log.debug("ObjectPageLayout :: bottom spacer is now " + iSpacerHeight + "px");
		}
	}

};

/**
 * init the internal section info {positionTop}
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._initAnchorBarScroll = function () {

	this._adjustLayout(null, true);

	//reset the scroll to top for anchorbar & scrolling management
	this._sScrolledSectionId = "";
	this._onScroll({target: {scrollTop: 0}});//make sure we got the very last scroll event even on slow devices
};

/**
 * Set a given section as the currently scrolled section and update the anchorBar relatively
 * @param sSectionId the section id
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._setAsCurrentSection = function (sSectionId) {

	var oAnchorBar, oSectionBase;

	if (this._sScrolledSectionId != sSectionId) {

		jQuery.sap.log.debug("ObjectPageLayout :: current section is " + sSectionId);
		this._sScrolledSectionId = sSectionId;

		oAnchorBar = this.getAggregation("_anchorBar");

		if (oAnchorBar && this._getInternalAnchorBarVisible()) {
			oSectionBase = sap.ui.getCore().byId(sSectionId);

			//the sectionBase title needs to be visible (or the user won't "feel" scrolling that sectionBase but its parent)
			//see Incident 1570016975 for more details
			if (oSectionBase && oSectionBase instanceof sap.uxap.ObjectPageSubSection && (oSectionBase.getTitle().trim() === "" || !oSectionBase._getInternalTitleVisible())) {
				sSectionId = oSectionBase.getParent().getId();

				jQuery.sap.log.debug("ObjectPageLayout :: current section is a subSection with an empty or hidden title, selecting parent " + sSectionId);
			}

			if ( this._oSectionInfo[sSectionId]) {
				oAnchorBar.setSelectedButton(this._oSectionInfo[sSectionId].buttonId);
			}
		}
	}
};

/**
 * called when the screen is resize by users. Updates the screen height
 * @param oEvent
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._onUpdateScreenSize = function (oEvent) {

	if (!this._bDomReady) {
		jQuery.sap.log.info("ObjectPageLayout :: cannot _onUpdateScreenSize before dom is ready");
		return;
	}

	this._bMobileScenario = jQuery("html").hasClass("sapUiMedia-Std-Phone") || sap.ui.Device.system.phone;

	this.setLazyLoadingParameters();

	jQuery.sap.delayedCall(sap.uxap.ObjectPageLayout.HEADER_CALC_DELAY, this, function () {

		this._adjustHeaderHeights();

		this._adjustLayout(null, true);

		this._oScroller.scrollTo(0, this._$opWrapper.scrollTop(), 0);
	});

};


/*************************************************************************************
 * header & scroll management
 ************************************************************************************/

sap.uxap.ObjectPageLayout.prototype.onAfterRendering = function () {

	//if our container has not set a height, we need to enforce it or nothing will get displayed
	//the reason is the objectPageLayout has 2 containers with position:absolute, height:100%
	if (this.getParent().getHeight && ["", "auto"].indexOf(this.getParent().getHeight()) !== -1) {
		this.$().parent().css("height", "100%");
	}

	this._$headerTitle = jQuery.sap.byId(this.getId() + "-headerTitle");
	this._$anchorBar = jQuery.sap.byId(this.getId() + "-anchorBar");
	this._$stickyAnchorBar = jQuery.sap.byId(this.getId() + "-stickyAnchorBar");
	this._$opWrapper = jQuery.sap.byId(this.getId() + "-opwrapper");
	this._$spacer = jQuery.sap.byId(this.getId() + "-spacer");
	this._$headerContent = jQuery.sap.byId(this.getId() + "-headerContent");
	this._bMobileScenario = jQuery("html").hasClass("sapUiMedia-Std-Phone") || sap.ui.Device.system.phone;

	this._$contentContainer = jQuery.sap.byId(this.getId() + "-scroll");
	this._$opWrapper.scroll(jQuery.proxy(this._onScroll, this));

	//set the correct width for the scrollBar to be visible
	var fRight = 0.0;

	if (sap.ui.Device.system.desktop) {
		fRight = jQuery.position.scrollbarWidth();
	}

	if (fRight > 0) {
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			this._$headerTitle.css("left", fRight + "px");
		}
		else {
			this._$headerTitle.css("right", fRight + "px");
		}
	}

	//the dom is already ready (re-rendering case), thus we compute the header immediately
	//in order to avoid flickering (see Incident 1570011343)
	if (this._bDomReady) {
		this._adjustHeaderHeights();

		this._initAnchorBarScroll();
	}
	else {
		jQuery.sap.delayedCall(sap.uxap.ObjectPageLayout.HEADER_CALC_DELAY, this, function () {

			this._bDomReady = true;

			this._adjustHeaderHeights();

			this._initAnchorBarScroll();
		});
	}
};

/**
 * called when the user scrolls on the page
 * @param oEvent
 * @private
 */

sap.uxap.ObjectPageLayout.prototype._onScroll = function (oEvent) {

	var iScrollTop = Math.max(oEvent.target.scrollTop, 0), // top of the visible page
		iScrollPageBottom,
		iPageHeight,
		oHeader = this.getHeaderTitle(),
		iLimitScroll = this._$contentContainer.height() - this.iScreenHeight,
		bFastScrolling = false,
		bShouldStick = iScrollTop >= (this.iHeaderContentHeight - (this.iHeaderTitleHeightStickied - this.iHeaderTitleHeight)), // iHeaderContentHeight minus the gap between the two headerTitle
		iDelay,
		sClosestId,
		iMin,
		iProgressPercentage;

	//calculate the limit of visible sections to be lazy loaded
	iPageHeight = (
	this.iScreenHeight                                            /* the total screen height */
	- (bShouldStick ? this.iAnchorBarHeight : 0)              /* minus the part taken by the anchor bar (when sticky)*/
	- (bShouldStick ? this.iHeaderTitleHeightStickied : 0)    /* minus the part taken by the header title (mandatory) */
	);

	iScrollPageBottom = iScrollTop + iPageHeight;                             //the bottom limit

	//don't apply parallax effects if there are not enough space for it
	if (oHeader || this.getShowAnchorBar()) {
		this._toggleHeader(bShouldStick);
	}

	//if we happen to have been able to collapse it at some point (section height had increased)
	//and we no longer are (section height is reduced) and we are at the top of the page we expand it back anyway
	else if (iScrollTop == 0 && (oHeader || this.getShowAnchorBar())) {
		this._toggleHeader(false);
	}

	//find the currently scrolled section = where position - iScrollTop is closest to 0

	iMin = iLimitScroll;

	this._adjustHeaderTitleBackgroundPosition(iScrollTop);

	jQuery.sap.log.debug("ObjectPageLayout :: lazy loading : Scrolling at " + iScrollTop, "----------------------------------------");

	// find the closest section
	jQuery.each(this._oSectionInfo, jQuery.proxy(function (sId, oInfo) {
		// on desktop/tablet, find a section, not a subsection
		if (oInfo.isSection || this._bMobileScenario) {

			//we need to set the sClosest to the first section for handling the scrollTop = 0
			if (!sClosestId) {
				sClosestId = sId;
			}

			//find closest
			// 1D segment intersection
			if (oInfo.positionTop <= iScrollPageBottom && iScrollTop <= oInfo.positionBottom) {
				// find the closest section: the sections that intersect the visible page and that ends the closest to iScrollTop
				if (oInfo.positionBottom - iScrollTop < iMin) {
					sClosestId = sId;
					iMin = oInfo.positionBottom - iScrollTop;
				}
			}
		}

	}, this));

	if (sClosestId && sClosestId != this._sScrolledSectionId) {
		jQuery.sap.log.debug("ObjectPageLayout :: closest id " + sClosestId, "----------------------------------------");
		this._setAsCurrentSection(sClosestId);
	}

	//lazy load only the visible subSections
	if (this.getEnableLazyLoading()) {
		//calculate the progress done between this scroll event and the previous one
		//to see if we are scrolling fast (more than 5% of the page height)
		this._iScrollProgress = iScrollTop - this._iPreviousScrollTop;
		iProgressPercentage = Math.round(Math.abs(this._iScrollProgress) / iPageHeight * 100);
		if (iProgressPercentage >= this.LAZY_LOADING_FAST_SCROLLING_THRESHOLD) {
			bFastScrolling = true;
		}
		this._iPreviousScrollTop = iScrollTop;
		this._iPreviousScrollTimestamp = oEvent.timeStamp || 0;

		iDelay = (iScrollTop === 0 ) ? 0 : this.LAZY_LOADING_DELAY;
		//if we are scrolling fast, clear the previous delayed lazy loading call if any
		//as we don't want to load intermediate subsections which are visible only
		//during a brief moment during scroll.
		if (bFastScrolling && this._sLazyLoadingTimer) {
			jQuery.sap.log.debug("ObjectPageLayout :: lazyLoading", "delayed by " + iDelay + " ms because of fast scroll");
			jQuery.sap.clearDelayedCall(this._sLazyLoadingTimer);
			this._sLazyLoadingTimer = null;
		}

		//If there's no delayed lazy loading call, create a new one.
		if (!this._sLazyLoadingTimer) {
			this._sLazyLoadingTimer = jQuery.sap.delayedCall(iDelay, this, this._lazyLoading);
		}
	}
};


sap.uxap.ObjectPageLayout.prototype._lazyLoading = function () {
	var iScrollTop,
		iScrollPageBottom,
		iPageHeight,
		bShouldStick = this._iPreviousScrollTop >= (this.iHeaderContentHeight), // iHeaderContentHeight
		sExtraSubSectionId,
		iExtraSubSectionTop = -1,
		oSubSectionsToLoad = {},
		iTimeDifference,
		bOnGoingScroll,
		iShift;


	//calculate the limit of visible sections to be lazy loaded
	iPageHeight = (
	this.iScreenHeight                                            /* the total screen height */
	- (bShouldStick ? this.iAnchorBarHeight : 0)              /* minus the part taken by the anchor bar (when sticky)*/
	- (bShouldStick ? this.iHeaderTitleHeightStickied : 0)    /* minus the part taken by the header title (mandatory) */
	);
	iScrollTop = this._$opWrapper.scrollTop();

	//we consider that the scroll is still ongoing if:
	//   - a scroll event has been received for less than half of the LAZY_LOADING_DELAY (100 ms)
	//   - progress done between the last 2 scroll event is greater than 5 pixels.
	iTimeDifference = Date.now() - this._iPreviousScrollTimestamp;
	bOnGoingScroll = (iTimeDifference < (this.LAZY_LOADING_DELAY / 2) ) && (Math.abs(this._iScrollProgress) > 5);

	// if scroll is ongoing, we shift the pages top and height to:
	//     - avoid loading subsections which will likely no more be visible at the end of scroll
	//       (Next lazyLoading calls will anyway load them if they are still visible at the end of scroll)
	//     - load in advance subsections which will likely be visible at the end of scroll
	if (bOnGoingScroll) {
		if (this._iScrollProgress >= 0) {
			iShift = Math.round(Math.min(this._iScrollProgress * 20, iPageHeight / 2));
		}
		else {
			iShift = -1 * Math.round(Math.min(Math.abs(this._iScrollProgress) * 20, iPageHeight / 2));
		}
		iScrollTop += iShift;
		jQuery.sap.log.debug("ObjectPageLayout :: lazyLoading", "Visible page shifted from : " + iShift);
	}
	iScrollPageBottom = iScrollTop + iPageHeight;       //the bottom limit

	//don't load subsections which are hardly visible at the top of the page (less than 16 pixels visible)
	//to avoid having the following subsections moving downward as subsection size will likely increase during loading
	iScrollTop += 16;

	//check the visible subsections
	//only consider subsections not yet loaded
	jQuery.each(this._oSectionInfo, jQuery.proxy(function (sId, oInfo) {
		// on desktop/tablet, find a section, not a subsection
		if (!oInfo.isSection && !oInfo.loaded) {
			// 1D segment intersection between visible page and current sub section
			// C <= B and A <= D -> intersection
			//    A-----B
			//  C---D
			//       C----D
			//     C-D
			// C-----------D
			if (oInfo.positionTop <= iScrollPageBottom && iScrollTop < oInfo.positionBottom - 1) {
				oSubSectionsToLoad[sId] = sId;
			}
			// Lazy loading will add an extra subsection :
			//    the first (highest) subsection not yet visible (and not yet loaded)
			//    top of this subsection must be close from page bottom (less than 0.5 page : LAZY_LOADING_EXTRA_PAGE_SIZE)
			else if (oInfo.positionTop > iScrollPageBottom &&
				oInfo.positionTop < iScrollPageBottom + iPageHeight * this.LAZY_LOADING_EXTRA_PAGE_SIZE &&
				(iExtraSubSectionTop == -1 || oInfo.positionTop < iExtraSubSectionTop)) {
				iExtraSubSectionTop = oInfo.positionTop;
				sExtraSubSectionId = sId;
			}
		}

	}, this));

	//add the extra subsection if:
	//      - we have found one
	//      - we have no visible subsections to load
	if (iExtraSubSectionTop != -1 &&
		jQuery.isEmptyObject(oSubSectionsToLoad)) {
		jQuery.sap.log.debug("ObjectPageLayout :: lazyLoading", "extra section added : " + sExtraSubSectionId);
		oSubSectionsToLoad[sExtraSubSectionId] = sExtraSubSectionId;
	}

	//Load the subsections
	jQuery.each(oSubSectionsToLoad, jQuery.proxy(function (idx, sSectionId) {
		jQuery.sap.log.debug("ObjectPageLayout :: lazyLoading", "connecting " + sSectionId);
		sap.ui.getCore().byId(sSectionId).connectToModels();
		this._oSectionInfo[sSectionId].loaded = true;
	}, this));

	if (bOnGoingScroll) {
		//bOnGoingScroll is just a prediction, we can't be 100% sure as there's no end-of-scroll event
		//so we relaunch a new delayed lazy loading to ensure all visible
		//sections will actually be loaded (no shift) if scroll stops suddenly.
		this._sLazyLoadingTimer = jQuery.sap.delayedCall(this.LAZY_LOADING_DELAY, this, this._lazyLoading);
	}
	else {
		if (iExtraSubSectionTop) {
			//An extra subsection has been found
			//relaunch a delayed lazy loading call to check if there's another extra subsection to load
			//We use a long delay (5* LAZY_LOADING_DELAY) to wait for current loading completion.
			this._sLazyLoadingTimer = jQuery.sap.delayedCall(5 * this.LAZY_LOADING_DELAY, this, this._lazyLoading);
		}
		else {
			//reset the lazy loading timer
			this._sLazyLoadingTimer = null;
		}
	}
};


/**
 * toggles the header state
 * @param bStick boolean true for fixing the header, false for keeping it moving
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._toggleHeader = function (bStick) {
	//switch to stickied
	this._$headerTitle.toggleClass("sapUxAPObjectPageHeaderStickied", bStick);

	//switch from moving to stickied
	if (!this._bStickyAnchorBar && bStick) {
		this._$anchorBar.css("height", this.iAnchorBarHeight).children().appendTo(this._$stickyAnchorBar);
		this._bStickyAnchorBar = true;
		this._$headerContent.css("overflow", "hidden");
		this.fireToggleAnchorBar({fixed: true});

		//Internal Incident: 1472003895: FIT W7 MI: Dual color in the header
		//we need to adjust the header background now in case its size is different
		if (this.iHeaderTitleHeight != this.iHeaderTitleHeightStickied) {
			this._adjustHeaderBackgroundSize();
		}
	}

	//switch from stickied to moving
	else if (this._bStickyAnchorBar && !bStick) {
		this._$anchorBar.css("height", "auto").append(this._$stickyAnchorBar.children());
		this._bStickyAnchorBar = false;
		this._$headerContent.css("overflow", "inherit");
		this.fireToggleAnchorBar({fixed: false});
	}

};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 */
sap.uxap.ObjectPageLayout.prototype.getScrollDelegate = function () {
	return this._oScroller;
};


/************************************************************************************************************
 * Header specific methods
 ***********************************************************************************************************/

sap.uxap.ObjectPageLayout.prototype.setHeaderTitle = function (oHeaderTitle, bSuppressInvalidate) {

	oHeaderTitle.addEventDelegate({
		onAfterRendering: jQuery.proxy(this._adjustHeaderHeights, this)
	});

	return this.setAggregation("headerTitle", oHeaderTitle, bSuppressInvalidate);
};

sap.uxap.ObjectPageLayout.prototype._adjustHeaderBackgroundSize = function () {
	// Update the background image size and position
	var oHeaderTitle = this.getHeaderTitle();
	if (oHeaderTitle && oHeaderTitle.getHeaderDesign() == "Dark") {

		this.iTotalHeaderSize = this.iHeaderTitleHeight + this.iHeaderContentHeight;

		oHeaderTitle.$().css("background-size", "100% " + this.iTotalHeaderSize + "px");
		this._$headerContent.css("background-size", "100% " + this.iTotalHeaderSize + "px");

		this._adjustHeaderTitleBackgroundPosition(0);
	}
};

sap.uxap.ObjectPageLayout.prototype._adjustHeaderTitleBackgroundPosition = function (iScrollTop) {

	var oHeaderTitle = this.getHeaderTitle();
	if (oHeaderTitle && oHeaderTitle.getHeaderDesign() == "Dark") {
		if (this._bStickyAnchorBar) {
			oHeaderTitle.$().css("background-position", "0px " + ((this.iTotalHeaderSize - this.iHeaderTitleHeightStickied) * -1) + "px");
		}
		else {
			oHeaderTitle.$().css("background-position", "0px " + (this.iHeaderTitleHeight + this.iHeaderContentHeight - this.iTotalHeaderSize - iScrollTop) + "px");
		}
	}
};

sap.uxap.ObjectPageLayout.prototype._adjustHeaderHeights = function () {

	//checking the $headerTitle we prevent from checking the headerHeights multiple times during the first rendering
	//$headerTitle is set in the objectPageLayout.onAfterRendering, thus before the objectPageLayout is fully rendered once, we don't enter here multiple times (performance tweak)
	if (this._$headerTitle.length > 0) {
		var $headerTitleClone = this._$headerTitle.clone();

		//read the headerContentHeight ---------------------------
		this.iHeaderContentHeight = this._$headerContent.height();

		//figure out the anchorBarHeight  ------------------------
		this.iAnchorBarHeight = this._$anchorBar.height();

		//prepare: make sure it won't be visible ever and fix width to the original headerTitle which is 100%
		$headerTitleClone.css({left: "-10000px", top: "-10000px", width: this._$headerTitle.width() + "px"});

		//in sticky mode, we need to calculate the size of original header
		if (this._bStickyAnchorBar) {

			//read the headerTitleStickied ---------------------------
			this.iHeaderTitleHeightStickied = this._$headerTitle.height() - this.iAnchorBarHeight;

			//adjust the headerTitle  -------------------------------
			$headerTitleClone.removeClass("sapUxAPObjectPageHeaderStickied");
			$headerTitleClone.appendTo(sap.ui.getCore().getStaticAreaRef());

			this.iHeaderTitleHeight = $headerTitleClone.is(":visible") ? $headerTitleClone.height() - this.iAnchorBarHeight : 0;
		}
		//otherwise it's the sticky that we need to calculate
		else {

			//read the headerTitle -----------------------------------
			this.iHeaderTitleHeight = this._$headerTitle.is(":visible") ? this._$headerTitle.height() : 0;

			//adjust headerTitleStickied ----------------------------
			$headerTitleClone.addClass("sapUxAPObjectPageHeaderStickied");
			$headerTitleClone.appendTo(sap.ui.getCore().getStaticAreaRef());

			this.iHeaderTitleHeightStickied = $headerTitleClone.height();
		}

		//clean dom
		$headerTitleClone.remove();

		//adjust dom element directly depending on the adjusted height
		// Adjust wrapper top position
		this._$opWrapper.css("padding-top", this.iHeaderTitleHeight);
		this._adjustHeaderBackgroundSize();

		jQuery.sap.log.info("ObjectPageLayout :: adjustHeaderHeight", "headerTitleHeight: " + this.iHeaderTitleHeight + " - headerTitleStickiedHeight: " + this.iHeaderTitleHeightStickied + " - headerContentHeight: " + this.iHeaderContentHeight);
	}
	else {
		jQuery.sap.log.debug("ObjectPageLayout :: adjustHeaderHeight", "skipped as the objectPageLayout is being rendered");
	}
};

/**
 * The the layout data to apply to a header cluster
 * called from the renderer
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._getLayoutDataForControl = function (oControl) {
	var oLayoutData = oControl.getLayoutData();

	if (!oLayoutData) {
		return undefined;
	} else if (oLayoutData instanceof sap.uxap.ObjectPageHeaderLayoutData) {
		return oLayoutData;
	} else if (oLayoutData.getMetadata().getName() == "sap.ui.core.VariantLayoutData") {
		// multiple LayoutData available - search here
		var aLayoutData = oLayoutData.getMultipleLayoutData();
		for (var i = 0; i < aLayoutData.length; i++) {
			var oLayoutData2 = aLayoutData[i];
			if (oLayoutData2 instanceof sap.uxap.ObjectPageHeaderLayoutData) {
				return oLayoutData2;
			}
		}
	}

	return undefined;
};

/**
 * Retrieve the current header design that was defined in the headerTitle if available
 *
 * @private
 */
sap.uxap.ObjectPageLayout.prototype._getHeaderDesign = function () {
	var oHeader = this.getHeaderTitle();
	var sDesign = sap.uxap.ObjectPageHeaderDesign.Light;
	if (oHeader != null) {
		sDesign = oHeader.getHeaderDesign();
	}
	return sDesign;
};

}; // end of sap/uxap/ObjectPageLayout.js
if ( !jQuery.sap.isDeclared('sap.uxap.ObjectPageSection') ) {
/*!
 * SAP.${maven.build.timestamp} UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 * 		2009-2014 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.uxap.ObjectPageSection.
jQuery.sap.declare("sap.uxap.ObjectPageSection");




/**
 * Constructor for a new ObjectPageSection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowTitle showTitle} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSubSections subSections} <strong>(default aggregation)</strong> : sap.uxap.ObjectPageSubSection[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.uxap.ObjectPageSectionBase#constructor sap.uxap.ObjectPageSectionBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A Section in the ObjectPage layout is a container for Objectpage Subsections
 * @extends sap.uxap.ObjectPageSectionBase
 * @version 1.28.0
 *
 * @constructor
 * @public
 * @name sap.uxap.ObjectPageSection
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.uxap.ObjectPageSectionBase.extend("sap.uxap.ObjectPageSection", { metadata : {

	library : "sap.uxap",
	properties : {
		"showTitle" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "subSections",
	aggregations : {
		"subSections" : {type : "sap.uxap.ObjectPageSubSection", multiple : true, singularName : "subSection"}
	}
}});


/**
 * Creates a new subclass of class sap.uxap.ObjectPageSection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.uxap.ObjectPageSection.extend
 * @function
 */


/**
 * Getter for property <code>showTitle</code>.
 * Display the section title or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showTitle</code>
 * @public
 * @name sap.uxap.ObjectPageSection#getShowTitle
 * @function
 */

/**
 * Setter for property <code>showTitle</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowTitle  new value for property <code>showTitle</code>
 * @return {sap.uxap.ObjectPageSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSection#setShowTitle
 * @function
 */


/**
 * Getter for aggregation <code>subSections</code>.<br/>
 * 
 * <strong>Note</strong>: this is the default aggregation for ObjectPageSection.
 * @return {sap.uxap.ObjectPageSubSection[]}
 * @public
 * @name sap.uxap.ObjectPageSection#getSubSections
 * @function
 */


/**
 * Inserts a subSection into the aggregation named <code>subSections</code>.
 *
 * @param {sap.uxap.ObjectPageSubSection}
 *          oSubSection the subSection to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subSection should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subSection is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subSection is inserted at 
 *             the last position        
 * @return {sap.uxap.ObjectPageSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSection#insertSubSection
 * @function
 */

/**
 * Adds some subSection <code>oSubSection</code> 
 * to the aggregation named <code>subSections</code>.
 *
 * @param {sap.uxap.ObjectPageSubSection}
 *            oSubSection the subSection to add; if empty, nothing is inserted
 * @return {sap.uxap.ObjectPageSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSection#addSubSection
 * @function
 */

/**
 * Removes an subSection from the aggregation named <code>subSections</code>.
 *
 * @param {int | string | sap.uxap.ObjectPageSubSection} vSubSection the subSection to remove or its index or id
 * @return {sap.uxap.ObjectPageSubSection} the removed subSection or null
 * @public
 * @name sap.uxap.ObjectPageSection#removeSubSection
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>subSections</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.uxap.ObjectPageSubSection[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.uxap.ObjectPageSection#removeAllSubSections
 * @function
 */

/**
 * Checks for the provided <code>sap.uxap.ObjectPageSubSection</code> in the aggregation named <code>subSections</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.uxap.ObjectPageSubSection}
 *            oSubSection the subSection whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.uxap.ObjectPageSection#indexOfSubSection
 * @function
 */
	

/**
 * Destroys all the subSections in the aggregation 
 * named <code>subSections</code>.
 * @return {sap.uxap.ObjectPageSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.uxap.ObjectPageSection#destroySubSections
 * @function
 */

// Start of sap/uxap/ObjectPageSection.js
sap.uxap.ObjectPageSection.prototype.connectToModels = function () {
	var aSubSections = this.getSubSections();
	if (aSubSections != null) {
		jQuery.each(aSubSections, function (iSubSectionIdx, oSubSection) {
			oSubSection.connectToModels();
		});
	}
};
}; // end of sap/uxap/ObjectPageSection.js
if ( !jQuery.sap.isDeclared('sap.uxap.component.ObjectPageLayoutUXDrivenFactory.controller') ) {
  jQuery.sap.declare('sap.uxap.component.ObjectPageLayoutUXDrivenFactory.controller');
/*global jQuery: false, sap: false, cus: false*/
(function () {
	'use strict';
	
	
	jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained

	jQuery.sap.require('sap.ui.model.BindingMode'); // unlisted dependency retained


	sap.ui.controller("sap.uxap.component.ObjectPageLayoutUXDrivenFactory", {

		/**
		 * injects the header based on configuration
		 * @param {object} oModel
		 */
		connectToComponent: function (oModel) {

			var bHasPendingRequest = jQuery.isEmptyObject(oModel.getData());

			//ensure a 1 way binding otherwise it cause any block property change to update the entire subSections
			oModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneWay);

			var fnHeaderFactory = jQuery.proxy(function () {

				if (bHasPendingRequest) {
					oModel.detachRequestCompleted(fnHeaderFactory);
				}

				var oHeaderTitleContext = new sap.ui.model.Context(oModel, "/headerTitle"),
					oObjectPageLayout = this.getView().byId("ObjectPageLayout");

				//create the header title if provided in the config
				if (oHeaderTitleContext.getProperty("")) {
					try {
						//retrieve the header class
						this._oHeader = this.controlFactory(oObjectPageLayout.getId(), oHeaderTitleContext);
						oObjectPageLayout.setHeaderTitle(this._oHeader);
					}
					catch (sError) {
						jQuery.sap.log.error("ObjectPageLayoutFactory :: error in header creation from config: " + sError);
					}
				}

			}, this);

			//if data are not there yet, we wait for them
			if (bHasPendingRequest) {
				oModel.attachRequestCompleted(fnHeaderFactory);
			}
			//otherwise we apply the header factory immediately
			else {
				fnHeaderFactory();
			}
		},

		/**
		 * generates a control to be used in actions, blocks or moreBlocks aggregations
		 * known issue: bindings are not applied, the control is built with data only
		 * @param {string} sParentId
		 * @param {object} oBindingContext
		 * @returns {*}
		 */
		controlFactory: function (sParentId, oBindingContext) {
			var oControlInfo = oBindingContext.getProperty(""), oControl, oControlClass, oControlMetadata;

			try {
				//retrieve the block class
				jQuery.sap.require(oControlInfo.Type);
				oControlClass = jQuery.sap.getObject(oControlInfo.Type);
				oControlMetadata = oControlClass.getMetadata();

				//pre-processing: substitute event handler as strings by their function instance
				jQuery.each(oControlMetadata._mAllEvents, jQuery.proxy(function (sEventName, oEventProperties) {
					if (typeof oControlInfo[sEventName] == "string") {
						oControlInfo[sEventName] = this.convertEventHandler(oControlInfo[sEventName]);
					}
				}, this));

				//creates the control with control info = create with provided properties
				oControl = sap.ui.base.ManagedObject.create(oControlInfo);

				//post-processing: bind properties on the objectPageLayoutMetadata model
				jQuery.each(oControlMetadata._mAllProperties, jQuery.proxy(function (sPropertyName, oProperty) {
					if (oControlInfo[sPropertyName]) {
						oControl.bindProperty(sPropertyName, "objectPageLayoutMetadata>" + oBindingContext.getPath() + "/" + sPropertyName);
					}
				}, this));
			}
			catch (sError) {
				jQuery.sap.log.error("ObjectPageLayoutFactory :: error in control creation from config: " + sError);
			}

			return oControl;
		},

		/**
		 * determine the static function to use from its name
		 * @param {string} sStaticHandlerName
		 * @returns {*|window|window}
		 */
		convertEventHandler: function (sStaticHandlerName) {

			var fnNameSpace = window, aNameSpaceParts = sStaticHandlerName.split('.');

			try {
				jQuery.each(aNameSpaceParts, function (iIndex, sNameSpacePart) {
					fnNameSpace = fnNameSpace[sNameSpacePart];
				});
			}
			catch (sError) {
				jQuery.sap.log.error("ObjectPageLayoutFactory :: undefined event handler: " + sStaticHandlerName + ". Did you forget to require its static class?");
				fnNameSpace = undefined;
			}

			return fnNameSpace;
		}
	});
})();



}; // end of sap/uxap/component/ObjectPageLayoutUXDrivenFactory.controller.js
