// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * @copyright@
 */

/**
* Constructor for the App Controller
* @since 1.16
* constructor
* Is the controller for the App View and is responsible 
* for creating and setting a page for the ui5 none-split
* app. This page will display the JAM Feed Widget.
* class App Controller<br>
* 
* Is the controller for the App View and is responsible 
* for creating and setting a page for the ui5 none-split
* app. This page will display the JAM Feed Widget.
* 
* name sap.collaboration.components.fiori.feed.app.AppController
* @private
*/
sap.ui.controller("sap.collaboration.components.fiori.feed.app.App", 
	/* @lends sap.collaboration.components.fiori.feed.app.AppController */{

	/**
	* Called when a controller is instantiated and its View controls (if available) are already created (inherited).<br>
	* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	* It initialize class variables.
	* @private
	*/
	onInit: function() {
		this.oApp = this.getView().oApp;
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.sAppType = this.getView().getViewData().appType;
		this.sFeedType = this.getView().getViewData().feedType;
		this.sGroupIds = this.getView().getViewData().groupIds;
		this.oBusinessObject = this.getView().getViewData().object;
	},

	/**
	* This hook is invoked before the controller's View is re-rendered (inherited).<br>
	* It calls the initializeUtils() and the createDetailPage() functions.
	* @private
	*/
	onBeforeRendering: function() {
		try{
			this.initializeUtils();
			this.createDetailPage();
		}catch(oError){	
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.app.App.controller.onBeforeRendering()");
			this.oCommonUtil.displayError();
		}
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
/**
 * Initializes an object from the sap.collaboration.components.utils.OdataUtil class.
 * @private
 */
	initializeUtils : function() {
		if(!this.oODataUtil){
			this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		}
		if(!this.oCommonUtil){
			this.oCommonUtil = this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		}
	},
	
	/**
	 * Creates and sets a page for the app. This page is the detail view.
	 * @private
	 */
	createDetailPage : function() {
		try{			
			/*if (this.sAppType === sap.collaboration.AppType.widget){
				this.getGroupIds();
			}*/
			var sViewId = this.sPrefixId + "detailView";
			
			if(!this.oApp.getPage(sViewId)){
				this.initOData();
				var oDetailView = sap.ui.view({
					id: sViewId, 
					viewData : {
						controlId: this.sPrefixId,
						jamURL:	this.sJamUrl,
						jamToken: this.sJamToken,
						appType: this.sAppType,
						feedType: this.sFeedType,
						groupIds: this.sGroupIds,
						object: this.oBusinessObject,
						langBundle: this.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
				});
				
				this.oApp.addPage(oDetailView); 
				this.oApp.setInitialPage(oDetailView); 
			}
		} catch(oError){				
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.app.App.controller.createDetailPage()");
			throw oError;
		}
	},
	
	/**
	 * Gets the IDs of the JAM groups belonging to a user or the IDs of the JAM groups belonging to a user and related to a context in a back-end system.
	 * In case the feed type is "group" and the groups IDs are not set by the developer, it gets all the JAM groups belonging to a user.
	 * In case the feed type is "context" and the groups IDs are not set by the developer, it gets JAM groups belonging to a user and related to a context 
	 * at the same time.
	 * In case the feed type is "context" and the groups IDs are set by the developer, it gets JAM groups belonging to a user and related to a context at 
	 * the same time and uses them to filter the IDs set by the developer.
	 * @private
	 */
	getGroupIds : function() {
		var aGroupData;
		if (this.sFeedType === sap.collaboration.FeedType.group && (this.sGroupIds === undefined || this.sGroupIds === "")){
			aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups");
			this.sGroupIds = this.oODataUtil.getGroupIds(aGroupData);
		}
		else if (this.sFeedType === sap.collaboration.FeedType.objectGroup && (this.sGroupIds === undefined || this.sGroupIds === "")){
		    aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
		    this.sGroupIds = this.oODataUtil.getGroupIds(aGroupData);
		}
		else if (this.sFeedType === sap.collaboration.FeedType.objectGroup && !(this.sGroupIds === undefined || this.sGroupIds === "")){
			aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
			var sContextRelatedGroupsId = this.oODataUtil.getGroupIds(aGroupData);
			this.sGroupIds = this.filterGroupIds(sContextRelatedGroupsId);
		}
	},
	
	/**
	 *Filter the JAM groups IDs set by the developer using the context related JAM groups IDs.
	 * @param {string} sContextRelatedGroupsId
	 * @private
	 */
	filterGroupIds : function(sContextRelatedGroupIds) {
		var sGroupIds;
		var aContextRelatedGroupIds = sContextRelatedGroupIds.split(",");
		var aInputGroupIds = this.sGroupIds.split(",");
		
		for(var i=0; i<aInputGroupIds.length; i++){
			if(aContextRelatedGroupIds.indexOf(aInputGroupIds[i]) === -1){
				aInputGroupIds.splice(i,1);
				i = i - 1;
			}
		}
		
		if (aInputGroupIds.length !== 0){
			sGroupIds = aInputGroupIds.join();
		} else{
			sGroupIds = "";
		}
		
		return sGroupIds;
	},
	
	/**
	 * Initialize OData.
	 * @private
	 */
	initOData: function(){
		var self = this;
		var aBatchRequests = [];
		var bAsync = false;
		
		var fnParseBatchResults = function(aBatchResults){
			self.parseBatchResults(aBatchResults);
		};
		
		var fnBatchErrorCallback = function(oErrorBatchFailed){
        	jQuery.sap.log.error(oErrorBatchFailed, "", "sap.collaboration.components.fiori.feed.dialog.Component.initOdata(), fnBatchErrorCallback()");
        	throw oErrorBatchFailed;
		};
		
		try{
			aBatchRequests = this.createBatchRequests();
			this.oODataUtil.executeODataBatchRequest(this.oOdataModel, aBatchRequests, fnParseBatchResults, bAsync, fnBatchErrorCallback);				
		} catch(oInitOdataError){				
			jQuery.sap.log.error(oInitOdataError, "", "sap.collaboration.components.fiori.feed.app.App.controller.initOdata()");
			throw oInitOdataError;
		}	
	},
	
	/**
	 * Creates batch requests for the different feed types.
	 * @return {array} aBatchRequests - An array of batch requests
	 * @throws {error} oErrorObjectUndefined Error thrown when one of the batch requests is not successfully created
	 * @private
	 */
	createBatchRequests : function(){
		var self = this;
		var aBatchRequests = [];
		
		try{
			//1) General batch requests, regardless of the feed type.
			if(!self.sJamUrl){
				aBatchRequests.push(self.oODataUtil.createJamUrlBatchOperation(self.oOdataModel));
			}
			aBatchRequests.push(self.oODataUtil.createJamTokenBatchOperation(self.oOdataModel));
			
			//2) Batch requests specific to the feed type.
			switch(self.sFeedType){
				case sap.collaboration.FeedType.object:
					aBatchRequests = aBatchRequests.concat(self.createExternalUrlBatchRequest(self.oODataUtil, self.oBusinessObject));
					break;
				case sap.collaboration.FeedType.group:
					aBatchRequests.push(self.oODataUtil.createGetGroupsDataBatchOperation(self.oOdataModel));
					break;
				case sap.collaboration.FeedType.objectGroup:
					aBatchRequests.push(self.createObjectGroupBatchRequest(self.oODataUtil, self.oBusinessObject));
					break;
			}
		} catch(oCreateBatchRequestsError){
			jQuery.sap.log.error(oCreateBatchRequestsError, "", "sap.collaboration.components.fiori.feed.app.App.controller.createBatchRequests()");
			throw oCreateBatchRequestsError;
		}
		
		return aBatchRequests;
	},

	/**
	 * Create a batch request to get the external URL mapping for a business object
	 * @param {sap.collaboration.components.utils.OdataUtil} oODataUtil An object containing a reference to the OData Util Class
	 * @param {object} oBusinessObject a Business Object containing the URLs that need to be mapped
	 * @return {array} aBatchOperations an array containing the batch operations
	 * @private
	 */
	createExternalUrlBatchRequest: function(oODataUtil, oBusinessObject){
		var self = this;
		var aBatchOperations = [];
		
		if(oODataUtil && oBusinessObject){
			if(oBusinessObject.id){
				aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.id));
			}
			if(oBusinessObject.type){
				aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.type));
			}				
		}
		
		return aBatchOperations;
	},
	
	/**
	 * Creates a batch request to get the groups assigned to business objects in the back-end
	 * @param {sap.collaboration.components.utils.OdataUtil} oODataUtil An object containing a reference to the OData Util Class
	 * @param {object} oBusinessObject a Business Object containing the URLs that need to be mapped
	 * @return {object} oBatchRequest a batch request to get the object groups
	 * @throws {error} oErrorObjectGroupBatchRequest Error thrown when the batch request cannot be created due to missing parameters (OData Util is missing, business object is undefined or its property id is missing)
	 */
	createObjectGroupBatchRequest: function(oODataUtil, oBusinessObject){
		var self = this;
		var oBatchRequest;
		
		if(oODataUtil && oBusinessObject && oBusinessObject.id){
			oBatchRequest = oODataUtil.createGetObjectGroupsBatchOperation(self.oOdataModel, oBusinessObject.id);
		}else{
			var oErrorObjectGroupBatchRequest = new Error("Missing parameters. Cannot create a batch request for Object Group.");
        	jQuery.sap.log.error(oErrorObjectGroupBatchRequest, "", "sap.collaboration.components.fiori.feed.app.App.controller.createObjectGroupBatchRequest()");
        	throw oErrorObjectGroupBatchRequest;
		}
		
		return oBatchRequest;
	},
	
	/**
	 * Callback function to parse the results from the batch request.<br>
	 * Assumption: the results are returned in the same order as the requests.<br>
	 * The values from the batch results will be assigned to member variables to be used later when the Feed View is created.
	 * @param {array} aBatchResults An array containing the batch results to be parsed
	 * @throws {error} an error when parsing the results
	 * @private
	 */
	parseBatchResults: function(aBatchResults){
		var self = this;
		var i = 0;
			
		if(!self.sJamUrl){
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.sJamUrl = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetCollaborationHostUrl].Url;
			}
			i++;
		}
		
		if(aBatchResults[i].error){
			throw new Error(aBatchResults[i].error);
		} else {
			self.sJamToken = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetSingleUseToken].Id;
		}
		i++;
		
		if(self.sFeedType == sap.collaboration.FeedType.object){
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.id = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.odata_url = self.oBusinessObject.id;
			}
			i++;
			
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.type = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.metadata_url = self.oBusinessObject.type;
			}
		} else if(self.sFeedType == sap.collaboration.FeedType.group || self.sFeedType == sap.collaboration.FeedType.objectGroup){
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				var backEndGroupIds = self.oODataUtil.getGroupIds(aBatchResults[i].results);
				if(!self.sGroupIds){
					self.sGroupIds = backEndGroupIds;
				} else {
					self.sGroupIds = self.filterGroupIds(backEndGroupIds);
				}
			}
		}
	}
	
});
/*!
 * @copyright@
 */

/**
* Is a view that displays the ui for a ui5 none-split app.
* This app will contain a page that will display the JAM
* Feed Widget
* class App View
* name sap.collaboration.components.fiori.feed.app.AppView
* @since 1.16
* @private
*/
sap.ui.jsview("sap.collaboration.components.fiori.feed.app.App", 
	/* @lends sap.collaboration.components.fiori.feed.app.AppView */{

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.app.App";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates/returns a UI5 app
	* @param {sap.ui.controller} oController The view Controller  
	* @private
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oApp = new sap.m.App(this.sPrefixId + "app");
		return this.oApp;
	}

});
/*!
 * @copyright@
 */

/**
* Detail View
*
* Is a view that displays the ui for a ui5 page. This page
* will display the JAM Feed Widget
* class Detail View
* name sap.collaboration.components.fiori.feed.commons.DetailView
* @since 1.16
* @private
*/
sap.ui.jsview("sap.collaboration.components.fiori.feed.commons.Detail", 
	/* @lends sap.collaboration.components.fiori.feed.commons.DetailView */{

	/** 
	* Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.commons.Detail";
	},

	/** 
	* Is the place where the UI is constructed (inherited).<br> 
	* It is initially called once after the Controller has been instantiated.
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates a UI5 page with a scroll container.
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		var oLangBundle = this.getViewData().langBundle;
		this.sPrefixId  = this.getViewData().controlId;
		
		this.oDetailPage = new sap.m.Page(this.sPrefixId + "feedDetailsPage",{
			title: oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS"),
			enableScrolling: false,
			content: [
						new sap.m.ScrollContainer(this.sPrefixId + "widgetContainer",{
							width: "100%",
							height: "100%",
							horizontal: false,
							vertical: false
						}) 
			]
		});
		
 		return this.oDetailPage;
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* FeedTypeMaster View Controller
*
* Is the controller for the FeedTypeMaster View and is 
* responsible for creating JAM Feed Widget and for 
* navigating to other master pages
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initialize class variables.
* @private
*/
	onInit: function() {
		this.sJamToken = this.getView().getViewData().jamToken;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oBusinessObject = this.getView().getViewData().object;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @private
*/
//	onBeforeRendering: function() {
//
//	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
	/**
	 * Handler for the list item press event
	 * This handler display the widget in case of feed type is "follows" or "company" by calling getJamWidget function
	 * Or it navigates to the Group Master Page in case the feed type in other that the above by calling navigateToGroupMaster
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	listItemPress : function(sFeedType) {
		if (sFeedType === sap.collaboration.FeedType.follows || sFeedType === sap.collaboration.FeedType.company){
			this.getJamWidget(sFeedType);
			this.setDetailPageTitle(sFeedType);
		} else{
			this.navigateToGroupMaster(sFeedType);
		}
	},
	
	/**
	 * Display the widget
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	getJamWidget : function(sFeedType){
		var oJamUtil = new sap.collaboration.components.utils.JamUtil();
		var oWidgetData = oJamUtil.prepareWidgetData(this.sJamToken, sFeedType, "", this.oBusinessObject);
		oJamUtil.createJamWidget(this.sPrefixId + "widgetContainer", oWidgetData);
	},
	
	/**
	 * Sets the detail page title
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	setDetailPageTitle : function(sFeedType){	
		var sDetailPageTitle;
		   sFeedType === sap.collaboration.FeedType.follows?		sDetailPageTitle = this.getView().oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS") 
	   					  		  :  	sDetailPageTitle = this.getView().oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_COMPANY");
		   sap.ui.getCore().byId(this.sPrefixId + "feedDetailsPage").setTitle(sDetailPageTitle);
   },

   /**
	 * Navigates the split app master page to to the Group Master View
	 * And creates the navigation data by calling the createNavigationData function
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
   navigateToGroupMaster : function(sFeedType) {
	   var oNavData = this.createNavigationData(sFeedType);
	   
	   sap.ui.getCore().getEventBus().publish("nav", "to", oNavData);
	},
	
	/**
	 * Creates the navigation data
	 * @param {string} sFeedType The feed type for the widget
	 * @private
	 */
	createNavigationData : function(sFeedType) {
		var oData;
		sFeedType === sap.collaboration.FeedType.group? 
				oData = {
							viewName: "sap.collaboration.components.fiori.feed.splitApp.GroupMaster",
							viewId: this.sPrefixId + "groupMasterView",
				   			data: {
				   					feedType: sap.collaboration.FeedType.group, 
				   					lanBundle: this.getView().oLangBundle, 
				   					groupMasterPageTitle: this.getView().oLangBundle.getText("GROUP_MASTER_PAGE_GROUP_TITLE")
				   			}
			   			} 
				: 
				oData = {
							viewName: "sap.collaboration.components.fiori.feed.splitApp.GroupMaster",
							viewId: this.sPrefixId + "groupMasterView",
				   			data: {
				   					feedType: sap.collaboration.FeedType.object, 
				   					lanBundle: this.getView().oLangBundle, 
				   					groupMasterPageTitle: this.getView().oLangBundle.getText("GROUP_MASTER_PAGE_BO_TITLE")
				   			}
						};
			   					
		return oData;
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* FeedTypeMaster View
*
* Is a view that displays the ui for a ui5 page.
* This page will contain a list of Feed Types
* It will be used as a mater page for the ui5 split app
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* @param {sap.ui.controller} oController The view Controller  
	* It creates a page with a list of feed types.
	* @private
	*/ 
	createContent : function(oController) {
		
		this.oLangBundle = this.getViewData().langBundle;
		this.sPrefixId  = this.getViewData().controlId;
		
 		return new sap.m.Page(this.sPrefixId + "feedTypePage", {
			title: this.oLangBundle.getText("FEED_MASTER_PAGE_TITLE"),
			content: [
						new sap.m.List(this.sPrefixId + "FeedTypes", 
							{
								//mode: sap.m.ListMode.SingleSelectMaster,
								inset: true,
								items: [
							         	new sap.m.StandardListItem({
							         		title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_FOLLOWS"),
											type : sap.m.ListType.Active,
											selected: true,
											press : function(){
												oController.listItemPress("follows");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_COMPANY"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("company");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_GROUP"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("group");
											}
										}),
										new sap.m.StandardListItem({
											title : this.oLangBundle.getText("FRV_DOMAIN_DATA_FEED_TYPES_BO"),
											type : sap.m.ListType.Active,
											press : function(){
												oController.listItemPress("context");
											}
										})
                                     ]})
			]
		});
	}

});
/*!
 * @copyright@
 */

/*******************************************************
* GroupMaster View Controller
*
* Is the controller for the GroupMaster View and is 
* responsible for setting the view data model, for
* binding data to the group list and for navigating to 
* a previous master page
********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.GroupMaster", {
	
/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables.
* @private
*/
	onInit: function() {
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oBusinessObject = this.getView().getViewData().object;
		this.sFeedType = this.getView().getViewData().feedType;
		this.sPageTitle = this.getView().getViewData().pageTitle;
		this.sJamToken = this.getView().getViewData().jamToken;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId  = this.getView().getViewData().controlId;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* It binds data to the groups list.
* @private
*/
	onBeforeRendering: function() {
		var self = this;
		this.getView().groupMasterPage.setTitle(this.sPageTitle);
		
		this.initializeUtils();
		this.setViewModel();
		
		var oStandardListItem = new sap.m.StandardListItem();
		oStandardListItem.bindProperty("title", "Name");
		oStandardListItem.setType(sap.m.ListType.Active);
		oStandardListItem.attachPress(function(){
			var sGroupId = this.getBindingContext().getProperty(this.getBindingContext().getPath()).Id;
			var sGroupName = this.getBindingContext().getProperty(this.getBindingContext().getPath()).Name;
			var oWidgetData = self.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupId);
			self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
			sap.ui.getCore().byId(self.sPrefixId + "feedDetailsPage").setTitle(sGroupName);
			
		});
		sap.ui.getCore().byId(this.sPrefixId + "groupsList").bindItems("/groupsData", oStandardListItem);
		
		var oStandardListItem_AllGroups = 
			new sap.m.StandardListItem({title: this.oLangBundle.getText("GROUP_MASTER_LIST_All_GROUPS")});
		oStandardListItem_AllGroups.setType(sap.m.ListType.Active);
		oStandardListItem_AllGroups.attachPress(function(){
			var sGroupIds = self.oODataUtil.getGroupIds(self.aGroupData);
			var oWidgetData = self.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupIds);
			self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
			sap.ui.getCore().byId(self.sPrefixId + "feedDetailsPage").setTitle(self.oLangBundle.getText("GROUP_MASTER_LIST_All_GROUPS"));
		});
		sap.ui.getCore().byId(this.sPrefixId + "groupsList").insertItem(oStandardListItem_AllGroups,0);
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
	onAfterRendering: function() {
	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
/**
 * Initializes an object from the sap.collaboration.components.utils.OdataUtil class
 * and an object from the sap.collaboration.components.utils.JamUtil class
 * @private
 */
	initializeUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
	},
	
/**
 * Sets the data model to the view
 * @private
 */
	setViewModel : function() {
		this.aGroupData;
		this.sFeedType === sap.collaboration.FeedType.group?
				this.aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/Groups")
			    :
		    	this.aGroupData = this.oODataUtil.getGroupsData(this.oOdataModel, "/BusinessObjects('" + this.oBusinessObject.id + "')/AssignedGroups");
			
	   	this.oViewData = {
			groupsData:	this.aGroupData
		};
	   	
	   	this.oViewModel = new sap.ui.model.json.JSONModel(this.oViewData);
		this.getView().setModel(this.oViewModel);
			
	},
	
/**
 * Handler for the "showNavButton" press event
 * @private
 */
	onNavButtonTap : function() {
		sap.ui.getCore().getEventBus().publish("nav", "back");
	}
	
});
/*!
 * @copyright@
 */

/*******************************************************
* GroupMaster View
*
* Is a view that displays the ui for a ui5 page.
* This page will contain a list of JAM groups
* It will be used as a mater page for the ui5 split app
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.GroupMaster", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.GroupMaster";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates a UI5 page that has a list. 
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		
		this.sPrefixId  = this.getViewData().controlId;
		
		this.groupMasterPage = 
			new sap.m.Page(this.sPrefixId  + "groupPage", {
				title: this.getViewData().groupMasterpageTitle,
				showNavButton : true,
				navButtonPress: oController.onNavButtonTap,
				content: [
				          	new sap.m.List(this.sPrefixId + "groupsList",{inset: true})
				          ]
		});
		
		return this.groupMasterPage;
	}

});
/*!
 * @copyright@
 */

/*************************************************************
* SplitApp View Controller
*
* Is the controller for the SplitApp View and is responsible 
* for creating and setting the master and detail pages for 
* the ui5 split app and for registering the navigation events
**************************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.splitApp.SplitApp", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables and registers event handlers for the navigation.
* @private
*/
	onInit: function() {
		this.oSplitApp = this.getView().oSplitApp;
		this.sAppType = this.getView().getViewData().appType;
		this.oOdataModel = this.getView().getViewData().odataModel;
		this.oBusinessObject = this.getView().getViewData().object;
		this.oLangBundle = this.getView().getViewData().langBundle;
		
		this.sPrefixId = this.getView().getViewData().controlId;
		
		this.oEventBus = sap.ui.getCore().getEventBus();
		this.oEventBus.subscribe("nav", "to", this.navToHandler, this);
		this.oEventBus.subscribe("nav", "back", this.navBackHandler, this);
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered.
* (NOT before the first rendering! onInit() is used for that one!).
* It calls the createMasterDetail() function. Please refer to this function for the JSDoc.
* @private
*/
	onBeforeRendering: function() {
		this.createMasterDetail();
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @private
*/
//	onAfterRendering: function() {
//
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @private
*/
//	onExit: function() {
//
//	}
	
/**
 * Creates and sets the master and detail pages for the split app.
 * The master page on initial load will be the Feed Type Master View.
 * The detail page will be the Detail View.
 * @private
 */
	createMasterDetail : function() {
		
		var oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		var sJamUrl = oODataUtil.getJamUrl(this.oOdataModel);
		this.sJamToken = oODataUtil.getJamToken(this.oOdataModel);
		
		var oMasterView = sap.ui.view({
			id: this.sPrefixId + "masterView", 
			viewData : {
				controlId: this.sPrefixId,
				jamToken: this.sJamToken,
				langBundle: this.oLangBundle,
				object: this.oBusinessObject
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster"
		});
		
		var oDetailView = sap.ui.view({
			id: this.sPrefixId + "detailView", 
			viewData : {
				controlId: this.sPrefixId,
				appType: this.sAppType,
				jamURL:	sJamUrl,
				jamToken: this.sJamToken,
				langBundle: this.oLangBundle,
				object: this.oBusinessObject
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
		});
		
		this.oSplitApp.addDetailPage(oDetailView); 
		this.oSplitApp.addMasterPage(oMasterView);
		this.oSplitApp.setInitialDetail(oDetailView); 
		this.oSplitApp.setInitialMaster(oMasterView);
	},
	
/**
 * Handler for the "navigate to" event.
 * This handler creates the Group Master View in case it was not previously created and add it to the master page of the split app.
 * @param {string} sChannelId The ID for the Navigation channel.
 * @param {string} sEventId The ID of the Event.
 * @param {object} oData The navigation data.
 * @private
 */
	navToHandler : function(sChannelId, sEventId, oData) {
        if (oData && oData.viewId === this.sPrefixId + "groupMasterView") {
        	if (!sap.ui.getCore().byId(oData.viewId)) {
				var oView = sap.ui.view({
					id: oData.viewId, 
					viewData : {
						controlId: this.sPrefixId,
						odataModel:  this.oOdataModel,
						object:	this.oBusinessObject,
						feedType: oData.data.feedType,
						pageTitle: oData.data.groupMasterPageTitle,
						jamToken: this.sJamToken,
						langBundle: this.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: oData.viewName
				});
				
				this.oSplitApp.addMasterPage(oView);
			} 
        	else{
        		// the rerender() will not create the content of the view again or call the init of the controller, it will only start from calling the onBeforeRendering()
        		// it is needed so that the group list is rebound again with the groups in case we switch from groups to bo groups or in case the data changes on the backend
        		// ie to get always the latest data (groups)
        		sap.ui.getCore().byId(oData.viewId).getController().sFeedType = oData.data.feedType;
        		sap.ui.getCore().byId(oData.viewId).getController().sPageTitle = oData.data.groupMasterPageTitle;
        		sap.ui.getCore().byId(oData.viewId).rerender();
        	}
        	this.oSplitApp.to(oData.viewId);
        } else {
            jQuery.sap.log.error("nav-to event cannot be processed. Invalid data: " + oData);
        }
    },

/**
 * Handler for the "navigate back" event.
 * It navigates back to the previous master page.
 * @private
 */
    navBackHandler : function() {
        this.oSplitApp.backMaster();
    }

});
/*!
 * @copyright@
 */

/*******************************************************
* SplitApp View
*
* Is a view that displays the ui for a ui5 split app.
* This split app will contain a master page and a detail
* page. The master page will display either a list of 
* Feed Types or a list of JAM groups. The detail page
* will display the JAM Feed WIdget
********************************************************/

sap.ui.jsview("sap.collaboration.components.fiori.feed.splitApp.SplitApp", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.feed.splitApp.SplitApp";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away. 
	* It creates a UI5 split app
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oSplitApp = new sap.m.SplitApp(this.sPrefixId + "splitApp");
		return this.oSplitApp;
	}

});
/*!
 * @copyright@
 */

sap.ui.controller("sap.collaboration.components.fiori.sharing.FolderSelection", {
	
	constants:{
		top: 20
	},
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * Initialize class variables, set the view model and bind the list items
	 * memberOf DisplayFolders
	 */
	onInit: function() {
		this.oLangBundle = this.getView().getViewData().languageBundle;
		
		this.oODataModel = this.getView().getViewData().oDataModel;
		this.oODataUtil = this.getView().getViewData().oDataUtil;
		
		this.sGroupId =  this.getView().getViewData().groupId;
		this.oFolderSelectionDialog = this.getView().getViewData().folderSelectionDialog; //needed to change the headerbar
		
		this.sCurrentFolderId='';
		this.aFolderBuffer = [];
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
*/
	onBeforeRendering: function() {
		this.refreshFolderSelection(this.sCurrentFolderId);
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
*/
	onAfterRendering: function() {
	},
	/**
	 * Rebuilds the displayed folder list 
	 * @private
	 */
	refreshFolderSelection: function(sCurrentFolderId){
		// Build new list and replace it in the dialog
		var aFolders = this.buildFolderList(sCurrentFolderId);
		this.setViewModel(aFolders);
		this.bindFoldersList();
		this.refreshHeaderBar(sCurrentFolderId);
				
	},
	/**
	 * Fetch the folders to be displayed 
	 * @private
	 */
	buildFolderList: function(sFolderId){
		var aSubFolders = [];
		

		var oFolder = this.getFolder(sFolderId);
		aSubFolders = this.getSubFolders(oFolder);
		
		// add empty folder items so that the number of folders in the list is displayed correctly
		if(oFolder.subFolderCount > aSubFolders.length){
			var difference = oFolder.subFolderCount - aSubFolders.length;
			for(var i=0; i<difference; i++){
				aSubFolders.push({});
			}
		}
		return aSubFolders;
	},
	/**
	* Sets the view model with the passed folders
	* @private
	*/
	setViewModel : function(aFolders) {
		
	   	this.oViewData = {
   			folders: aFolders
		};
	   	
	   	this.oViewModel = new sap.ui.model.json.JSONModel(this.oViewData);
		this.getView().setModel(this.oViewModel);
	},
	/**
	* Binds data to the folders List
	* @private
	*/
	bindFoldersList : function() {
		var self = this;
		var oItemTemplateStandardIcon = new sap.m.StandardListItem({
			title : "{name}",
			icon : "{icon}",
			type : sap.m.ListType.Navigation,
			press: self.selectFolder()
		});
		this.getView().oFoldersList.bindAggregation("items","/folders", oItemTemplateStandardIcon);
	},
	/**
	 * Refreshes the header bar (title, back button visibility)
	 * @private
	 */
	refreshHeaderBar: function(sFolderId){
		// Set Dialog
		if(!sFolderId == ""){		// Folder
			var oFolder = this.getFolder(sFolderId);
			this.setFolderSelectionDialogTitle(oFolder.name);
			this.setFolderSelectionDialogBackButtonVisibility(true);
		}else{						// Root Folder
			this.setFolderSelectionDialogTitle(this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"));
			this.setFolderSelectionDialogBackButtonVisibility(false);
		}
	},
	/**
	 * Event handler for when folder is clicked on		
	 */
	selectFolder:  function(oEvent){
		var self = this;
		return function(oEvent){
			var sFolderId = oEvent.oSource.getBindingContext().getObject().id;
			
			self.refreshFolderSelection(sFolderId);
			self.sCurrentFolderId = sFolderId;
		};
	},
	/**
	 * Event handler for navigating back
	 */
	navigateBack: function(oEvent){
		var oCurrentFolder = this.getFolder(this.sCurrentFolderId);
		var sParentId = oCurrentFolder.parent;

		this.refreshFolderSelection(sParentId);
		this.sCurrentFolderId = sParentId;
	},
	/**
	 * Set the title in the header bar 
	 * @private
	 */
	setFolderSelectionDialogTitle: function(folderName){
		var oHeaderBar = this.oFolderSelectionDialog.getCustomHeader();
		var oTitleLabel = oHeaderBar.getContentMiddle()[0];
		oTitleLabel.setText(folderName);
	},
	/**
	 * Set the visibility of the back button in the header bar
	 * @private
	 */
	setFolderSelectionDialogBackButtonVisibility: function(isVisible){
		var oHeaderBar = this.oFolderSelectionDialog.getCustomHeader();
		var oBackButton = oHeaderBar.getContentLeft()[0];
		oBackButton.setVisible(isVisible);
	},
	/**
	 * Returns the current selected folder
	 * used by AttachmentUtils
	 * @private
	 */
	getCurrentFolder: function(){
		if(this.sCurrentFolderId === ''){
			return {name: this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"), id:"" };
		}
		return this.getFolder(this.sCurrentFolderId);
	},

	/**
	 * Event handler for when list update is triggered
	 * @private
	 */
	updateStarted: function(oControlEvent){
		if(oControlEvent.mParameters.reason == 'Growing') {
			var aSubFolders = [];
			var oFolder = this.getFolderFromBuffer(this.sCurrentFolderId);
			
			var subFolderCount =  this.getSubFoldersFromBuffer(this.sCurrentFolderId).length;
			if (oFolder.subFolderCount != subFolderCount ){
				aSubFolders = this.fetchSubFolders( this.sCurrentFolderId, subFolderCount );
			}
			if(aSubFolders.length > 0) {
				this.addFoldersToBuffer(aSubFolders);
				// replace the blank entries in the view model
				for( var i=0; i<aSubFolders.length; i++ ){
			  		this.oViewData.folders[i+subFolderCount] = aSubFolders[i];	
			  	}		
			}
		}
	},
	
	/******************************
	 * FOLDER BUFFER METHODS
	 ******************************/
	/**
	 * Save folders to buffer and returns array of Folder objects
	 * @private
	 */
	addFoldersToBuffer : function(aFolders){
		if(!this.aFolderBuffer){
			this.aFolderBuffer = [];
		}
		
		for(var i=0; i<aFolders.length; i++){
			this.aFolderBuffer.push(aFolders[i]);
		}
	},
	/**
	 * Returns sub folders from buffer
	 * @private
	 */
	getSubFoldersFromBuffer : function(sFolderId){
		var sId = '';
		if(sFolderId){
			sId = sFolderId;
		}
		
		var hasParent = function(folder){
			return folder.parent == sId;
		};
		
		return this.aFolderBuffer.filter(hasParent);
	},
	/**
	 * Returns folder from buffer
	 * @private
	 */
	getFolderFromBuffer : function(sFolderId){
		var hasId = function(folder){
			return folder.id == sFolderId;
		};
		var aFiltered =  this.aFolderBuffer.filter(hasId);
		return aFiltered[0];// should only find 1
	},
	/**
	 * Return specific folder
	 * @private
	 */
	getFolder : function(sFolderId){
		var folder = this.getFolderFromBuffer(sFolderId);
		if(!folder && sFolderId == ''){ // folder is not in buffer && it's the root folder.
			var result = this.oODataUtil.getSubFolders(this.oODataModel, this.sGroupId, null, '0', this.constants.top);
			folder = { name: this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"), id: '', parent: '0', subFolderCount : result.count, icon:"sap-icon://folder" };
			this.addFoldersToBuffer([folder]); // add root folder to buffer
			
			var aSubFolders = this.convertFolderEntities(result.folders, '');
			this.addFoldersToBuffer(aSubFolders); 

		}
		if(folder.subFolderCount == undefined){ // folder is in buffer but does not have the subfolderCount
			var result = this.oODataUtil.getSubFolders(this.oODataModel, null, sFolderId, '0', this.constants.top);
			folder.subFolderCount = result.count;
			
			var aSubFolders = this.convertFolderEntities(result.folders, sFolderId );
			this.addFoldersToBuffer(aSubFolders); 

		}
		return folder;
	},
	/**
	 * Return subfolders of folder
	 * @private
	 */
	getSubFolders : function(oFolder){
		var aSubFolders = [];
		if(oFolder.subFolderCount > 0){
			aSubFolders = this.getSubFoldersFromBuffer(oFolder.id);
		}
		return aSubFolders;
	},
	/**
	 * Convert the folder entities received from back end to this format
	 * { name, id, parent, hasNoChildren }
	 * @private 
	 */
	convertFolderEntities : function(aFolders, sParentId) {
		var aConvertedFolders = [];
		for(var i=0; i<aFolders.length; i++){
			aConvertedFolders.push( { name: aFolders[i].Name, id: aFolders[i].Id, parent: sParentId, icon:"sap-icon://folder" } );
		}
		return aConvertedFolders;
	},

	/**
	 * Returns sub folders of either the group or folder from Jam
	 * If sFolderId is blank or undefined, the sub folders of the root of the group is returned
	 * @private 
	 */
	fetchSubFolders : function(sFolderId, skip ){
		var aSubFolders = [];

		if(!sFolderId || sFolderId == ''){ 		// root folder
			aSubFolders = this.oODataUtil.getSubFolders(this.oODataModel, this.sGroupId, null, skip, this.constants.top).folders; // group
			aSubFolders = this.convertFolderEntities(aSubFolders, '');
		}
		else{		// folder
			aSubFolders = this.oODataUtil.getSubFolders(this.oODataModel, null, sFolderId, skip, this.constants.top).folders; // folder
			aSubFolders = this.convertFolderEntities(aSubFolders, sFolderId );
		}
		return aSubFolders;
	},
	
	/**
	 * Clear the folder buffer
	 * @private
	 */
	clearFolderBuffer: function(){
		this.oFolderSelectionDialog.getContent()[0].getController().clearFolderBuffer();
	}
});
/*!
 * @copyright@
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.FolderSelection", {

	/**
	 * Specifies the Controller belonging to this View. 
	 * In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	 * memberOf DisplayFolders
	 */ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.FolderSelection";
	},

	/**
	 * Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	 * Since the Controller is given to this method, its event handlers can be attached right away.
	 * Creates and returns a UI5 mobile list 
	 */ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.oFoldersList = new sap.m.List(sPrefixId + "_FoldersList", {
			inset : false,
			showNoData : false,
			growing : true,
			growingThreshold : oController.constants.top,
			updateStarted: function(oControlEvent){ oController.updateStarted(oControlEvent); }
		});
		
		var oDisplayFoldersVBox = new sap.m.VBox(sPrefixId + "_DisplayFoldersLayout", {
			width: "100%",
			height: "100%",
		    items: [this.oFoldersList]
		});
		
		return oDisplayFoldersVBox;
	}
});
/*!
 * @copyright@
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.NoGroups", {

	/**
	 * Specifies the Controller belonging to this View. 
	 * In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	 * memberOf NoGroups
	 */ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.NoGroups";
	},

	/**
	 * Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	 * Since the Controller is given to this method, its event handlers can be attached right away.
	 * Creates and returns a UI5 mobile VBox 
	 */ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.oNoGroupsVBox = new sap.m.VBox(sPrefixId + "_NoGroupsVbox");
		this.oNoGroupsVBox.addItem(this.createNoDataLayout());
		
		return this.oNoGroupsVBox;
	},
	
	/** 
	 * Creates the UI5 elements/controls that should be rendered in the VBox
	 * @param {sap.ui.controller} oController The view Controller
	 * @private
	 */ 
	createNoDataLayout : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		var oLangBundle = this.getViewData().langBundle;
		var sJamUrl = this.getViewData().jamUrl;
		
		// Prepare the UI controls in case of no groups available 
		this.oNoDataLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_NoDataLayout", {
			width: "100%",
		    content: [
						new sap.ui.core.HTML(sPrefixId + "_NoDataDiv", {content: "<div>" + oLangBundle.getText("No_GROUPS_ERROR") + "</div>"}),
						new sap.m.VBox(sPrefixId + "_LinkVbox",{
							alignItems: sap.m.FlexAlignItems.End,
							items: [
				                new sap.m.Link(sPrefixId + "_JamLink", {
				                	text : oLangBundle.getText("JAM_URL_TEXT"),
				                	target: "_blank",
				                	href : sJamUrl
				                })
			                ]
						}).addStyleClass("linkVBox")
			]
		});
		
		return this.oNoDataLayout;
		
	}
});
/*!
 * @copyright@
 */

sap.ui.jsview("sap.collaboration.components.fiori.sharing.Sharing", {

	/**
	 * Specifies the Controller belonging to this View. 
	 * In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	 * @memberOf Sharing
	 */ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.sharing.Sharing";
	},

	/**
	 * Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	 * Since the Controller is given to this method, its event handlers can be attached right away.
	 * Creates and returns a UI5 mobile VBox 
	 * @memberOf Sharing
	 */ 
	createContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		
		this.oSharingVBox = new sap.m.VBox(sPrefixId + "_SharingVbox");
		this.createSharingVBoxContent(oController);
		
		return this.oSharingVBox;
	},
	
	/**
	 * Creates the content for the Sharing VBox
	 * @private
	 */
	createSharingVBoxContent : function(oController) {
		var sPrefixId = this.getViewData().controlId;
		var oLangBundle = this.getViewData().langBundle;
		var sJamUrl = this.getViewData().jamUrl;
		
		this.oObjectDisplay = this.getViewData().objectDisplay;
		if(this.oObjectDisplay){
			this.oSharingVBox.addItem(this.oObjectDisplay);
		}
		
		// GROUP SELECTION 
		var oGroupLabel = new sap.m.Label(sPrefixId + "_GroupLabel", {
			text: oLangBundle.getText("GRP_SELECT_LABEL"),
			required : true,
			width: "100%"
		}); 
				
		this.oGroupSelect = new sap.m.Input(sPrefixId + "_GroupSelect",{
			width: "100%",
			type: sap.m.InputType.Text,
			placeholder: oLangBundle.getText("GRP_SELECT_BUTTON_TEXT"),
			showValueHelp: true,
			enabled: true,
			editable: true,
			valueHelpOnly: true,
			valueHelpRequest: function(oControlEvent) {
						oController.onGroupSelectValueHelpPress(oControlEvent);
					}
		});
		
		var oGroupSelectionLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_GroupSelectionLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oGroupLabel, 
						this.oGroupSelect
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(oGroupSelectionLayout);
		
		// ATTACHMENTS 
		var oAttachmentsLabel = new sap.m.Label(sPrefixId + "_AttachmentsLabel", {
			text: oLangBundle.getText("ATTACHMENTS_LABEL"),
			required : false,
			width: "100%"
		}); 
		this.oAttachmentsInput = new sap.m.Input(sPrefixId + "_AttachmentsInput", {
			width: "100%",
			type: sap.m.InputType.Text,
			placeholder: oLangBundle.getText("ATTACHMENTS_FIELD_TEXT",[""]),
			showValueHelp: true,
			enabled: true,
			editable: true,
			valueHelpOnly: true,
			valueHelpRequest: function(oControlEvent) {
				oController.onAttachmentsValueHelpPress(oControlEvent);
			}
		});
		
		this.AttachmentsInputLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_AttachmentsInputLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oAttachmentsLabel, 
						this.oAttachmentsInput
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(this.AttachmentsInputLayout);
			
		// TARGET FOLDER
		var oTargetFolderLabel = new sap.m.Label(sPrefixId + "_TargetFolderLabel", {
			text: oLangBundle.getText("TARGET_FOLDER_LABEL"),
			required : false,
			width: "100%"
		}); 
		
		this.oTargetFolderInput = new sap.m.Input(sPrefixId + "_TargetFolderInput", {
			width: "100%",
			type: sap.m.InputType.Text,
			placeholder: oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"),
			showValueHelp: true,
			enabled: true,
			editable: true,
			valueHelpOnly: true,
			valueHelpRequest: function(oControlEvent) {
				oController.onTargetFolderValueHelpPress(oControlEvent);
			}
		});

		this.oTargetFolderInputLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_TargetFolderInputLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 1}),
		    content: [
						oTargetFolderLabel, 
						this.oTargetFolderInput
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(this.oTargetFolderInputLayout);
		
		// COMMENTS BOX
		var oNoteLabel = new sap.m.Label(sPrefixId + "_NoteLabel", {
			text: oLangBundle.getText("ADD_NOTE_LABEL"),
			width: "100%"
		}); 
		
		var iObjectId_CharLength;
		this.getViewData().objectId ? iObjectId_CharLength = this.getViewData().objectId.length : iObjectId_CharLength = 0;
		var iNoteTextArea_MaxChar = 1000 - iObjectId_CharLength - 1; // -1 to account for the newline we add as separator bet the Obj Id and the note in the feed
		this.oNoteTextArea = new sap.m.TextArea(sPrefixId + "_NoteTextArea", {
			value: this.getViewData().objectShare,
			rows: 6,
			width : "100%",
			maxLength: iNoteTextArea_MaxChar
		});

		var oNoteLayout = new sap.ui.layout.VerticalLayout(sPrefixId + "_NoteLayout", {
			width: "100%",
			layoutData: new sap.m.FlexItemData({growFactor: 2}),
		    content: [
						oNoteLabel, 
						this.oNoteTextArea
			]
		}).addStyleClass("sharingVBox");
		this.oSharingVBox.addItem(oNoteLayout);
		
		// ATTACHMENTS ONLY CHECKBOX
		this.oAttachmentCB = new sap.m.CheckBox(sPrefixId + "_AttchmentCB",{
			text: oLangBundle.getText("SHARE_ATTACHMENTS_ONLY_LABEL"),
			enabled: false,
			select: function(){
				oController.onAttachmentCheckBoxSelected();
			}
		});
		this.oSharingVBox.addItem(this.oAttachmentCB);
	}
});
/*!
 * @copyright@
 */
sap.ui.jsview("sap.collaboration.components.socialprofile.SocialProfile", {

	/** 
	* Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @private
	*/
	getControllerName : function() {
		return "sap.collaboration.components.socialprofile.SocialProfile";
	},

	/** 
	* Is the place where the UI is constructed (inherited).<br> 
	* It is initially called once after the Controller has been instantiated.
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* It creates the VBox for the Responsive Popover
	* @param {sap.ui.controller} oController The view Controller 
	* @private
	*/ 
	createContent : function(oController) {
		this._sPrefixId = this.getId();
		this._oVBox= new sap.m.VBox(this._sPrefixId + "_VBox").addStyleClass("vbox");
		this._createVBoxContent();
		
		return this._oVBox;
	},
	
	/**
	 * Creates the content for the Social Profile VBox
	 * @private
	 */
	_createVBoxContent : function(){
		this._oVBox.addItem(this._createHBoxHeader()); // add the header (HBox that contains the user image, full name and title) to the VBox content first
		
		var oContactDetailsLabel = new sap.m.Label(this._sPrefixId + "_ContactDetailsLabel", {
			text: this.getViewData().langBundle.getText("SP_CONTACT_DETAILS_LABEL")
		}).addStyleClass("heading");	
		
		var oMobileLabel = new sap.m.Label(this._sPrefixId + "_MobileLabel", {
			text: this.getViewData().langBundle.getText("SP_MOBILE_LABEL")
		}).addStyleClass("label");	
		
		var oMobileNumber = new sap.m.Text(this._sPrefixId + "_MobileNumber", {
			text: "{/MemberProfile/PhoneNumbers/Mobile}"
		});
		
		var oWorkLabel = new sap.m.Label(this._sPrefixId + "_WorkLabel", {
			text: this.getViewData().langBundle.getText("SP_WORK_LABEL")
		}).addStyleClass("label");	
		
		var oWorkNumber = new sap.m.Text(this._sPrefixId + "_WorkNumber", {
			text: "{/MemberProfile/PhoneNumbers/Work}"
		});
		
		var oEmailLabel = new sap.m.Label(this._sPrefixId + "_EmailLabel", {
			text: this.getViewData().langBundle.getText("SP_EMAIL_LABEL")
		}).addStyleClass("label");	
		
		var oEmail = new sap.m.Link(this._sPrefixId + "_Email", {
			text: "{/Email}",
			press: function(){
				this.setHref("mailto:" + this.getText());
			}
		});
		
		var oCompanyDetailsLabel = new sap.m.Label(this._sPrefixId + "_CompanyDetailsLabel", {
			text: this.getViewData().langBundle.getText("SP_COMPANY_DETAILS_LABEL")
		}).addStyleClass("heading");	
				
		var oCompanyAddressLabel = new sap.m.Label(this._sPrefixId + "_CompanyAddressLabel", {
			text: this.getViewData().langBundle.getText("SP_COMPANY_ADDRESS_LABEL")
		}).addStyleClass("label");	
		
		var oCompanyAddress = new sap.m.Text(this._sPrefixId + "_CompanyAddress", {
			text: "{/MemberProfile/Address}"
		});
		
		this._oVBox.addItem(oContactDetailsLabel)
		.addItem(oMobileLabel)
		.addItem(oMobileNumber)
		.addItem(oWorkLabel)
		.addItem(oWorkNumber)
		.addItem(oEmailLabel)
		.addItem(oEmail)
		.addItem(oCompanyDetailsLabel)
		.addItem(oCompanyAddressLabel)
		.addItem(oCompanyAddress);
	},
	
	/**
	 * Creates the content for the Social Profile Header HBox
	 * @private
	 */
	_createHBoxHeader : function(){
			var oHeaderVBox = new sap.m.VBox(this._sPrefixId + "_HeaderVBox").addStyleClass("headervbox");
			
			var oFullName = new sap.m.Text(this._sPrefixId + "_FullName", {
				text: "{/FullName}"
			}).addStyleClass("fullname");
			
			var oRole = new sap.m.Text(this._sPrefixId + "_Role", {
				text: "{/Title}"
			}).addStyleClass("role");
			
			oHeaderVBox.addItem(oFullName).addItem(oRole);
			
			var oHeaderHBox = new sap.m.HBox(this._sPrefixId + "_HeaderHBox", {
				height: "48px"
			});
			
			var oUserImage = new sap.m.Image(this._sPrefixId + "_HeaderUserImage", {
				alt: "{/FullName}",
				width: "48px",
				height: "48px"
			}).addStyleClass("image");
		
			var oNoUserHeader = new sap.m.ObjectStatus(this._sPrefixId + "_NoUserHeader", {
				text: this.getViewData().langBundle.getText("SP_NO_USER"), 
				state: "Warning", 
				icon: "sap-icon://alert",
				visible: false
			});

		oHeaderHBox.addItem(oUserImage)
		.addItem(oHeaderVBox)
		.addItem(oNoUserHeader);
		
		return oHeaderHBox;
	},
	
	/**
	 * Reset the content header in the Popover to have the image, user full name and role visible
	 * @public
	 */
	resetHeader : function(){
		var oNouserHeader = sap.ui.getCore().byId(this._sPrefixId + "_NoUserHeader");
		
		if(oNouserHeader.getVisible() === true){
			oNouserHeader.setVisible(false);
			sap.ui.getCore().byId(this._sPrefixId + "_HeaderVBox").setVisible(true);
			sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage").setVisible(true);
		}
	},
	
	/**
	 * Sets the header for the content if the user does not exist
	 * @public
	 */
	setHeaderNoUser : function(){
		var oUserImage = sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage");
		
		if(oUserImage.getVisible() === true){
			oUserImage.setVisible(false);
			sap.ui.getCore().byId(this._sPrefixId + "_HeaderVBox").setVisible(false);
			sap.ui.getCore().byId(this._sPrefixId + "_NoUserHeader").setVisible(true);
		}
	}
});
jQuery.sap.declare('sap.collaboration.library-all');
jQuery.sap.declare('sap.collaboration.components.fiori.feed.app.App.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.app.App.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.commons.Detail.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.FeedTypeMaster.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.GroupMaster.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.GroupMaster.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.SplitApp.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.feed.splitApp.SplitApp.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.FolderSelection.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.FolderSelection.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.NoGroups.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.fiori.sharing.Sharing.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.collaboration.components.socialprofile.SocialProfile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.NotificationContainer') ) {
/*!
 * @copyright@
 */

jQuery.sap.declare("sap.collaboration.components.fiori.notification.NotificationContainer");


sap.ui.core.Control.extend("sap.collaboration.components.fiori.notification.NotificationContainer", {
    
    metadata: {
    		
    	properties: {
    		styleClassPrefix : {type: "string"}
    	},	
    	aggregations: {
    		"content" : {singularName: "content"}
    	}
           
    },
    
    renderer: function(oRM, oControl) {
    		
	   oRM.write("<div");
	   oRM.writeControlData(oControl); // applies the ID, ...
	   oRM.addClass(oControl.getStyleClassPrefix() + "ContainerBox");
	   oRM.writeClasses();
	   oRM.writeStyles(); // custom style class support
	   oRM.write(">");
	   
	   var aContent = oControl.getContent();
	   for (var i = 0, l = aContent.length; i < l; i++) {
	          oRM.renderControl(aContent[i]);
	   }
	   
	   oRM.write("</div>");
           
    }
    
});

}; // end of sap/collaboration/components/fiori/notification/NotificationContainer.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException') ) {
/*!
 * @copyright@
 */

/*
 * This module is an exception class whose objects are thrown during File class object construction.
 * An exception of this kind is thrown when the File constructor isn't provided the arguments
 * it need to build an instance of the File class. 
 */

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException");

sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException", {
	constructor: function() {
		/** @private */ this.exceptionName = "InvalidAttachmentConstructorArgumentsException";
	}
});

}; // end of sap/collaboration/components/fiori/sharing/attachment/InvalidAttachmentConstructorArgumentsException.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException') ) {
/*!
 * @copyright@
 */

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException");

sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException", {
	constructor: function(parameter) {
		/** @private */ this.exceptionName = "InvalidAttachmentParameterException: " + parameter;
	}
});

}; // end of sap/collaboration/components/fiori/sharing/attachment/InvalidAttachmentParameterException.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.helper.ShareUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* JamUtil helper class
*
* Is responsible for the integration and communication with the
* JAM APIs
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.helper.ShareUtil");

sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.helper.ShareUtil",{
	
	/**
	 * @constructor
	 */
	constructor: function(oLangBundle, oODataUtil, oSMIODataModel, oCommonUtil, oJamODataModel, oCollaborationHostRestService) {
		// Boolean indicating whether or not it's ok to refresh the security token.
		this._bIsOkToRefreshSecurityToken = true;
		
		this.iGrowingThreshold = 10; 
		this.oLangBundle = oLangBundle;
		this.oODataUtil = oODataUtil;
		this.oSMIODataModel = oSMIODataModel;
		this.oJamODataModel = oJamODataModel;
		this.oCollaborationHostRestService = oCollaborationHostRestService;
		this.oCommonUtil = oCommonUtil;
		this.bShareError = false;
		this.bShareBusinessObjShared;
		this.bFileUploaded;
		this.aUploadAttachmentsUploaded = [];
		this.IdisplaySuccessMessageIntervalId;
	},
	
	/**
	 * Method that performs either the sequence of steps a.* or b.*. The b.* sequence occurs when oSharingData.mappedExternalObject isn't specified.
	 * a.1. Creates an ExternalObject in Jam corresponding for the business object being shared.
	 * a.2. Features the created ExternalObject to a Jam Group.
	 * a.3. Creates a SharedExternalObject feed entry on the Group's wall. See {@link _createGroupFeedEntry_SharedExternalObject} to know what a SharedExternalObject feed entry is.
	 * b.1. Creates a SharedObjectLink feed entry on the Group's wall. See {@link _createFeedEntry_ShareObjectLink} to know what a SharedObjectLink feed entry is. 
	 * @map {object} oSharingData - Share data needed for this method.
	 * @param {string} oSharingData.groupId - The Jam Id of the Group in which to feature the ExternalObject.
	 * @param {string} oSharingData.groupName - The name of the Group in which to feature the ExternalObject.
	 * @param {string} oSharingData.folderId - This is the Jam Id of the Folder in which to upload the attachment's.
	 * @param {object} oSharingData.feedContent - Data to create a feed entry in a Jam Group.
	 * @param {string} oSharingData.feedContent.uiUrl - The URL to navigate to after clicking on the link in the feed entry. This URL points to the Fiori app's view of the business object.
	 * @param {string} oSharingData.feedContent.note - The comment to add to the feed entry.
	 * @param {array} oSharingData.aFilesToUpload - Array of files (attachments) to upload to Jam.
	 * @param {object} oSharingData.mappedExternalObject - Set of URLs used by Jam to 
	 * @param {string} oSharingData.mappedExternalObject.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * @param {string} oSharingData.mappedExternalObject.ODataLink - Same as Exid.
	 * @param {string} oSharingData.mappedExternalObject.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * @param {string} oSharingData.mappedExternalObject.ODataMetadata - Same as ObjectType.
	 * @param {string} oSharingData.mappedExternalObject.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 */
	shareBusinessObject: function(oSharingData) {
		var self = this;
		// Share external object
		if(oSharingData.mappedExternalObject){
			// Check if the oSharingData.feedContent.uiUrl (object.id) is passed, this is a mandatory field when sharing the business object. For this reason, this check was placed after the
			// line above, which checks if the business object was passed in the first place
			if(oSharingData.feedContent !== undefined &&  oSharingData.feedContent.uiUrl !== undefined){
				this.oJamODataModel.create( '/ExternalObjects', 
						 oSharingData.mappedExternalObject,
						 {	async: true,  
							success: function(oData,response){
								self._bIsOkToRefreshSecurityToken = true;
							 	self._featureExternalObjectToGroup(oSharingData, oData.results.Id);
						 	},
						 	error : function(oError){
						 		if (oError.response.statusCode === 403 && self._bIsOkToRefreshSecurityToken) {
						 			self.oJamODataModel.refreshSecurityToken(
						 				function() {
						 					self._bIsOkToRefreshSecurityToken = false;
						 					self.shareBusinessObject(oSharingData);
						 				},
						 				function(oError) {
						 					self._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
						 				},
						 				true
						 			);
						 		}
						 		else {
						 			self._bIsOkToRefreshSecurityToken = true;
						 			self._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
						 		}
						 	}
						 });
			}
			else {
				jQuery.sap.log.error("feedContent.uiUrl parameter should not be undefined when sharing an external object", "sap.collaboration.components.fiori.sharing.helper.ShareUtil.shareBusinessObject()");
				this.displayErrorMessage();
				
			}
			
		}
		// Share object link
		else {
			this._createFeedEntry_ShareObjectLink(oSharingData);
		}
	},
	
	/**
	 * Method that performs the following.
	 * 1. Features a Jam ExternalObject to a Jam Group.
	 * 2. Creates a feed entry on the Group's wall.
	 * @param {object} oSharingData - See the parameter of the same name for method {@link shareBusinessObject}
	 * @param {string} externalObjectId - Jam's Id for the ExternalObject being featured to the Group.
	 * @private
	 */
	_featureExternalObjectToGroup: function(oSharingData, externalObjectId){
		var self = this;
		this.oJamODataModel.create( "/Groups('"+oSharingData.groupId+"')/$links/FeaturedExternalObjects", 
				 { uri: "ExternalObjects('"+externalObjectId+"')" },
				 { async: true,
				   success: function(oData,response){
					 self._createGroupFeedEntry_SharedExternalObject(oSharingData);
				 	},
				   error : function(oError){
					   if (oError.response.statusCode == 409 || oError.response.statusCode == 400 || oError.response.statusCode == 404) {
						   self._createGroupFeedEntry_SharedExternalObject(oSharingData);
					   }
					   else {
						   self._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
					   }
				 	}
				 });
	},
	
	/**
	 * Method that creates a SharedExternalObject feed entry. A SharedExternalObject feed entry is a feed entry with a QuickView.
	 * @param {object} oSharingData - See the parameter of the same name for method {@link shareBusinessObject}.
	 * @private
	 */
	_createGroupFeedEntry_SharedExternalObject: function(oSharingData){

		var xmlPayload =
			'<?xml version="1.0" encoding="UTF-8"?>' +
			'<feed xmlns="http://www.w3.org/2005/Atom" xmlns:activity="http://activitystrea.ms/spec/1.0/">' +
				'<entry>' +
					'<title> </title>' +
					'<content type="html">'+ jQuery.sap.encodeXML(oSharingData.feedContent.note)+'</content>' +
					'<author>' +
						'<email>'+ jQuery.sap.encodeXML(oSharingData.memberEmail)+'</email>' +
						'<activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>' +
					'</author>' +
					'<activity:verb>http://activitystrea.ms/schema/1.0/share</activity:verb>' +
					'<activity:object>' +
						'<id>'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.Exid) +'</id>' +
						'<title type="html">'+ jQuery.sap.encodeXML(oSharingData.externalObject.name) + '</title>' +
						'<activity:object-type>'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ObjectType) +'</activity:object-type>' +
						'<link type="text/html" rel="alternate" href="'+ jQuery.sap.encodeXML(oSharingData.feedContent.uiUrl) +'"/>' +
						'<link rel="http://www.odata.org" href="'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ODataLink) +'"/>' +
					    '<link rel="http://www.odata.org/metadata" href="'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ODataMetadata) +'"/>' +
					    '<link rel="http://www.odata.org/annotation" href="'+ jQuery.sap.encodeXML(oSharingData.mappedExternalObject.ODataAnnotations) +'"/>' +
			        	'<source>' +
			        		'<id>tag:www.cubetree.com,2013:/groups/' + jQuery.sap.encodeXML(oSharingData.groupId) + '</id>' +
			        	'</source>' +
			        '</activity:object>' +
			    '</entry>' +
		    '</feed>';
		
		var self = this;
		var fnOnReadyStateChange = function() {
			if (this.readyState == 4) {
				if(this.status == 200){
					self.bShareBusinessObjShared = true;
					self.displaySuccessMessage(oSharingData.groupName);
				}
				else{
					self._checkAuthorizationAndDisplayErrorMessage(this.status);
				}
			}
		};
		
		this._createFeedEntryViaRestAPI( xmlPayload, fnOnReadyStateChange );
	},

	/**
	 * Method that creates a SharedObjectLink feed entry. A SharedObjectLink usually has a link back to the Fiori application's view of the Object.
	 * @param {object} oSharingData - See the parameter of the same name for method {@link shareBusinessObject}. 
	 * @private
	 */
	_createFeedEntry_ShareObjectLink: function(oSharingData){
		// Build the feed content to be posted. The feed content can either be 
		// - Note + Object Id
		// - Note only
		// - Object Id only 
		this.bShareBusinessObjShared = false;

		// If feed content is not empty, add request to batch and execute
		if (oSharingData.feedContent){
			
			if(oSharingData.feedContent.note !== undefined){
				
				var sContent = oSharingData.feedContent.note;
				if(oSharingData.feedContent.uiUrl){
					sContent = sContent + "<br/><a href='" + oSharingData.feedContent.uiUrl.replace(/'/g, "&apos;" ) + "'>" 
								+  this.oLangBundle.getText("SHARE_OBJECT_LINK") + '</a>';				
				}
			
				var xmlPayload =
					'<?xml version="1.0" encoding="UTF-8"?>' +
					'<feed xmlns="http://www.w3.org/2005/Atom" xmlns:activity="http://activitystrea.ms/spec/1.0/">' +
						'<entry>' +
							'<title>' + jQuery.sap.encodeXML(this.oLangBundle.getText("SHARE_OBJECT_LINK_TITLE")) + '</title>' +
							'<content type="html">'+ jQuery.sap.encodeXML(sContent) +'</content>' +
							'<author>' +
								'<email>'+ jQuery.sap.encodeXML(oSharingData.memberEmail)+'</email>' +
								'<activity:object-type>http://activitystrea.ms/schema/1.0/person</activity:object-type>' +
							'</author>' +
							'<activity:verb>http://activitystrea.ms/schema/1.0/share</activity:verb>' +
							'<activity:object>' +
					        	'<source>' +
					        		'<id>tag:www.cubetree.com,2013:/groups/' + jQuery.sap.encodeXML(oSharingData.groupId) + '</id>' +
					        	'</source>' +
					        '</activity:object>' +
					    '</entry>' +
				    '</feed>';
				
				var self = this;
				var fnOnReadyStateChange = function() {
					if (this.readyState == 4) {
						if(this.status == 200) {
							self.bShareBusinessObjShared = true;
							self._bIsOkToRefreshSecurityToken = true;
							self.displaySuccessMessage(oSharingData.groupName);
						}
						else {
							if (this.status == 403 && self._bIsOkToRefreshSecurityToken) {
					 			self.oJamODataModel.refreshSecurityToken(
					 				function() {
					 					self._bIsOkToRefreshSecurityToken = false;
					 					self._createFeedEntry_ShareObjectLink(oSharingData);
					 				},
					 				function(oError) {
					 					self._checkAuthorizationAndDisplayErrorMessage(oError.response.statusCode);
					 				},
					 				true
					 			);
					 		}
							else {
								self._bIsOkToRefreshSecurityToken = true;
								self._checkAuthorizationAndDisplayErrorMessage(this.status);
							}
						}
					}
				};
				
				this._createFeedEntryViaRestAPI( xmlPayload, fnOnReadyStateChange );
				
			}else{
				jQuery.sap.log.error("feedContent.note parameter should not be undefined", "sap.collaboration.components.fiori.sharing.helper.ShareUtil._createFeedEntry_ShareObjectLink()");
				this.displayErrorMessage();
			}
		}
		else{
			jQuery.sap.log.error("feedContent parameter should not be undefined", "sap.collaboration.components.fiori.sharing.helper.ShareUtil._createFeedEntry_ShareObjectLink()");
			this.displayErrorMessage();
		}
	},
	
	/**
	 * Creates a feed entry using Jam's REST API.
	 * @param {string} sXMLPayload - XML payload that will be in the HTTP request's body. 
	 * @callback {XMLHttpRequest#onreadystatechange} fnOnReadyStateChange
	 */
	_createFeedEntryViaRestAPI: function(sXMLPayload, fnOnReadyStateChange){
		
		var atomHeaders = {
				'Accept':'application/atom+xml',
				'Content-Type':'application/atom+xml',
				'x-csrf-token': this.oJamODataModel.getSecurityToken()
		};
		
		var sFeedPostURL = this.oCollaborationHostRestService.url + "/feed/post";
		if(this.oCollaborationHostRestService.urlParams != undefined && this.oCollaborationHostRestService.urlParams != "" ){
			sFeedPostURL = sFeedPostURL + "?" + this.oCollaborationHostRestService.urlParams;
		}
		
		var xmlHttpRequest = new window.XMLHttpRequest();
		xmlHttpRequest.open("POST",	sFeedPostURL, true );
		for (var headerField in atomHeaders) {
			xmlHttpRequest.setRequestHeader(headerField, atomHeaders[headerField]);
		}
		xmlHttpRequest.onreadystatechange = fnOnReadyStateChange;
		xmlHttpRequest.send(sXMLPayload);
	},
	/**
	* Uploads the attachments
	* @private
	*/
	uploadAttachments: function(oSharingData) {
		var self = this;
		var sGroupId = oSharingData.groupId;
		var sFolderId = oSharingData.folderId;
		
		
		for(var i in oSharingData.aFilesToUpload){
			this.oSMIODataModel.create( '/UploadTargetFile', null,
					 {	async 	: true,  
						success : function(oData,response){
						 
							jQuery.sap.log.debug('File was uploaded', "sap.collaboration.components.fiori.sharing.helper.ShareUtil.uploadAttachments()" );
					 	},
					 	error 	: function(oError){
					 		jQuery.sap.log.error('Error, file was not uploaded', "sap.collaboration.components.fiori.sharing.helper.ShareUtil.uploadAttachments()");
					 	},
					 	urlParameters : {
					 		FileMimeType : "'" + oSharingData.aFilesToUpload[i].mimeType + "'",
					 		FileName : "'" + oSharingData.aFilesToUpload[i].name + "'",
					 		FileURL : "'" + oSharingData.aFilesToUpload[i].url + "'",
					 		FolderId : "'" + oSharingData.folderId + "'",
					 		GroupId : "'" + oSharingData.groupId + "'"
					 	} 
					 });
		}
	},
	/**
	 * Create Group Selection Dialog
	 * @private
	 */
	createGroupSelectionDialog: function(sPrefixId, oItemTemplate, fSelectGroupCallback, iWidth, iHeight, oOdataModel){

		var self = this;
		var handleSearch = function(oEvent) {
		    var sValue = oEvent.getParameter("value");
			self.oGroupSelectionDialog.bindAggregation("items", "/Groups/?$filter=substringof('" + sValue.replace(/'/g,"''") + "',Name)", oItemTemplate);
		};

		this.oGroupSelectionDialog = new sap.m.SelectDialog(sPrefixId + "_GroupSelectionDialog", {
			multiSelect: false,
			noDataText:this.oLangBundle.getText("GRP_NO_GROUPS_FOUND_TEXT"),
			rememberSelections: false,
			growingThreshold: this.iGrowingThreshold,
			title:this.oLangBundle.getText("GROUP_SELECTION_DIALOG_TITLE"),
			confirm: fSelectGroupCallback,
			search: handleSearch,
			liveChange: handleSearch
			
		}).addStyleClass("sapUiPopupWithPadding");

		if(iWidth){
			this.oGroupSelectionDialog.setContentWidth(iWidth.toString() + "px");
		}
		
		if(iHeight){
			this.oGroupSelectionDialog.setContentHeight(iHeight.toString() + "px");
		}

		this.oGroupSelectionDialog.setModel(oOdataModel);
		this.oGroupSelectionDialog.bindAggregation("items","/Groups", oItemTemplate);		
		
		return this.oGroupSelectionDialog;
	},
	
	/**
	* Displays Success Message in case the share operation (BO + attachments) was processed successfully
	* @private
	*/
	displaySuccessMessage : function(sGroupName) {
		var bBoShareOk = true;
		// Check if the BO is shared
		if(!(this.bShareBusinessObjShared === true || this.bShareBusinessObjShared === undefined)){
			bBoShareOk = false;
		}
		
		var bFileUploadOk = true;
		
		if(!(this.bFileUploaded === true || this.bFileUploaded === undefined)){
			bBoShareOk = false;
		}
		
		if(this.bShareError === false){
			if(bBoShareOk === true && bFileUploadOk === true){
				this.oCommonUtil.showMessage(this.oLangBundle.getText("SHARING_SUCCESS_MSG", [sGroupName]), {width: "20em", autoClose: false});
				clearInterval(this.IdisplaySuccessMessageIntervalId);
			}
		}
		else{
			clearInterval(this.IdisplaySuccessMessageIntervalId);
		}
	},
	
	/**
	* Displays Error Message in case one of the attachments was not uploaded successfully
	* @private
	*/
	displayErrorMessage : function() {
		if(!this.bShareError){
			var sErrorMessage = this.oLangBundle.getText("SHARING_FAILURE_MSG");
			this.oCommonUtil.displayError(sErrorMessage);
		}
		this.bShareError = true;
	},
	
	/**
	* Check if the error is an authorization error, if so, display a different error message
	* @private
	*/
	_checkAuthorizationAndDisplayErrorMessage : function(iStatus) {
		var self = this;
		
		// Check if the server response is a 401 or 403, if so, then throw an 'authorization failure' error message. Otherwise, throw the standard error message.
		if(iStatus == 401 || iStatus == 403){
			self.oCommonUtil.displayError(self.oLangBundle.getText("SHARE_AUTHORIZATION_FAILURE_MSG"));
		}
		else{
			self.displayErrorMessage();
		}
	}
	
});

}; // end of sap/collaboration/components/fiori/sharing/helper/ShareUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.annotations.Metadata') ) {
/*
 * @copyright@
 */
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.socialtimeline.annotations.Metadata");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.annotations.Metadata", {
	constructor: function(oODataMetadata) {
		// namespace -> alias (For Schema that are included in an Include element as a child of a Reference element.)
		// namespace -> null (Means there's no alias for that namespace)
		// namespace -> undefined (Means the namespace isn't included.)
		this._oIncludedSchemaAliasMap = {};
		// namespace -> alias (For Schema that are defined as children of the DataServices element.)
		// namespace -> null (Means there's no alias for that namespace.)
		// namespace -> undefined (Means the namespace isn't defined.)
		this._oSchemaAliasMap = {};
		this._oODataMetadata = oODataMetadata;
		this._parseODataMetadata();
	},
	
	_parseODataMetadata: function() {
		this._parseReferenceElements(this._oODataMetadata.extensions);
		this._parseDataServicesElement(this._oODataMetadata.dataServices); // There can only be one of these.
	},
	
	_parseReferenceElements: function(aReferenceElements) {
		for (var iReferenceElementIndex in aReferenceElements) {
			this._parseReferenceElement(aReferenceElements[iReferenceElementIndex]);
		}
	},
	
	_parseReferenceElement: function(oReferenceElement) {
		for (var iReferenceElementChildIndex in oReferenceElement.children) {
			this._parseReferenceElementChild(oReferenceElement.children[iReferenceElementChildIndex]);
		}
	},
	
	_parseReferenceElementChild: function(oReferenceElementChild) {
		if (oReferenceElementChild.name === "Include") {
			this._parseIncludeElement(oReferenceElementChild);
		}
		else {
			// This means the child element is an IncludeAnnotations element, which we don't support.
			return;
		}
	},
	
	_parseIncludeElement: function(oIncludeElement) {
		var sIncludeElementNamespace = null; // This must be specified! The spec demands it!
		var sIncludeElementAlias = null; // This may not be an attribute because it is optional.
		for (var iIncludeElementAttributeIndex in oIncludeElement.attributes) {
			if (oIncludeElement.attributes[iIncludeElementAttributeIndex].name === "Namespace") {
				sIncludeElementNamespace = oIncludeElement.attributes[iIncludeElementAttributeIndex].value;
			}
			else {
				sIncludeElementAlias = oIncludeElement.attributes[iIncludeElementAttributeIndex].value;
			}
		}
		this._oIncludedSchemaAliasMap[sIncludeElementNamespace] = sIncludeElementAlias;
	},
	
	_parseDataServicesElement: function(oDataServicesElement) {
		this._parseSchemaElements(oDataServicesElement.schema);
		
	},
	
	_parseSchemaElements: function(aSchemaElements) {
		for (var iSchemaElementIndex in aSchemaElements) {
			this._parseSchemaElement(aSchemaElements[iSchemaElementIndex]);
		}
	},
	
	_parseSchemaElement: function(oSchemaElement) {
		if (oSchemaElement.alias === undefined) {
			this._oSchemaAliasMap[oSchemaElement.namespace] = null;
		}
		else {
			this._oSchemaAliasMap[oSchemaElement.namespace] = oSchemaElement.alias;
		}
		this._parseEntityTypeElements(oSchemaElement.entityType);
	},
	
	_parseEntityTypeElements: function(aEntityTypeElements) {
		for (var iEntityTypeElementIndex in aEntityTypeElements) {
			this._parseEntityTypeElement(aEntityTypeElements[iEntityTypeElementIndex]);
		}
	},
	
	_parseEntityTypeElement: function() {
		
	},
	
	isSchemaIncluded: function (sNamespace) {
		return (this._oIncludedSchemaAliasMap[sNamespace] !== undefined);
	}
});
}; // end of sap/collaboration/components/socialtimeline/annotations/Metadata.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.annotations.MetadataException') ) {
/*!
 * @copyright@
 */
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.socialtimeline.annotations.MetadataException");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.annotations.MetadataException", {
	constructor: function(sExceptionMessage) {
		this._sClassName = "sap.collaboration.components.socialtimeline.annotations.MetadataException";
		this._sExceptionMessage = sExceptionMessage;
	}
});
}; // end of sap/collaboration/components/socialtimeline/annotations/MetadataException.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility",{
	/**
	 * Constructor for the Timeline Terms Utility
	 * This class is responsible with providing the field mapping for the TimelineEntry entities of a given business object 
	 * 
	 * @class TimelineTermsUtility
	 * @name sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility
	 *
	 * @constructor
	 * @param oServiceMetadata {Object} Service Metadata returned from ODataModel.getServiceMetadata()
	 * @param oServiceAnnotations {Object} Service Annotations returned from ODataModel.getServiceAnnotations()
	 */
	constructor: function(oServiceMetadata, oServiceAnnotations){
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility");
		this._oServiceMetadata = oServiceMetadata;
		this._oServiceAnnotations = oServiceAnnotations;
		this._oEntityMappings = {};
		// Services supported by the timeline must have the com.sap.vocabularies.Collaboration.v1 namespace
		// defined in an Include element in their metadata document.
		this.sSchemaNamespace = "com.sap.vocabularies.Collaboration.v1";
		var oSchema = this._getIncludedSchema(this.sSchemaNamespace);
		if (!(oSchema && oSchema.schemaNamespace === this.sSchemaNamespace)) {
			var sExceptionMessage = "Schema with namespace " + this.sSchemaNamespace + " wasn't in an Include in the service's metadata document.";
			this._oLogger.error(sExceptionMessage);
			throw new sap.collaboration.components.socialtimeline.annotations.MetadataException(sExceptionMessage);
		}
	},
	/**
	 * Get the TimelineEntry navigation path for sEntityCollection
	 * @public
	 * @param sEntityCollection
	 * @returns {string}
	 */
	getTimelineEntryNavigationPath: function(sEntityCollection){
		if(!sEntityCollection){
			var oError = new Error('Parameter sEntityCollection is undefined');
			this._oLogger.error(oError.message);
			throw oError;
		}
		var oMapping = this._oEntityMappings[sEntityCollection];
		if(!oMapping){
			oMapping = this._buildMapping(sEntityCollection);
		}
		
		return oMapping.timelineEntryNavigationPath;
	},
	/**
	 * Get the TimelineEntry entity's fields
	 * @public
	 * @param sEntityCollection
	 * @returns {object} map of the TimelineEntry entity's fields
	 */
	getTimelineEntryFields: function(sEntityCollection){
		if(!sEntityCollection){
			var oError = new Error('Parameter sEntityCollection is undefined');
			this._oLogger.error(oError.message);
			throw oError;
		}
		var oMapping = this._oEntityMappings[sEntityCollection];
		if(!oMapping){
			oMapping = this._buildMapping(sEntityCollection);
		}
		
		var oTimelineEntryFields = this._oEntityMappings[sEntityCollection].timelineEntryFields;
		if(!oTimelineEntryFields){
			var oTimelineEntryEntityFields = this._oServiceAnnotations[oMapping.timelineEntryEntityTypeFull][this.sSchemaNamespace + ".TimelineEntry"];
			if(!oTimelineEntryEntityFields){
				oTimelineEntryEntityFields = this._oServiceAnnotations[oMapping.timelineEntryEntityTypeFull][this._getCollaborationAlias() + ".TimelineEntry"];
			}
			oTimelineEntryFields = this._mapEntityFields(oTimelineEntryEntityFields);
			this._oEntityMappings[sEntityCollection].timelineEntryFields = oTimelineEntryFields;
		}
		return oTimelineEntryFields;
	},
	/**
	 * Get the TimelineEntryDetail entity's fields
	 * @public
	 * @param sEntityCollection
	 * @returns {object} map of the TimelineEntry entity's fields
	 */
	getTimelineEntryDetailFields: function(sEntityCollection){
		if(!sEntityCollection){
			var oError = new Error('Parameter sEntityCollection is undefined');
			this._oLogger.error(oError.message);
			throw oError;
		}
		var oMapping = this._oEntityMappings[sEntityCollection];
		if(!oMapping){
			oMapping = this._buildMapping(sEntityCollection);
		}
		
		var oTimelineEntryDetailFields = this._oEntityMappings[sEntityCollection].timelineEntryDetailFields;
		if(!oTimelineEntryDetailFields){
			var oTimelineEntryDetailEntityFields = this._oServiceAnnotations[oMapping.timelineEntryDetailEntityTypeFull][this.sSchemaNamespace + ".TimelineDetailPropertyValueChange"];
			if(!oTimelineEntryDetailEntityFields){
				oTimelineEntryDetailEntityFields = this._oServiceAnnotations[oMapping.timelineEntryDetailEntityTypeFull][this._getCollaborationAlias() + ".TimelineDetailPropertyValueChange"];
			}
			oTimelineEntryDetailFields = this._mapEntityFields(oTimelineEntryDetailEntityFields);
			this._oEntityMappings[sEntityCollection].timelineEntryDetailFields = oTimelineEntryDetailFields;
		}
		return oTimelineEntryDetailFields;
	},	
	
	/**
	 * Build mapping object for an entity collection
	 * @private
	 * @param sEntityCollection
	 * @returns {object} oMapping object
	 */
	_buildMapping: function(sEntityCollection){
		//build mapping object for entity collection and keep it for reuse
		this._oEntityMappings[sEntityCollection] = {};
		this._oEntityMappings[sEntityCollection].entityCollection = sEntityCollection;
		this._oEntityMappings[sEntityCollection].entityTypeFull = this._getEntityTypeFull(sEntityCollection);
		this._oEntityMappings[sEntityCollection].namespace = this._oEntityMappings[sEntityCollection].entityTypeFull.split(".")[0];
		this._oEntityMappings[sEntityCollection].entityType = this._oEntityMappings[sEntityCollection].entityTypeFull.split(".")[1];
				
		var oEntityTimelineNavigationPath = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].entityTypeFull][this.sSchemaNamespace + ".TimelineNavigationPath"];
		if(!oEntityTimelineNavigationPath){
			oEntityTimelineNavigationPath = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].entityTypeFull][this._getCollaborationAlias() + ".TimelineNavigationPath"];
		}
		this._oEntityMappings[sEntityCollection].timelineEntryNavigationPath = oEntityTimelineNavigationPath.NavigationPropertyPath;
		this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull = this._getChildEntityTypeFull( this._oEntityMappings[sEntityCollection].entityType, this._oEntityMappings[sEntityCollection].timelineEntryNavigationPath );	
		this._oEntityMappings[sEntityCollection].timelineEntryEntityType = this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull.split(".")[1];
		this._oEntityMappings[sEntityCollection].timelineEntryFields = undefined;

		var oTimelineEntryEntityFields = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull][this.sSchemaNamespace + ".TimelineEntry"];
		if(!oTimelineEntryEntityFields){
			oTimelineEntryEntityFields = this._oServiceAnnotations[this._oEntityMappings[sEntityCollection].timelineEntryEntityTypeFull][this._getCollaborationAlias() + ".TimelineEntry"];
		}
		this._oEntityMappings[sEntityCollection].timelineEntryDetailNavigationPath = oTimelineEntryEntityFields.TimelineDetailNavigationPath.NavigationPropertyPath;
		this._oEntityMappings[sEntityCollection].timelineEntryDetailEntityTypeFull = this._getChildEntityTypeFull( this._oEntityMappings[sEntityCollection].timelineEntryEntityType, this._oEntityMappings[sEntityCollection].timelineEntryDetailNavigationPath );
		this._oEntityMappings[sEntityCollection].timelineEntryDetailFields = undefined;
			
		return this._oEntityMappings[sEntityCollection];
	},
	/**
	 * Get the full entity type from the service metadata for given entity collection
	 * @private
	 * @param sEntityCollection
	 * @returns {string} entityType
	 */
	_getEntityTypeFull: function(sEntityCollection){
		for (var i = this._oServiceMetadata.dataServices.schema.length - 1; i >= 0; i--) {
			var oMetadataSchema = this._oServiceMetadata.dataServices.schema[i];
			if (oMetadataSchema.entityContainer) {
				var aEntitySets = oMetadataSchema.entityContainer[0].entitySet;
				for (var j = aEntitySets.length - 1; j >= 0; j--) {
					if (aEntitySets[j].name === sEntityCollection) {
						return aEntitySets[j].entityType;
					}
				}
			}
		}
		throw new Error("Entity collection '" + sEntityCollection + "' could not be found in service");
	},
	/**
	 * Get the full entity type for a child entity 
	 * @param sEntityType
	 * @param sNavigationPath
	 * @returns {object} returns an object from the service metadata representing the entity type of the Timeline Entry
	 */
	_getChildEntityTypeFull: function(sEntityType, sNavigationPath){
		var oEntityType = this._getEntityTypeObject(sEntityType);
		var oNavigationProperty = this._getNavigationProperty(oEntityType, sNavigationPath);
		var oAssociationEnd = this._getAssociationEnd(oNavigationProperty.toRole);
		
		return oAssociationEnd.type;
	},
	/**
	 * Get the entity type object
	 * @param sEntityType
	 * @returns {object} returns an object from the service metadata representing the entity type
	 */
	_getEntityTypeObject: function(sEntityType){
		for (var i = this._oServiceMetadata.dataServices.schema.length - 1; i >= 0; i--) {
			var oMetadataSchema = this._oServiceMetadata.dataServices.schema[i];
			if (oMetadataSchema.entityType) {
				var aEntityTypes = oMetadataSchema.entityType;
				for (var j = aEntityTypes.length - 1; j >= 0; j--) {
					if (aEntityTypes[j].name === sEntityType ) {
						return aEntityTypes[j];
					}
				}
			}
		}
		throw new Error("Entity Type '" + sEntityType + "' could not be found in service");
	},
	/**
	 * Get the navigation property object
	 * @param oEntityType
	 * @param sNavigationProperty
	 * @returns {object} returns an object from the service metadata representing the navigation property 
	 */
	_getNavigationProperty: function(oEntityType, sNavigationProperty){
		if(oEntityType.navigationProperty){
			for (var k = oEntityType.navigationProperty.length - 1; k >= 0; k--) {
				if(oEntityType.navigationProperty[k].name === sNavigationProperty){
					return oEntityType.navigationProperty[k];
				}
			}
		}
		throw new Error("Navigation property '" + sNavigationProperty + "' could not be found for entity '"+ oEntityType.name + "'.");
	},
	/**
	 * Get association end object
	 * @param sRole
	 * @returns {object} returns an object from the service metadata representing the association end
	 */
	_getAssociationEnd: function(sRole){
		for (var i = this._oServiceMetadata.dataServices.schema.length - 1; i >= 0; i--) {
			var oMetadataSchema = this._oServiceMetadata.dataServices.schema[i];
			if (oMetadataSchema.association) {
				for (var j = oMetadataSchema.association.length - 1; j >= 0; j--) {
					for(var k = oMetadataSchema.association[j].end.length - 1; k>=0; k--){
						if( oMetadataSchema.association[j].end[k].role === sRole ){
							return oMetadataSchema.association[j].end[k];
						}
					}
				}
			}
		}
		throw new Error("Association with role '" + sRole + "' could not be found in service.");
	},
	/**
	 * Returns an object map of an entity's field names
	 * @param oEntityFields
	 * @returns {object}
	 */
	_mapEntityFields: function(oEntityFields){
		var oFields = {};
		for (var oProperty in oEntityFields) {
			if (oEntityFields.hasOwnProperty(oProperty)) {
				if (oEntityFields[oProperty].Path) {
					oFields[oProperty] = oEntityFields[oProperty].Path;
				} else if (oEntityFields[oProperty].PropertyPath) {
					oFields[oProperty] = oEntityFields[oProperty].PropertyPath;
				} else if (oEntityFields[oProperty].EnumMember) {
					oFields[oProperty] = oEntityFields[oProperty].EnumMember;
				} else if (oEntityFields[oProperty].NavigationPropertyPath) {
					oFields[oProperty] = oEntityFields[oProperty].NavigationPropertyPath;
				}
			}
		}
		return oFields;
	},
	/**
	 * Get collaboration definition
	 * @returns {string}
	 */
	_getCollaborationAlias: function(){
		var aliasDefinitions = this._oServiceAnnotations.aliasDefinitions;
		for(var alias in aliasDefinitions){
			if(aliasDefinitions[alias].indexOf("com.sap.vocabularies.Collaboration.v1") > -1){
				return alias;
			}
		}
	},

	
	
	/**
	 * Obtains the schema with the specified namespace from a Reference element in the metadata document. If
	 * the schema is defined within a Schema element, then this method returns undefined.
	 * @private
	 * @param sSchemaNamespace The namespace of the schema to return.
	 * @returns {object} Returns an object with the following structure: {schemaNamespace:"namespace", schemaAlias:"alias"}. If the schema doesn't use an alias,
	 * then the schemaAlias property value will be undefined. If the schema can't be found in a Reference element of the Metadata Document, then this method
	 * returns undefined.
	 */
	_getIncludedSchema: function(sSchemaNamespace) {
		// Iterate through the reference elements.
		var i = 0;
		var j = 0;
		var k = 0;
		var oReference;
		var oReferenceChild;
		var oIncludeAttribute;
		var oSchema = {schemaNamespace:undefined, schemaAlias:undefined};
		if (this._oServiceMetadata && this._oServiceMetadata.extensions) {
			// Iterate through the Reference elements.
			for(i = 0; i < this._oServiceMetadata.extensions.length; ++i) {
				oReference = this._oServiceMetadata.extensions[i];
				// Iterate through the child elements; we pay attention to the Include elements only.
				for(j = 0; j < oReference.children.length; ++j) {
					oReferenceChild = oReference.children[j];
					if (oReferenceChild.name == "Include") {
						// We then extract the Namespace and Alias attribute values.
						for (k = 0; k < oReferenceChild.attributes.length; ++k) {
							oIncludeAttribute = oReferenceChild.attributes[k];
							if (oIncludeAttribute.name == "Namespace") {
								oSchema.schemaNamespace = oIncludeAttribute.value;
							}
							if (oIncludeAttribute.name == "Alias") {
								oSchema.schemaAlias = oIncludeAttribute.value;
							}
						}
						// Return this schema if it matches the input namespace.
						if (oSchema.schemaNamespace == sSchemaNamespace) {
							return oSchema;
						}
					} 
				}
			}
			// If the schema wasn't found within a Reference element, then return undefined.
			return undefined;
		}
		return undefined;
	}
});
}; // end of sap/collaboration/components/socialtimeline/annotations/TimelineTermsUtility.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.controls.TimelineEntryControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.controls.TimelineEntryControlRenderer");
sap.collaboration.components.socialtimeline.controls.TimelineEntryControlRenderer={};
sap.collaboration.components.socialtimeline.controls.TimelineEntryControlRenderer.render = function(oRm,oControl){
	
	oRm.renderControl(oControl._oFlexbox);
};

}; // end of sap/collaboration/components/socialtimeline/controls/TimelineEntryControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler");

sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler",{
	/**
	 * Constructor for the Service Data handler
	 * This class is responsible with providing the History data for a given business object
	 * 
	 * @class ServiceDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler
	 *
	 * @constructor
	 * @param {Object} oBOModel Business Object OData Service Model
	 * @param {sap.collaboration.components.socialtimeline.datahandlers.TimelineTermsUtility} oTimelineTermsUtility - Utility class for the timeline terminology
	 */
	constructor: function(oBOModel, oTimelineTermsUtility) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler");
		
		this._oBOModel = oBOModel;
		this._oTimelineTermsUtility = oTimelineTermsUtility;
	},
	/**
	 * Perform the read to retrieve the timeline entries of a given business object
	 * @param {String} sEntityCollection - Entity collection name
	 * @param {String} sBOKey - Business object key
	 * @param {integer} iSkip - Skip token
	 * @param {integer} iTop - Top token
	 * @returns {Object} HTTP request
	 */
	readTimelineEntries: function(sEntityCollection, sBOKey, sOdataFilter, iSkip, iTop){
		var self = this;
		var oPromise = new jQuery.Deferred();
		
		var sEndpoint = this._buildTimelineEntriesEndpoint(sEntityCollection, sBOKey, sOdataFilter, iSkip, iTop);
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				filters: [],
				sorters: [],
				success: function(oData,response){
					var oResponseData = oData;
					if (oData.__next){
						var oNextLinkData = self._resolveResponseNextLink(oData.__next, sEntityCollection, sBOKey);
						oResponseData.results = oResponseData.results.concat(oNextLinkData.results);
					}
					oPromise.resolve(oResponseData.results);
				}, 
				error: 	function(oError){
					self._oLogger.error(oError.body);
					oPromise.reject(oError);
				}
		};
		
		return {
			request: this._oBOModel.read(sEndpoint, mParameters),
			promise: oPromise
		};
	},
	/**
	 * Resolves the next link for the timeline entries
	 * @param {String} sNextLink - Next link for the data
	 * @param {String} sEntityCollection - Entity collection name
	 * @param {String} sBOKey - Business object key
	 * @returns {Array} Timeline entries data
	 */
	_resolveResponseNextLink : function(sNextLink, sEntityCollection, sBOKey) {
		var self = this;
		var oResponseData = [];
		var sNextLinkEndPoint = sNextLink.slice( sNextLink.indexOf(sEntityCollection + "(" + jQuery.sap.encodeURL(sBOKey) + ")" ) - 1);
		var mParameters = {
				context: null,
				urlParameters: null,
				async: false,
				filters: [],
				sorters: [],
				success: function(oData,response){
					oResponseData = oData;
					if (oData.__next){
						var oNextLinkData = self._resolveResponseNextLink(oData.__next, sEntityCollection, sBOKey);
						oResponseData.results = oResponseData.results.concat(oNextLinkData.results);
					}
				}, 
				error: 	function(oError){
					self._oLogger.error(oError.body);
				}
		};
		
		this._oBOModel.read(sNextLinkEndPoint,mParameters);
		
		return oResponseData;
	},
	/**
	 * Builds the endpoint to get the History
	 * @param {String} sEntityCollection - Entity collection name
	 * @param {String} sBOKey - Business object key
	 * @param {integer} iSkip - Skip token
	 * @param {integer} iTop - Top token
	 * @returns {String} Timeline Entries endpoint
	 */
	_buildTimelineEntriesEndpoint: function(sEntityCollection, sBOKey, sOdataFilter, iSkip, iTop){
		var endpoint = "/" + sEntityCollection + "(" + jQuery.sap.encodeURL(sBOKey) + ")" + 
				"/" + this._oTimelineTermsUtility.getTimelineEntryNavigationPath(sEntityCollection) + 
				"?$expand=" + this._oTimelineTermsUtility.getTimelineEntryFields(sEntityCollection).TimelineDetailNavigationPath;
		if(iSkip != undefined){
			endpoint +=	"&$skip=" + iSkip;	
		}
		if(iTop != undefined){
			endpoint += "&$top=" + iTop;
		}
		if(sOdataFilter != undefined){
			endpoint += "&$filter=" + sOdataFilter;
		}
		
		this._oLogger.info("Timeline Entries Endpoint: " + endpoint);
		return endpoint;
	}
	
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/ServiceDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.JamUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* JamUtil helper class
*
* Is responsible for the integration and communication with the
* JAM APIs
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.JamUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.JamUtil",{
	
	FeedRenderedControllerConstants : {
		jamWidgetCSS :	{
			avatar: false, 
			skin: "gr", 
			post_mode: "inline", 
			reply_mode: "inline",
			mobile_mode: true,
			live_update: true
		}
	},
	
	JamFeedType: {
		Follows: "follows",
		Company: "company",
		Group: "group",
		ObjectGroup: "context",
		Object: "external"
	},
	
	JamCallback: {
		autocomplete: "autocomplete",
		post_status: "post_status",
		link: "link"		
	},	
	
	JamEventType: {
		mouseover: "mouseover",
		mouseout: "mouseout",
		click: "click"
	},
	
	/**
	 * Creates the feed widget
	 * @param {string} sJamURL The URL for the JAM System
	 * @param {callback} fLoadSuccess A call back function in case of success
	 * @param {callback} fLoadError A call back function in case of error
	 * @private
	 */
	loadFeedWidgetScript : function(sJamURL, fLoadSuccess, fLoadError) {
		var self = this;
		var sScriptUrl = sJamURL  + "/assets/feed_widget_v1.js";
		
		jQuery.sap.includeScript(sScriptUrl, "sap.collaboration.feed.JamFeedWidget", fLoadSuccess, fLoadError);
		jQuery.sap.log.info("Jam Feed Widget Script Loading Asynchronously","sap.collaboration.components.utils.JamUtil.loadFeedWidgetScript()");
		
	},
	
	/**
	 * Initialize the JAM feed widget by calling JAM API
	 * @param {string} sJamURL The URL for the JAM System
	 * @private
	 */
	initializeJamWidget : function(sJamURL) {
		try{
		   this.sapjam = eval('sapjam');
		   this.sapjam.feedWidget.init(sJamURL + "/widget/v1/feed", "single_use_token");
		   jQuery.sap.log.info("Jam Feed Widget Initialized", "sap.collaboration.components.utils.JamUtil.initializeJamWidget()");
		   // "/c/cubetree.com/widget/v1/feed", "single_use_token"
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.initializeJamWidget()");
			throw oError;
		}
	},

   /**
	 * Creates the JAM feed widget by calling the JAM API
	 * @param {string} sJamToken A JAM token
	 * @param {string} sWidgetContainerID The DIV ID for the widget
	 * @param {string} sFeedType The widget feed type
	 * @param {string} sGroupIds The JAM groups ID in case feed type is "group"
	 * @param {object} oBusinessObject The object in case of object feed
	 * @private
	 */
	createJamWidget:function(sWidgetContainerID, oWidgetData){
		try{							
			jQuery.sap.log.debug("Jam Feed Widget Properties:", "", "sap.collaboration.components.utils.JamUtil.createJamWidget()");
			jQuery.sap.log.debug("type: " + JSON.stringify(oWidgetData.type));
			jQuery.sap.log.debug("group_id: " + JSON.stringify(oWidgetData.group_id));
			jQuery.sap.log.debug("external_id: " + JSON.stringify(oWidgetData.external_id));
			jQuery.sap.log.debug("external_type: " + JSON.stringify(oWidgetData.external_type));
	        jQuery.sap.log.debug("external_object: " + JSON.stringify(oWidgetData.external_object));
	        
			this.sapjam = eval('sapjam');
			this.sapjam.feedWidget.create(sWidgetContainerID, oWidgetData);
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.createJamWidget()");
			throw oError;
		}

	},
	
	/**
	 * Creates the data needed by the JAM API to create the widget 
	 * @param {string} sJamToken A JAM token
	 * @param {string} sFeedType The widget feed type
	 * @param {string} sGroupIds The JAM groups ID in case feed type is "group"
	 * @param {object} oBusinessObject The object in case of object feed
	 * @private
	 */
	prepareWidgetData:function(sJamToken, sFeedType, sGroupIds, oBusinessObject) {
		var oWidgetData;
		
		oWidgetData = {
			type: sFeedType, 
			avatar: this.FeedRenderedControllerConstants.jamWidgetCSS.avatar, 
			//skin: this.FeedRenderedControllerConstants.jamWidgetCSS.skin, 
			live_update: this.FeedRenderedControllerConstants.jamWidgetCSS.live_update,
			post_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.post_mode, 
			reply_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.reply_mode,
			mobile_mode: this.FeedRenderedControllerConstants.jamWidgetCSS.mobile_mode,
			hide_bookmark: true,
			single_use_token: sJamToken
		};
		
		switch(sFeedType){
			case sap.collaboration.FeedType.follows:
	   		case sap.collaboration.FeedType.company:
				oWidgetData.type = sFeedType;
				break;
	   		case sap.collaboration.FeedType.group:
	   		case sap.collaboration.FeedType.objectGroup:
				oWidgetData.type 			= this.JamFeedType.Group;
				oWidgetData.group_id 		= sGroupIds;
				break;
	   		case sap.collaboration.FeedType.object:
				oWidgetData.type 			= this.JamFeedType.Object;
				if(!oBusinessObject){
					var oErrorObjectUndefined = new Error("Object is undefined");
					jQuery.sap.log.error(oErrorObjectUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorObjectUndefined;
				}
				if(!oBusinessObject.id){
					var oErrorIdUndefined = new Error("Property 'id' is undefined");
					jQuery.sap.log.error(oErrorIdUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorIdUndefined;
				}
				if(!oBusinessObject.type){
					var oErrorTypeUndefined = new Error("Property 'type' is undefined");
					jQuery.sap.log.error(oErrorTypeUndefined, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oErrorTypeUndefined;
				}
				try{
					oWidgetData.external_id		= oBusinessObject.id;
					oWidgetData.external_type	= oBusinessObject.type;					
					oWidgetData.external_object = oBusinessObject;
				} catch(oError){
					jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
					throw oError;
				}
				break;
	   		default:
				var sError = "Feed Type not supported";
				jQuery.sap.log.error(sError, "", "sap.collaboration.components.utils.JamUtil.prepareWidgetData()");
				throw new Error(sError);
		}
		
		return oWidgetData;
	},
	
	/**
	 * Creates a XMLHttpRequest object to make a request the single use token from the SAP Jam REST API. If successful, returns the single use token
	 * @param {string} sCollaborationHostRestService The REST Service URL
	 * @param {function} fnAjaxCallback The callback function for the AJAX request
	 * @param {boolean} bAsync Whether the AJAX call should be asynchronous or not
	 */
	getJamSinglelUseTokens: function(sCollaborationHostRestService, fnAjaxCallback, bAsync, sCSRFToken){
		var self = this;
		var xmlHttpRequest = new window.XMLHttpRequest();	
		var sSingleUseTokenPostURL = sCollaborationHostRestService + "/single_use_tokens";
		
		xmlHttpRequest.open("POST",	sSingleUseTokenPostURL, bAsync);			
		xmlHttpRequest.onreadystatechange = fnAjaxCallback;
		xmlHttpRequest.setRequestHeader("x-csrf-token", sCSRFToken);
		xmlHttpRequest.send();
	},
	
	/**
	 * Creates a XMLHttpRequest object to make a request the single use token from the SAP Jam REST API. If successful, returns the single use token
	 * @param {string} sCollaborationHostRestService The REST Service URL
	 * @param {function} fnAjaxCallback The callback function for the AJAX request
	 * @param {boolean} bAsync Whether the AJAX call should be asynchronous or not
	 */
	getCSRFToken: function(sEndPoint, fnAjaxCallback, bAsync){
		var self = this;
		var xmlHttpRequest = new window.XMLHttpRequest();
		
		xmlHttpRequest.open("GET",	sEndPoint, bAsync);			
		xmlHttpRequest.onreadystatechange = fnAjaxCallback;
		xmlHttpRequest.setRequestHeader("x-csrf-token", "fetch");
		xmlHttpRequest.send();
	}
});
}; // end of sap/collaboration/components/utils/JamUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.MessageQueueUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* Message queue utility class to manager user messages
* 
**************************************************************/

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.utils.MessageQueueUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.MessageQueueUtil",{
	
	/* Constants for MessageQueueUtil class*/
	messageTypes: {
		messageToast : "MToast",
		messageBox : "MBox"
	},
	
	/*Queue to hold messages*/
	aMessageQueue: [],

	/**
	 * Adds the message to the queue and checks if this is the only message in the queue. If so, then the message is displayed immediately.
	 * The method afterMessageClose() is attached to oOptions and passed to the options parameter in the message. If there is more than 1 message in the queue,
	 * it is displayed only after the previous message is completed. This check is done in the afterMessageClose() method.
	 * @public
	 */
	displayMessage: function(sMessage, oOptions, sTypeOfMessage) {
		var oLocalOptions = oOptions;
		
		oLocalOptions.onClose = this.afterMessageClose();
		
		this.addMessageToQueue(sMessage, oLocalOptions, sTypeOfMessage);
		
		if(this.aMessageQueue.length == 1){
			if(this.aMessageQueue[0].type == this.messageTypes.messageBox){
				sap.m.MessageBox.show(this.aMessageQueue[0].message, this.aMessageQueue[0].options);
			}
			else if(this.aMessageQueue[0].type == this.messageTypes.messageToast){
				sap.m.MessageToast.show(this.aMessageQueue[0].message, this.aMessageQueue[0].options);
			}
		}
	},
	
	/**
	 * Add message to the queue
	 * @private
	 */
	addMessageToQueue: function(sMessage, oLocalOptions, sTypeOfMessage){
		this.aMessageQueue.push({message: sMessage, options: oLocalOptions, type: sTypeOfMessage});
	},
	
	/**
	 * Method to be executed after the message is closed. This method is attached to oOptions and passed to the message.
	 * It checks if there are messages in the queue and if so, then displays the message. This only occurs after the previous message is closed.
	 * @private
	 */
	afterMessageClose: function(){
		var self = this;
		return function(){
			self.aMessageQueue.shift();
		
			if(self.aMessageQueue.length != 0){
				if(self.aMessageQueue[0].type == self.messageTypes.messageBox){
					sap.m.MessageBox.show(self.aMessageQueue[0].message, self.aMessageQueue[0].options);
				}
				else if(self.aMessageQueue[0].type == self.messageTypes.messageToast){
					sap.m.MessageToast.show(self.aMessageQueue[0].message, self.aMessageQueue[0].options);
				}
			}
		};
	}
});
}; // end of sap/collaboration/components/utils/MessageQueueUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.NotificationTypeUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* OdataUtil helper class
*
* Is responsible for the integration and communication with the
* Backend OData Server
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.NotificationTypeUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.NotificationTypeUtil",{
	
	/**
	 * Constants for the OdataUtil Class
	 */
	map: {
		AbuseReported : [],
		AcceptAddedAsAssistant : ["SenderFullName"],
		AcceptAddedAsMgr : ["SenderFullName"],
		AcceptAddedAsReport : ["SenderFullName"],
		AddedAsAssistant : ["SenderFullName"],
		AddedAsMgr : ["SenderFullName"],
		AddedAsReport : ["SenderFullName"],
		AutoGroupAdmin : ["SenderFullName"],
		AutoGroupMember : ["SenderFullName"],
		CommentInDiscussion : ["SenderFullName"],
		CrossCompanyInviteToGroup : ["SenderFullName", "ObjName"],
		FeatureInGroup : ["SenderFullName"],
		GoalMigrated : [],
		GroupContentPendingApproval : [],
		GroupAccessRequest : ["ObjName"], // there are {0} pending requests to join a group
		InviteToFollow : ["SenderFullName"],
		InviteToInactiveGroup : ["SenderFullName"],
		InviteToGroup : ["SenderFullName"],
		Like : ["SenderFullName"],
		MarkComment : ["SenderFullName"],
		MarkCommentSimple : ["SenderFullName"],
		MentionInFeed : ["SenderFullName"],
		ReceiveKudoType : ["SenderFullName", "ObjName"],
		ReceivedKudo : ["SenderFullName", "ObjName"],
		ReceiveKudo : ["SenderFullName", "ObjName"],
		RejectAddedAsAssistant : ["SenderFullName"],
		RejectAddedAsMgr : ["SenderFullName"],
		RejectAddedAsReport : ["SenderFullName"],
		ReplyInFeed : ["SenderFullName"],
		RemovedAsAssistant : ["SenderFullName"],
		RemovedAsMgr : ["SenderFullName"],
		RemovedAsReport : ["SenderFullName"],
		RejectPendingContent : ["ObjName"],
		RequestToBeGroupAdmin : ["SenderFullName"],
		SkillNudge : ["SenderFullName"],
		SubscribedToFeed : ["SenderFullName"],
		SuggestTopic : ["SenderFullName", "ObjName"],
		send_nudge : ["custom_brand_name"],
		TaskAssigned : ["SenderFullName"],
		TaskNudge : ["SenderFullName"],
		user_new_features : ["custom_brand_name"]
	},

	/**
	 * Gets the notification type text for a given notification 
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} sJamUrl A string containing the URL of the Collaboration Tool (Jam) 
	 * @private
	 */
	getRequiredNotificationPropertyNames : function(sNotificationType) {
		return this.map[sNotificationType] ? this.map[sNotificationType] : []; 
	}
	
});
}; // end of sap/collaboration/components/utils/NotificationTypeUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.library') ) {
/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.collaboration (1.28.1)
 */
jQuery.sap.declare("sap.collaboration.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: SAP Collaboration for Social Media Integration.
 *
 * @namespace
 * @name sap.collaboration
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.collaboration",
	dependencies : ["sap.ui.core","sap.suite.ui.commons"],
	types: [
		"sap.collaboration.AppType",
		"sap.collaboration.FeedType"
	],
	interfaces: [],
	controls: [],
	elements: [],
	version: "1.28.1"
});

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.AppType.
jQuery.sap.declare("sap.collaboration.AppType");
/**
 * @class Application Type (Mode)
 *
 * @version 1.28.1
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.collaboration.AppType = {

	/**
	 * Fiori Split App
	 * @public
	 */
	split : "split",

	/**
	 * SAP Jam Feed Widget Wrapper
	 * @public
	 */
	widget : "widget"

};
/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.collaboration.FeedType.
jQuery.sap.declare("sap.collaboration.FeedType");
/**
 * @class Feed Types
 *
 * @version 1.28.1
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.collaboration.FeedType = {

	/**
	 * Follows feed type
	 * @public
	 */
	follows : "follows",

	/**
	 * Company feed type
	 * @public
	 */
	company : "company",

	/**
	 * Group feed type
	 * @public
	 */
	group : "group",

	/**
	 * Object group feed type
	 * @public
	 */
	objectGroup : "objectGroup",

	/**
	 * Oject feed type
	 * @public
	 */
	object : "object"

};

}; // end of sap/collaboration/library.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.commons.Detail.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.feed.commons.Detail.controller');
/*!
 * @copyright@
 */


/**********************************************************
* Detail View Controller
*
* Is the controller for the Detail View and is responsible 
* for loading JAM API Script and for creating and rendering
* the JAM Feed Widget
***********************************************************/

sap.ui.controller("sap.collaboration.components.fiori.feed.commons.Detail", {
	
/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* It initializes class variables.
* @memberOf detail
*/
	onInit: function() {
		this.sJamToken = this.getView().getViewData().jamToken;
		this.sJamURL = this.getView().getViewData().jamURL;
		this.oLangBundle = this.getView().getViewData().langBundle;
		this.sPrefixId  = this.getView().getViewData().controlId;
		this.oBusinessObject = this.getView().getViewData().businessObject;
		
		this.bJamWidgetInitialized = false;
		
		if (this.getView().getViewData().appType === sap.collaboration.AppType.split){
			this.sFeedType = sap.collaboration.FeedType.follows;
		} else{
			this.sFeedType = this.getView().getViewData().feedType;
			this.getView().oDetailPage.setShowHeader(false);
		}
		
		this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf detail
*/
	onBeforeRendering: function() {
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* It calls the loadFeedWidgetScript() function. Please refer to this function for the JSDoc.
* @memberOf detail
*/
	onAfterRendering: function() {		
		try{
			this.loadFeedWidget(this.sJamURL);			
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.onInit()");
			throw oError;
		}
	},
	
	/**
	 * Loads the JAM API scripts used to create feed widget
	 * @private
	 */
	loadFeedWidget: function(sJamURL){
	   var self = this;	 
		   
	   try{
		   //1) Prepare the widget data
		   var sGroupIds = self.getView().getViewData().groupIds;
		   var oWidgetData = this.oJamUtil.prepareWidgetData(self.sJamToken, self.sFeedType, sGroupIds, self.oBusinessObject);
		   	   
		   // Callback function to get notified once the script has been loaded
		   var fLoadSuccess = function(response){
			   jQuery.sap.log.info("Jam Feed Widget Loaded Successfully","sap.collaboration.components.fiori.feed.commons.Detail.onInit()");
			   
			   //3) Initialize the jam widget
			   self.oJamUtil.initializeJamWidget(self.sJamURL);	
			   self.bJamWidgetInitialized = true;
			   
			   //4) Create the Feed Widget
			   self.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
	   		};	
		   		   	
		   	var fLoadError = function(oError){
		   		jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.loadFeedWidgetScript()");
		   		throw oError;
		   	};
		   	
		    //2) Load the feed widget
		   	// if the self.bJamWidgetInitialized = true this means that the Jam script is loaded and the widget is initialized
		   	if (this.bJamWidgetInitialized === false){
		   		this.oJamUtil.loadFeedWidgetScript(sJamURL, fLoadSuccess, fLoadError);
		   	} else{
		   		this.oJamUtil.createJamWidget(self.sPrefixId + "widgetContainer", oWidgetData);
		   	}
		} catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.commons.Detail.loadFeedWidgetScript()");
			throw oError;
		}
			
	}
	   
/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf detail
*/
//	onExit: function() {
//
//	}
	
});
}; // end of sap/collaboration/components/fiori/feed/commons/Detail.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.Notification.view') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.notification.Notification.view');
/*!
 * @copyright@
 */




sap.ui.jsview("sap.collaboration.components.fiori.notification.Notification", {

	/** Specifies the Controller belonging to this View. 
	* In the case that it is not implemented, or that "null" is returned, this View does not have a Controller.
	* @memberOf Notification
	*/ 
	getControllerName : function() {
		return "sap.collaboration.components.fiori.notification.Notification";
	},

	/** Is initially called once after the Controller has been instantiated. It is the place where the UI is constructed. 
	* Since the Controller is given to this method, its event handlers can be attached right away.
	* Creates and returns a UI5 mobile VBox 
	* @memberOf Notification
	*/ 
	createContent : function(oController) {
		this.sPrefixId = this.getViewData().controlId;
		this.oLangBundle = this.getViewData().langBundle;
		this.sStyleClassPrefix = this.getViewData().styleClassPrefix;
		this.iNumberOfNotifications = this.getViewData().numberOfNotifications;
		this.sNotificationsTargetURL = this.getViewData().notificationsTargetUrl;
		
		var oContainerBox = this.createContainerBox();
		return oContainerBox;
	},
	
	createContainerBox : function(){
		
		var self = this;
		this.aProfilePhotos = this.createProfilePhotos();
		this.oNotificationTypeText = this.createNotificationTypeText();
		this.oNotificationMessageText = this.createNotificationMessageText();
		
		var oNotificationUnreadCountVBox = this.createNotificationUnreadCountVBox();
		var oAgeAndGroupVBox = this.createNotificationAgeAndGroupVBox();
		
		var oContainerBox = new sap.collaboration.components.fiori.notification.NotificationContainer(this.sPrefixId + "_ContainerBox", {
		    		styleClassPrefix : this.sStyleClassPrefix
		});
		for (var i = 0; i < this.aProfilePhotos.length; ++i) {
			oContainerBox.addContent(this.aProfilePhotos[i]);
		}
		oContainerBox.addContent(this.oNotificationTypeText);
		oContainerBox.addContent(this.oNotificationMessageText);
		oContainerBox.addContent(oNotificationUnreadCountVBox);
		oContainerBox.addContent(oAgeAndGroupVBox);
		
		return oContainerBox;
	},
	
	createProfilePhotos : function() {
		var aProfilePhotos = [];
		for (var i = 0; i < this.iNumberOfNotifications; ++i) {
			aProfilePhotos.push(
			    new sap.m.Image(this.sPrefixId + "_ProfileImage" + i,{
			    	densityAware: false,
			    	decorative: true
			    }).addStyleClass(this.sStyleClassPrefix + "ProfileImage")
			      .addStyleClass(this.sStyleClassPrefix + "ProfileImageHidden")
			      .addStyleClass(this.sStyleClassPrefix + "CursorPointer")
			);
		}
		return aProfilePhotos;
	},
	
	createNotificationTypeText : function() {
		return new sap.m.Text(this.sPrefixId + "_NotificationType").addStyleClass(this.sStyleClassPrefix + "NotificationTypeText")
		                                                           .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationMessageText : function() {
		return new sap.m.Text(this.sPrefixId + "_NotificationMessage").addStyleClass(this.sStyleClassPrefix + "NotificationMessageText")
                                                                      .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationUnreadCountText : function() {
		return new sap.m.Text(this.sPrefixId + "_NotificationUnreadCount").addStyleClass(this.sStyleClassPrefix + "NotificationUnreadCountText")
   		                                                                  .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationNewNotificationOrErrorText : function() {
		return new sap.m.Text(this.sPrefixId + "_NewNotificationOrErrorText").addStyleClass(this.sStyleClassPrefix + "CursorPointer");
	},
	
	createNotificationUnreadCountVBox : function() {
		this.oNotificationUnreadCountText = this.createNotificationUnreadCountText();
		this.oNotificationNewNotificationOrErrorText = this.createNotificationNewNotificationOrErrorText();
		
		var oNotificationUnreadCountVBox = new sap.m.VBox(this.sPrefixId + "_UnreadCountVBox", {
			items:[
			  this.oNotificationUnreadCountText,
			  this.oNotificationNewNotificationOrErrorText
			]
		}).addStyleClass(this.sStyleClassPrefix + "NotificationUnreadContainer");
		
		return oNotificationUnreadCountVBox;
	},
	
	createNotificationAgeAndGroupVBox : function() {
		this.oNotificationAgeText = new sap.m.Text(this.sPrefixId + "_NotificationAge", {
			textAlign: sap.ui.core.TextAlign.Right,
			}).addStyleClass(this.sStyleClassPrefix + "NotificationAgeAndGroupText")
		                                                .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
		this.oNotificationGroupText = new sap.m.Text(this.sPrefixId + "_NotificationGroup", {
			textAlign: sap.ui.core.TextAlign.Right,
			}).addStyleClass(this.sStyleClassPrefix + "NotificationAgeAndGroupText")
		                                                .addStyleClass(this.sStyleClassPrefix + "CursorPointer");
		
		var oAgeAndGroupVBox = new sap.m.VBox(this.sPrefixId + "_AgeAndGroupVBox", {
			items:[this.oNotificationAgeText, this.oNotificationGroupText]
		}).addStyleClass(this.sStyleClassPrefix + "NotificationAgeAndGroupContainer");
//		oAgeAndGroupVBox.setAlignItems(sap.m.FlexAlignItems.End); // Ensures that all items in the VBox are aligned 
		
		return oAgeAndGroupVBox;
	},
	
	// When clicking on the view, the tap event is triggered for desktop
	ontap : function() {
		window.open(this.sNotificationsTargetURL, window.name);
	}
});
}; // end of sap/collaboration/components/fiori/notification/Notification.view.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.attachment.Attachment') ) {
/*!
 * @copyright@
 */

/**
 * This module is a class whose objects are meant to hold information about a single file.
 */
jQuery.sap.declare("sap.collaboration.components.fiori.sharing.attachment.Attachment");




/**
 * <p>This constructor must be called in the following way:</p> 
 * <p>new Attachment("name", "mimeType", "url")</p>
 * <p>name, mimeType, and url are only place holders and can be any string.</p>
 * @since version 1.20
 * @constructor
 * @param {string} name: The file's name.
 * @param {string} mimeType: The file's mime type.
 * @param {string} url: A url that points to the file.
 * 
 * @class Attachment
 * 
 * Attachment objects represent files.
 * @name sap.collaboration.components.fiori.sharing.attachment.Attachment
 * @public
 */
sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.attachment.Attachment", {
	constructor: function(name, mimeType, url) {
		// There are two ways of calling this constructor
		// new Attachment("name", "mimeType", "url") or
		if (	arguments.length === 3 &&
				Object.prototype.toString.call(name) === "[object String]" &&
				Object.prototype.toString.call(mimeType) === "[object String]" &&
				Object.prototype.toString.call(url) === "[object String]") {
			/** @private */ this.name = name;
			/** @private */ this.mimeType = mimeType;
			/** @private */ this.url = url;
		} 
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentConstructorArgumentsException();
		}
	},
	
	getName: function() {
		return this.name;
	},
	getMimeType: function() {
		return this.mimeType;
	},
	getUrl: function() {
		return this.url;
	},
	
	setName: function(name) {
		if (arguments.length === 1 && Object.prototype.toString.call(name) === "[object String]") {
			this.name = name;
		}
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException("name");
		}
	},
	setMimeType: function(mimeType) {
		if (arguments.length === 1 && Object.prototype.toString.call(mimeType) === "[object String]") {
			this.mimeType = mimeType;
		}
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException("mimeType");
		}
	},
	setUrl: function(url) {
		if (arguments.length === 1 && Object.prototype.toString.call(url) === "[object String]") {
			this.url = url;
		}
		else {
			throw new sap.collaboration.components.fiori.sharing.attachment.InvalidAttachmentParameterException("url");
		}
	}
});
}; // end of sap/collaboration/components/fiori/sharing/attachment/Attachment.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.CommonUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* CommonUtil helper class
*
* Common utilities functions
**************************************************************/

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained



jQuery.sap.declare("sap.collaboration.components.utils.CommonUtil");

sap.ui.base.Object.extend("sap.collaboration.components.utils.CommonUtil",{
	
	constructor: function() {	
		this.MessageQueueUtil = new sap.collaboration.components.utils.MessageQueueUtil(); 
	},
	
	/**
	 * Gets language bundle
	 * @private
	 */
	getLanguageBundle: function() {
		if (!this.oLangBundle){
			jQuery.sap.require("jquery.sap.resources");
			var sLocale = sap.ui.getCore().getConfiguration().getLanguage();
			this.oLangBundle = jQuery.sap.resources({
				url : jQuery.sap.getModulePath("sap.collaboration.components") + "/resources/i18n/messagebundle.properties", 
				locale: sLocale
			});
		}
		return this.oLangBundle;
	},
	
	/**
	 * Displays a MessageBox with an error message
	 * @param {oError} object The error object
	 * @private
	 */
	displayError : function(sErrorMessageMessage) {
		var self = this;
		var sMessage = "";
		var oOptions = {
				icon: sap.m.MessageBox.Icon.ERROR,
				title: self.getLanguageBundle().getText("SYSTEM_ERROR_MESSAGEBOX_TITLE")
		};
		
		if(!sErrorMessageMessage || sErrorMessageMessage === ""){
			sMessage = self.getLanguageBundle().getText("SYSTEM_ERROR_MESSAGEBOX_GENERAL_TEXT");
		}
		else{
			sMessage = sErrorMessageMessage;
		}
		
		this.MessageQueueUtil.displayMessage(sMessage, oOptions, "MBox");
	},
	
	/**
	 * Creates a Message Toast
	 * @private
	 */
	showMessage : function(sMessage, oOptions) {
		this.MessageQueueUtil.displayMessage(sMessage, oOptions, "MToast");
	},
	
	/**
	 * Test if the given date is a valid date object. If the date is invalid an error message is logged.
	 * @param {Date} The date to be validated.
	 * @private
	 */
	isValidDate : function(dDate) {

	    if (Object.prototype.toString.call(dDate) !== "[object Date]" || isNaN(dDate.getTime())) {
	        jQuery.sap.log.error("DateUtils invalid date=" + dDate);
	        return false;
	    }
	    return true;
	},
	/**
	 * Format date object to string
	 * @param {Date} The date to be formatted
	 * @return {string} Formated date string 
	 * @public
	 */
	formatDateToString: function(oDate){
        var oDateFormatter = sap.ui.core.format.DateFormat.getDateInstance({style:"short", relative:true}, sap.ui.getCore().getConfiguration().getLocale());
        var oTimeFormatter = sap.ui.core.format.DateFormat.getTimeInstance({style:"short"}, sap.ui.getCore().getConfiguration().getLocale());
        var sDate = oDateFormatter.format(oDate) + " at " + oTimeFormatter.format(oDate);

        var pattern = /[A-Za-z]/; //check if the first character is lowercase, if so, then uppercase it
        if(sDate.charAt(0).match(pattern)){
              sDate = sDate.charAt(0).toUpperCase() + sDate.slice(1);
        }
        return sDate;
	},
	
	/**
	 * Returns icon based on mime type
	 * @param {oError} object The error object
	 * @private
	 */
	getIconFromMimeType : function(sVal) {

	    var sIcon = "";
	    if (!sVal) {
	        return "sap-icon://document";
	    }
	    if (sVal.indexOf('image') === 0) {
	        sIcon = "sap-icon://attachment-photo";
	    } else if (sVal.indexOf('video') === 0) {
	        sIcon = "sap-icon://attachment-video";
	    } else if (sVal.indexOf('text') === 0) {
	        sIcon = "sap-icon://attachment-text-file";
	    } else if (sVal.indexOf('audio') === 0) {
	        sIcon = "sap-icon://attachment-audio";
	    } else if (sVal.indexOf('audio') === 0) {
	        sIcon = "sap-icon://attachment-audio";
	    } else if (sVal.indexOf('application') === 0) {

	        switch (sVal) {
	            case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
	            case 'application/vnd.ms-powerpoint':
	            case 'application/vnd.openxmlformats-officedocument.presentationml.template':
	                sIcon =  "sap-icon://ppt-attachment";
	                break;
	            case 'application/msword':
	            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
	            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.template':
	                sIcon =  "sap-icon://doc-attachment";
	                break;
	            case 'application/vnd.ms-excel':
	            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
	            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.template':
	                sIcon = "sap-icon://excel-attachment";
	                break;
	            case 'application/pdf':
	                sIcon = "sap-icon://pdf-attachment";
	                break;
	            case 'application/xhtml+xml':
	                sIcon = "sap-icon://attachment-html";
	                break;
	            case 'application/zip':
	            case 'application/gzip':
	                sIcon = "sap-icon://attachment-zip-file";
	                break;
	            default:
	                sIcon = "sap-icon://document";
	        }
	    } else {
	        sIcon = "sap-icon://document";
	    }
	    return sIcon;
	},
	
	/**
	 * Check if 2 arrays of objects are equal 
	 * @public
	 */	
	areArraysEqual : function(arrayA, arrayB){
		var objectsAreSame = function(x, y) {
		   var objectsAreSame = true;
		   for(var propertyName in x) {
		      if(x[propertyName] !== y[propertyName]) {
		         objectsAreSame = false;
		         break;
		      }
		   }
		   return objectsAreSame;
		};	
		
		if(arrayA.length !== arrayB.length){
			return false;
		}
		for(var i=0; i<arrayA.length; i++){
			if( !objectsAreSame(arrayA[i], arrayB[i]) ){
				return false;
			}
		}
		return true;
	},
	
	/**
	 * Convert a base64 string representation of a File into a Blob
	 * @param {string} b64Data - base64 string representation of the data
	 * @param {string} contentType - content type of file
	 * @param {string} sliceSize - slice size of files
	 * @return {Blob} Blob object 
	 * @public
	 */
	b64toBlob : function (b64Data, contentType, sliceSize) {
	    contentType = contentType || '';
	    sliceSize = sliceSize || 512;
	    
	    var byteCharacters = window.atob(b64Data);
	    var byteArrays = [];
	    
	    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
	        var slice = byteCharacters.slice(offset, offset + sliceSize);
	        
	        var byteNumbers = new Array(slice.length);
	        for (var i = 0; i < slice.length; i++) {
	            byteNumbers[i] = slice.charCodeAt(i);
	        }
	        
	        var byteArray = new window.Uint8Array(byteNumbers);
	        
	        byteArrays.push(byteArray);
	    }
	    
	    var blob = new window.Blob(byteArrays, {type: contentType});
	    return blob;
	}
});
}; // end of sap/collaboration/components/utils/CommonUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.utils.OdataUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* OdataUtil helper class
*
* Is responsible for the integration and communication with the
* Backend OData Server
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.utils.OdataUtil");


sap.ui.base.Object.extend("sap.collaboration.components.utils.OdataUtil",{
	
	/**
	 * Constants for the OdataUtil Class
	 */
	OdataUtilConstants: {
		HttpStatusCode: {
			success: 200,
			created: 201
		},
		
		EndPoint: {
			AssignedGroups: "AssignedGroups",
			BusinessObjects: "BusinessObjects",
			ContentItems: "ContentItems",
			PostContentItem: "PostContentItem",
			Feed: "Feed",
			Folders: "Folders",
			GetCollaborationHostUrl: "GetCollaborationHostURL",
			MapInternalBOToExternalBO: "MapInternalBOToExternalBO",
			GetExternalODataURL: "GetExternalODataURL",
			GetSingleUseToken: "GetSingleUseToken",
			Groups: "Groups",
			GroupsCount: "Groups/$count",			
			GetNotificationUnreadCount: "GetNoticeUnreadCount",
			Notifications: "Notices",
			FeaturedExternalObjects: "FeaturedExternalObjects",
			GroupsAsFeatured: "GroupsAsFeatured",
			ExternalObjects: "ExternalObjects",
			Activities: "Activities",
			ExternalObjects_FindByExidAndObjectType : "ExternalObjects_FindByExidAndObjectType"
		},
		
		HttpMethod: {
			GET: "GET",
			POST: "POST"
		},
		ResponseType: {
			blob: "blob",
			arraybuffer: "arraybuffer"
		}
		
	},
	constructor: function(){
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this.bError = false;
	},
	/**
	 * Gets the JAM URL using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} sJamUrl A string containing the URL of the Collaboration Tool (Jam) 
	 * @private
	 */
	getJamUrl:function(oOdataModel, oPromise, bAsync) {
	   var sErrorCode = "";
	   var sJamURL = "";
	   
	   var fSuccessFn = function(oData,response){
		   if(oPromise){
			   oPromise.resolve(oData.GetCollaborationHostURL.URL); 
		   }
		   else {
			   sJamURL = oData.GetCollaborationHostURL.URL;
		   }
	   	};		   
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   		if(oPromise){
	   			oPromise.reject(sErrorCode);
	   		}
	   	};
	   	oOdataModel.read("/" + this.OdataUtilConstants.EndPoint.GetCollaborationHostUrl, {
	   		success: fSuccessFn,
	   		error: fErrorFn,
	   		async: bAsync
	   	});
	   	
	   	// if no oPromise is passed, return sJamURL
	   	if(!oPromise){
	   		return sJamURL;
	   	}
	},
	
	/**
	 * Batch Operation to get the JAM URL from the back-end
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createJamUrlBatchOperation: function(oOdataModel){
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetCollaborationHostUrl,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createJamUrlBatchOperation()");
			throw oError;
		}		
		
		return oBatchOperation;
	},
	
	/**
	 * Gets the JAM token using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} sJamToken The single use token from SAP Jam
	 * @private
	 */
	getJamToken:function(oOdataModel) {
	   var sJamToken = "";
	   var sErrorCode = "";
	   var fSuccessFn = function(oData,response){
			sJamToken = oData.GetSingleUseToken.Id;
	   	};		   
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read("/" + this.OdataUtilConstants.EndPoint.GetSingleUseToken, null, null, false, fSuccessFn, fErrorFn);
	   	
		if (sErrorCode){
			throw new Error(sErrorCode);
		}
		
		return sJamToken;
	   	
	},
	
	/**
	 * Batch Operation to get the Single Use Token from SAP Jam
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createJamTokenBatchOperation: function(oOdataModel){
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{			
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetSingleUseToken,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createJamTokenBatchOperation()");
			throw oError;
		}				
				
		return oBatchOperation;
	},
	
	/**
	 * Gets the JAM groups using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sODataEndPoint The OData end point
	 * @private
	 */
	getGroupsData:function(oOdataModel, sODataEndPoint) {		
		var aGroupsData;
		var sErrorCode = "";
		var fSuccessFn = function(oData,response){
		   aGroupsData = oData.results;
	   	};
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read(sODataEndPoint, null, null, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
	   	
	   	return aGroupsData;
	},

	/**
	 * Batch Operation to get the Groups Data
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetGroupsDataBatchOperation : function(oOdataModel) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.Groups,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGetGroupsDataBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to get the Groups Count
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetGroupsCountBatchOperation : function(oOdataModel) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GroupsCount,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGetGroupsCountDataBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to get the Groups linked to a specific BO
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetGroupsLinkedToBOBatchOperation : function(oOdataModel,oExternalObject) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.ExternalObjects + "(ApplicationContext='" + jQuery.sap.encodeURL(oExternalObject.appContext.replace(/'/g, "''")) + "',"
							 + "OdataServicePath='" + jQuery.sap.encodeURL(oExternalObject.odataServicePath.replace(/'/g, "''")) + "',"
							 + "OdataCollection='" + jQuery.sap.encodeURL(oExternalObject.collection.replace(/'/g, "''")) + "',"
							 + "OdataKey='" + jQuery.sap.encodeURL(oExternalObject.key.replace(/'/g, "''")) + "')/" + this.OdataUtilConstants.EndPoint.GroupsAsFeatured;
				
		oBatchOperation = oOdataModel.createBatchOperation(
				sOdataEndPoint,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
						
		return oBatchOperation;
	},
		
	/**
	 * Batch Operation to get the Groups assigned to a Business Object from the SMI (CLB) mapping table
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {string} a string containing the Business Object ID
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGetObjectGroupsBatchOperation : function(oOdataModel, sBusinessObjectId) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.BusinessObjects + "('" + jQuery.sap.encodeURL(sBusinessObjectId) + "')/" + this.OdataUtilConstants.EndPoint.AssignedGroups,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGetObjectGroupsBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Helper function to extract the JAM groups' IDs
	 * @param {array} aGroupData An array of JAM Groups 
	 * @private
	 */
	getGroupIds:function(aGroupData) {
		var sGroupsIds="";
		for (var i = 0; i < aGroupData.length; i++){
			if (i == 0){
				sGroupsIds += aGroupData[i].Id;
			} else{
				sGroupsIds +=  "," + aGroupData[i].Id;
			}
		}
		return sGroupsIds;
	},
	
	/**
	 * Creates JAM groups Feed using OData
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sGroupId Jam Group Id
	 * @param {string}	sFeedContent The content of the Feed
	 * @private
	 */
	createGroupFeed: function(oOdataModel, sGroupId, sFeedContent) {
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "(" + jQuery.sap.encodeURL(sGroupId) + ")/" + this.OdataUtilConstants.EndPoint.Feed;
		var oPayload = {
				"Text": sFeedContent
		};
		var bStatus = undefined;
		var fSuccess = function(){
			bStatus = true;
		};
		var fError = function(oError){
			jQuery.sap.log.error(JSON.stringify(oError.response.body));
			bStatus = false;
		};
		
		oOdataModel.create(sOdataEndPoint, oPayload, null, fSuccess, fError);
		
		return bStatus;
	},
	
	/**
	 * Main method to execute a batch requests for the end points supported by this utilities
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {array} aRequests An array containing the batch of requests
	 * @param {function} fnParseBatchResults A call back function to parse the results returned from the batch call
	 * @private
	 */
	executeODataBatchRequest: function(oOdataModel, aRequests, fnParseBatchResults, bAsync, fnErrorCallBack){
		var self = this;
		var aResults;
		
		var fnSuccess = function(oData){
			aResults = self.parseBatchResponse(oData.__batchResponses);
			fnParseBatchResults(aResults);
		};
		
		var fnError = function(oError){
			if(oError.response){
				jQuery.sap.log.error(JSON.stringify(oError.response.body));
			}
			else{
				jQuery.sap.log.error(JSON.stringify(oError.message));
			}
			fnErrorCallBack(oError);
		};
		
		
		// Either create a Read or Change batch request
		var aReadReqs = [];
		var aChangeReqs = [];
		for(var i in aRequests){
			if(aRequests[i].method == this.OdataUtilConstants.HttpMethod.GET){
				aReadReqs.push(aRequests[i]);	
			}else if (aRequests[i].method == this.OdataUtilConstants.HttpMethod.POST){
				aChangeReqs.push(aRequests[i]);
			}
		}
		
		if (aReadReqs.length > 0){
			oOdataModel.addBatchReadOperations(aReadReqs);
		}
		//if (aChangeReqs.length > 0)
			//oOdataModel.addBatchChangeOperations(aChangeReqs);
		for(var i=0; i<aChangeReqs.length; i++){
			oOdataModel.addBatchChangeOperations([aChangeReqs[i]]);
		}
		
		if (bAsync === true){
			oOdataModel.submitBatch(fnSuccess, fnError, true);
		}
		else{
			oOdataModel.submitBatch(fnSuccess, fnError, false);
		}
	},
	
	/**
	 * Parse the response returned from a batch call
	 * @ param {array} aBatchResponse An array containing the responses from a batch call.
	 * @ return {JSON Map} aResults A JSON map of key, value pairs containg the results from each response within the batch.  
	 */
	parseBatchResponse: function(aBatchResponse){
		var self = this;
		var aResults = [];
	
   		jQuery.sap.each(aBatchResponse, function(i, oResponse){
			if(oResponse.statusCode && oResponse.statusCode.match(self.OdataUtilConstants.HttpStatusCode.success))	{
				aResults.push(oResponse.data);
			}
			else if (oResponse.__changeResponses){
				for(var i=0; i<oResponse.__changeResponses.length; i++){
					if(oResponse.__changeResponses[i].statusCode && (oResponse.__changeResponses[i].statusCode.match(self.OdataUtilConstants.HttpStatusCode.created ) || oResponse.__changeResponses[i].statusCode.match(self.OdataUtilConstants.HttpStatusCode.success ))){
						aResults.push(oResponse.__changeResponses[i].data);
					}
					else{
						aResults.push({error: oResponse.__changeResponses[i].response.body});
						jQuery.sap.log.error(JSON.stringify(oResponse.__changeResponses[i].response.body), "sap.collaboration.components.utils.OdataUtil.parseBatchResponse()");
					}
				}
			}				
			else{
				aResults.push({error: oResponse.response.body});
				jQuery.sap.log.error(JSON.stringify(oResponse.response.body), "sap.collaboration.components.utils.OdataUtil.parseBatchResponse()");
			}
   		});
	   		   		
   		return aResults;
	},


	
	/**
	 * Creates a single batch operation to map an external URL
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string} sRelativePath A string containing the relative path to be mapped
	 * @return {request} oBatchOperation An object containing the request to be executed in a batch
	 */
	createExternalOdataUrlBatchOperation: function(oOdataModel, sRelativePath){
		// Batch operations do not encode the URL parameters, it needs to be done before creating the batch call.
		var aParameters = null;
		var oDataPayload = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetExternalODataURL + "/?RelativePath='" + jQuery.sap.encodeURL(sRelativePath) + "'",
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createExternalOdataUrlBatchOperation()");
			throw oError;
		}
				
		return oBatchOperation;
	},
	
	/**
	 * Calls the endpoint to map an external URL
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string} sRelativePath A string containing the relative path to be mapped
	 * @return {string} sExternalOdataUrl A string containing the external URL that was mapped
	 */
	getExternalOdataUrl: function(oOdataModel, sRelativePath){
		var sExternalOdataUrl = "";
		var sErrorCode = "";
		//Passing the URL parameters in a map so the encoding is done in SAPUI5 ODataModel class 
		var aUrlParameters = {};
		aUrlParameters["RelativePath"] = "'" + sRelativePath + "'";
		
		var fSuccessFn = function(oData,response){
			sExternalOdataUrl = oData.GetExternalODataURL.URL;
	   	};
	   	
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	
	   	oOdataModel.read("/" + this.OdataUtilConstants.EndPoint.GetExternalODataURL, null, aUrlParameters, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
	   	
		return sExternalOdataUrl;
	},
	
	/**
	 * Batch Operation to get the count of unread notifications
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createNotificationUnreadCountBatchOperation : function(oOdataModel) {
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		try{			
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.GetNotificationUnreadCount,
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createNotificationUnreadCountBatchOperation()");
			throw oError;
		}
		
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to get the Notifications
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @return {request} a request object for this end point
	 * @private
	 */
	createNotificationBatchOperation : function(oOdataModel, iNumberOfNotifications) {
		var oDataPayload = null;
		var aParameters = null;//["$top=20"];
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.Notifications + "?$top=" + jQuery.sap.encodeURL(iNumberOfNotifications.toString()),
				this.OdataUtilConstants.HttpMethod.GET,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createNotificationBatchOperation()");
			throw oError;
		}
		
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to create a Group Feed Entry
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sGroupId Jam Group Id
	 * @param {string}	sFeedContent The content of the Feed
	 * @return {request} a request object for this end point
	 * @private
	 */
	createGroupFeedBatchOperation : function(oOdataModel, sGroupId, oFeedContent) {
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "(" + jQuery.sap.encodeURL(sGroupId) + ")/" + this.OdataUtilConstants.EndPoint.Feed;
		var oDataPayload = {
				"Text": oFeedContent.note,
				"UiUrl": oFeedContent.uiUrl
		};
		var aParameters = null;
		var oBatchOperation;
		
		try{
			oBatchOperation = oOdataModel.createBatchOperation(
				sOdataEndPoint,
				this.OdataUtilConstants.HttpMethod.POST,
				oDataPayload, 
				aParameters
			);
		}catch(oError){
			jQuery.sap.log.error(oError, "", "sap.collaboration.components.utils.OdataUtil.createGroupFeedBatchOperation()");
			throw oError;
		}
		
		return oBatchOperation;
	},
	
	/**
	 * Batch Operation to upload file
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {object}	oAttachment File object to be uploaded
	 * @param {string}	sGroupId Jam Group Id
	 * @param {object}	sFolderId Jam Folder Id
	 * @private
	 */
	createUploadFileBatchOperation: function(oOdataModel, oAttachment, sGroupId, sFolderId){
		var oDataPayload = null;
		var aParameters = null;
		var oBatchOperation;
		
		
		
		oBatchOperation = oOdataModel.createBatchOperation(
				"/" + this.OdataUtilConstants.EndPoint.PostContentItem 	+ "/?name='" + jQuery.sap.encodeURL(oAttachment.name) + "'&"
																		+ "groupId='"  + jQuery.sap.encodeURL(sGroupId) + "'&"
																		+ "mimeType='" + jQuery.sap.encodeURL(oAttachment.mimeType) + "'&"
																		+ "folderId='" + jQuery.sap.encodeURL(sFolderId) + "'&"
																		+ "url='" + jQuery.sap.encodeURL(oAttachment.url) + "'",
																		
				this.OdataUtilConstants.HttpMethod.POST,
				oDataPayload, 
				aParameters
		);
		
		return oBatchOperation;
	},
	
	/**
	 * Post a request to upload a file
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {sap.collaboration.components.fiori.sharing.attachment.Attachment} oAttachment - File to be uploaded
	 * @param {string} sGroupId - Group Id to which the file will be posted to
	 * @param {string} sFolderId - Folder id to which the file will be posted to
	 * The sFolderId parameter will take priority over the sGroupId. This means, if both ids are specified, then the attachment will be posted to the folder.
	 * @param {function} fnSuccess - Callback function when upload is successful
	 * @param {function} fnError - Callback function when there is an error
	 * @private
	 */
	uploadFile : function(oOdataModel, oAttachment, sGroupId, sFolderId, fSuccess, fError, bAsyn ){
		// Determine to either the group's root folder, or a specific folder
		var sOdataEndPoint = this.OdataUtilConstants.EndPoint.PostContentItem;
		
		var fUploadSuccess = function() {
			fSuccess();
		};
		var fUploadError = function () {
			jQuery.sap.log.error(oAttachment.name + " was not uploaded", "",  "sap.collaboration.components.utils.OdataUtil.uploadFile()");
			fError();
		};
		
		oOdataModel.callFunction(sOdataEndPoint, 
								 'POST', 
								 {
									name : oAttachment.name,
									groupId : sGroupId,
									mimeType : oAttachment.mimeType,
									url : oAttachment.url,
									folderId :sFolderId
								 },
								 null,
								 fUploadSuccess,
								 fUploadError,
								 bAsyn
		);
				

	},
	
	/**
	 * Gets the sub-folders for a Jam Group or Folder 
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel -	The OData model object
	 * @param {string} sGroupId - group id
	 * @param {string} sFolderId - folder id
	 * @return {object} oFolder - object containing an array of folder entities returned from Jam and the total count of subfolders { folders: [], count: i }
	 * @private
	 */
	getSubFolders : function(oOdataModel, sGroupId, sFolderId, skip, top ){
	
		var sODataEndPoint;
		if(!sFolderId && sGroupId) {
			sODataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "('" + jQuery.sap.encodeURL(sGroupId) + "')/" + this.OdataUtilConstants.EndPoint.Folders;
		}
		else{
			sODataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Folders + "(Id='" + jQuery.sap.encodeURL(sFolderId) + "',FolderType='Folder')/" + this.OdataUtilConstants.EndPoint.Folders;
		}
		sODataEndPoint = sODataEndPoint	+'?$skip=' + skip + '&$top='+top + '&$inlinecount=allpages';
		
		var aFolders = [];
		var iCount = 0;
		var sErrorCode = "";
		var fSuccessFn = function(oData,response){
			if(oData) {
				aFolders = oData.results;
				iCount = parseInt(JSON.parse(response.body).d.__count);
			}
	   	};
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   	};
	   	oOdataModel.read(sODataEndPoint, null, null, false, fSuccessFn, fErrorFn);
	   	
	   	if (sErrorCode){
	   		throw new Error(sErrorCode);
	   	}
		
	   	return { folders : aFolders,
	   			 count : iCount };
	   	
	},
	
	/**
	 * Batch Operation share a Featured External Object in the Group
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {object}	oExternalObject Featured External Object (see endpoint for more information about the object's properties)
	 * @param {string}	sGroupId Jam Group Id
	 * @return {request} a request object for this end point
	 * @private
	 * @private
	 */
	createShareFeaturedObjectBatchOperation: function (oOdataModel, oExternalObject, sGroupId){
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.Groups + "(" + jQuery.sap.encodeURL(sGroupId) + ")/" + this.OdataUtilConstants.EndPoint.FeaturedExternalObjects;
		var oDataPayload = {
				"ApplicationContext": oExternalObject.appContext,
				"OdataServicePath": oExternalObject.odataServicePath,
				"OdataCollection": oExternalObject.collection,
				"OdataKey": oExternalObject.key,
				"Name": oExternalObject.name,
				"Summary": oExternalObject.summary,
				"UiUrl": oExternalObject.uiUrl,
				"Comment": oExternalObject.note
		};
		var aParameters = null;
		var oBatchOperation;
		
		oBatchOperation = oOdataModel.createBatchOperation(
			sOdataEndPoint,
			this.OdataUtilConstants.HttpMethod.POST,
			oDataPayload, 
			aParameters
		);
		
		return oBatchOperation;
	},
	
	/**
	 * Get the Mapping for the External Object
	 * @param oOdataModel
	 * @param oInternalObject
	 * @param oPromise
	 * @public
	 */
	getExternalObjectMapping: function(oOdataModel, oInternalObject, oPromise){
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.MapInternalBOToExternalBO;
		//Passing the URL parameters in a map so the encoding is done in SAPUI5 ODataModel class 
		var aUrlParameters = {};
		aUrlParameters["ApplicationContext"] = "'" + oInternalObject.appContext + "'";
		aUrlParameters["ODataCollection"] = "'" + oInternalObject.collection + "'";
		aUrlParameters["ODataKeyPredicate"] = "'" + oInternalObject.key + "'";
		aUrlParameters["ODataServicePath"] = "'" + oInternalObject.odataServicePath + "'";
		var sErrorCode = "";
		
		var fSuccessFn = function(oData,response){
			oPromise.resolve(oData.MapInternalBOToExternalBO);
	   	};
	   	var fErrorFn = function(oError){
	   		jQuery.sap.log.error(JSON.stringify(oError));
	   		sErrorCode = oError.response.statusCode;
	   		oPromise.reject(sErrorCode);
	   	};
	   	
	   	oOdataModel.read(sOdataEndPoint, null, aUrlParameters, true, fSuccessFn, fErrorFn);
		
	},
	
	/**
	 * Get Jam External Object
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 * @param {string}	sExObjId	Object External ID (External ID in Jam)
	 * @param {string}	sExObjType	Object Id in Jam
	 * @private
	 */
	_GetJamExternalObject : function(oOdataModel, sExObjId, sExObjType, fSuccessCallBack, fErrorCallBack) {
		
		var sOdataEndPoint = "/" + this.OdataUtilConstants.EndPoint.ExternalObjects_FindByExidAndObjectType
								 + "/?Exid='" + jQuery.sap.encodeURL(sExObjId) + "'&"
								 + "ObjectType='"  + jQuery.sap.encodeURL(sExObjType);

		var fSuccess = function(){
			fSuccessCallBack();
		};
		var fError = function(oError){
			jQuery.sap.log.error(JSON.stringify(oError.response.body));
			fErrorCallBack();
		};
		
		oOdataModel.read(sOdataEndPoint, null, null, false, fSuccess, fError);
	}
	
});

}; // end of sap/collaboration/components/utils/OdataUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.Component') ) {
/*!
 * @copyright@
 */





jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.feed.Component");


/**
* Constructor for the Feed Component.
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the Feed Component, the default value is <tt>"/sap/opu/odata/sap/SM_INTEGRATION_SRV".</tt>
* @param {sap.collaboration.FeedType} feedType The type of feed to be displayed.
* @param {string} [groupIds] A comma separated list of group IDs.
* @param {JSON object} [object] A JSON object passed to the Feed component. 
* It is required when the value of <tt>feedType</tt> is <tt>sap.collaboration.FeedType.object</tt> or <tt>sap.collaboration.FeedType.objectGroup</tt>.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
* 		<ul>
*			<li><strong><tt>id</tt></strong>: The Business Object ID to be posted in the SAP Jam Feed. It needs to be an OData URL containing the relative path to the object in the back-end.</li>
*			<li><strong><tt>type</tt></strong>: The type of the Business Object. It needs to be the OData meta data URL to the corresponding Entity Collection.</li>
*			<li><strong><tt>name?</tt></strong> (optional): The description of the Business Object to be displayed in SAP Jam, i.e. "SO 57746", "Opportunity 123", etc.</li>
*			<li><strong><tt>ui_url?</tt></strong> (optional): The URL to navigate to the same Business Object in the application.</li>
*		</ul>
*
* @class Feed Component<br>
*
* A Feed Component is a ui5 component that applications can use to render a <tt>sap.m.App</tt> that embeds the JAM Feed Widget.<br>
* The Component class extends the base UI5 UIComponent class.<br>
* This class defines the Reusable UI5 Component structure, i.e properties, aggregations and events, if any, and creates the UI5 controls to be displayed.
*  
* @name sap.collaboration.components.fiori.feed.Component
* @public
* @deprecated Since version 1.26.0.
* Please use sap.collaboration.components.fiori.feed.dialog.Component instead.
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.feed.Component",
		/** @lends sap.collaboration.components.fiori.feed.Component */ {
		/**
		 * The Component class has the following properties, contained in <tt>metadata.properties</tt>:
		 * <ol>
		 * 	 <li><tt>{sap.ui.core.CSSSize}</tt> <strong>width</strong> - The width of the component. The default value is an empty string "". </li>
		 *   <li><tt>{sap.ui.core.CSSSize}</tt> <strong>height</strong> - The height of the component. The default value is an empty string "". </li>
		 *   <li><tt>{sap.ui.core.URI}</tt> <strong>odataServiceUrl</strong> - The URL of the OData Service used. The default value is “<tt>/sap/opu/odata/sap/SM_INTEGRATION_SRV</tt>”.</li>
		 *   <li><tt>{string}</tt> <strong>feedType</strong> - The feed type for the JAM widget.  The available types are in @link sap.collaboration.FeedType.</li>
		 *   <li><tt>{string}</tt> <strong>groupIds</strong> - The IDs of the group to display in the widget.</li>
		 *   <li><tt>{object}</tt> <strong>object</strong> - The encapsulation of a Business Object.
		 * </ol>
		 * @property
		 * @private
		 */
		metadata: {
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: ""},
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: ""},
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				feedType:				{type: "string"},
				groupIds:				{type: "string"},
				object:					{type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		
		/**
		* Initialization of the Component (inherited from sap.ui.core.UIComponent).<br>
		* This method overrides its parent in order to initialize member variables and utility classes.
		* The default values for the component's  width and height value is set to 100%, since the child control needs these properties specified.
		* @private
		*/
		init: function(){
			//Initialize and apply constants for width and height 
			this.CollaborationFeedConstants = {
				defaultWidth: '100%',
				defaultHeight: '100%'
			 };
				
			this.setWidth(this.CollaborationFeedConstants.defaultWidth);
			this.setHeight(this.CollaborationFeedConstants.defaultHeight);
			// For SP06 the split app mode is disabled.
			this.mode = sap.collaboration.AppType.widget;
			
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			sap.ui.core.UIComponent.prototype.init.apply(this);
		},
		
		/**
		* Contract for passing the settings to the Component.
		* @public
		* @param {JSON Object} oSettings A JSON object containing the following attributes:
		* 		<ul>
		* 			<li><tt>{sap.ui.core.URI} oDataServiceUrl</tt>: The URL of the OData Service needed for the Feed Component.</li>
		* 			<li><tt>{sap.collaboration.FeedType} feedType</tt>: The type of feed to be displayed.</li>
		* 			<li><tt>{string} [groupIds?]</tt>: A comma separated list of Group IDs.</li>
		* 			<li><tt>{JSON object} object</tt>: The representation of a Business Object.</li>
		* 		</ul>
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setFeedType(oSettings.feedType);
			this.setGroupIds(oSettings.groupIds);
			this.setObject(oSettings.object);
		},
		
		/**
		* Invoked before the Component is rendered (inherited from sap.ui.core.UIComponent).<br>
		* Initializes the OData model.
		* @private
		*/
		onBeforeRendering: function(){
			var asJson = true;
			
			try{
				this.bStopRendering = false; // Initialize the flag to continue rendering.
				this.validateInputParameters();
	            this.sODataServiceUrl = this.getODataServiceUrl();
	            if(!this.oOdataModel){
	            	this.oOdataModel = new sap.ui.model.odata.ODataModel(this.sODataServiceUrl, asJson);
	            }
			} catch (oError){
				//If an error occurs, it will be logged and displayed, and the flag this.bStopRendering will be turned on to be consumed by the onAfterRendering method.
				jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.Component.onBeforeRendering()");
				this.bStopRendering = true; // If an error is thrown then stop rendering (onAfterRendering).
				this.oCommonUtil.displayError(oError);
			}
	            
            // delete views before rendering
            if( sap.ui.getCore().byId(this.getId() + "_oAppView") ){
                  sap.ui.getCore().byId(this.getId() + "_oAppView").destroy();
            }
            if( sap.ui.getCore().byId(this.getId() + "_oSplitAppView") ){
                  sap.ui.getCore().byId(this.getId() + "_oSplitAppView").destroy();
            }		
		},
		
		/**
		* Called when the Component has been rendered (inherited from sap.ui.core.UIComponent).<br>
		* Creates a View that represents a UI5 app and places this view in the Component main HTML DIV created by the render function.
		* @function
		* @private
		*/
		onAfterRendering: function(){	
			if(!this.bStopRendering){
				// log properties
				jQuery.sap.log.debug("Feed Component properties:", "", 
						"sap.collaboration.components.fiori.feed.Component.onAfterRendering()");
				jQuery.sap.log.debug("width: " + this.getWidth());
		        jQuery.sap.log.debug("height: " + this.getHeight());
		        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
		        jQuery.sap.log.debug("feedType: " + this.getFeedType());
		        jQuery.sap.log.debug("groupIds: " + this.getGroupIds());
		        jQuery.sap.log.debug("object: " + JSON.stringify(this.getObject()));
		        
		        try{
					if(this.getMode() === sap.collaboration.AppType.widget){
						var oAppView = 
							sap.ui.view({
								id: this.getId() + "_oAppView",
								viewData : {
									controlId: this.getId(),
									odataModel:  this.oOdataModel,
									appType: this.getMode(),	
									feedType: this.getFeedType(),
									groupIds: this.getGroupIds(),
									object: this.getObject(),
									langBundle: this.oLangBundle
								}, 
								type:sap.ui.core.mvc.ViewType.JS, 
								viewName:"sap.collaboration.components.fiori.feed.app.App"
							});
						
						oAppView.placeAt(this.getId());
					}
					else if(this.getMode() === sap.collaboration.AppType.split){
						var oSplitAppView = 
							sap.ui.view({
								id: this.getId() + "_oSplitAppView",
								viewData : {
									controlId: this.getId(),
									odataModel:  this.oOdataModel,
									appType: this.getMode(),
									object: this.getObject(),
									langBundle: this.oLangBundle
								}, 
								type:sap.ui.core.mvc.ViewType.JS, 
								viewName:"sap.collaboration.components.fiori.feed.splitApp.SplitApp"
							});
						
						oSplitAppView.placeAt(this.getId());
					}
				}catch(oError){
					jQuery.sap.log.error(oError, "", "sap.collaboration.components.fiori.feed.Component.onAfterRendering()");
					this.oCommonUtil.displayError(oError);
				}
			}
		},
		
		/**
		 * Renders the outer HTML for the Component (inherited from sap.ui.core.UIComponent).<br>
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "' style='width:" + this.getWidth() + ";height:" + this.getHeight() + "'");
			oRm.write(">");
			oRm.write("</div>");
			
		},
		
		/**
		 * Getter for the mode property
		 * @private
		 */
		getMode: function(){
			return this.mode;
		},
		
		/**
		 * Validate input parameters before creating the view, initializing OData, making server calls etc.
		 * @private
		 * @throws {Error} oErrorIncorrectInputParameters - Error thrown when the
		 */
		validateInputParameters : function(){			
			var oErrorIncorrectInputParameters;
			
			//Validations are applied in the sequence they appear, throwing an error the moment a validation fails.  If all the validations pass then continue execution.
			
			//Applies to both, object and object group
			if(this.getFeedType() == sap.collaboration.FeedType.object || this.getFeedType() == sap.collaboration.FeedType.objectGroup){
				if(!this.getObject()){
					oErrorIncorrectInputParameters = new Error("Object is undefined or null");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters, "", "sap.collaboration.components.fiori.feed.Component.validateInputParameters()");
	            	throw oErrorIncorrectInputParameters;
				}else if(!this.getObject().id){
					oErrorIncorrectInputParameters = new Error("Missing Object ID");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters, "", "sap.collaboration.components.fiori.feed.Component.validateInputParameters()");
	            	throw oErrorIncorrectInputParameters;
				}
			}
			
			//Only applies to object
			if(this.getFeedType() == sap.collaboration.FeedType.object){
				if(!this.getObject().type){
					oErrorIncorrectInputParameters = new Error("Missing Object Type");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters, "", "sap.collaboration.components.fiori.feed.Component.validateInputParameters()");
	            	throw oErrorIncorrectInputParameters;
				}
			}
		}
	}
);
}; // end of sap/collaboration/components/fiori/feed/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.feed.dialog.Component') ) {
/*!
 * @copyright@
 */





jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.feed.dialog.Component");

/**
* Constructor for the Feed Dialog Component.
* @since version 1.16
* @constructor
* @param {object} businessObject A JSON object passed to the Feed Dialog Component.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
* <ul>
* 	<li><tt>{string} appContext</tt>: The application context.  Example: "CRM", "CB", "SD", etc.</li>
* 	<li><tt>{string} odataServicePath</tt>: The path to the OData Service and the Service name.  Example: "/sap/opu/odata/sap/APPLICATION_SRV".</li>
* 	<li><tt>{string} collection</tt>: The name of the OData Collection. Example: "Account", "Opportunity", etc.</li>
* 	<li><tt>{string} key</tt>: The key to identify a particular instance of the Business Object. It can be a simple ID or a compound key. Example: "123", "ObjectID='123'", "ObjectID='123',ObjectType='BUS000123'", etc.</li>
* 	<li><tt>{string} name</tt>: The short name of the Business Object. Example: "Sales Order 123", "Opportunity 123", "Account 123", etc.</li>
* 	<li><tt>{string} ui_url</tt>: The URL to navigate to the same business object in the application.</li>
* </ul>
* @param {sap.ui.core.URI} [oDataServiceUrl] <b>[DEPRECATED]</b> The OData service URL needed for the Feed Dialog Component, the default value is <tt>"/sap/opu/odata/sap/SM_INTEGRATION_SRV".</tt>
* @param {sap.collaboration.FeedType} [feedType] <b>[DEPRECATED]</b> The type of feed to be displayed.
* @param {string} [groupIds] <b>[DEPRECATED]</b> A comma separated list of group IDs.
* @param {object} [object] <b>[DEPRECATED]</b> A JSON object passed to the Feed Dialog Component. Use <b><tt>businessObject</tt></b> instead.
* This object represents business related information, such as a sales order, an opportunity, etc. It contains the following properties:
*		<ul>
*			<li><tt>id</tt>: The Business Object ID to be posted in the SAP Jam Feed. It needs to be an OData URL containing the relative path to the object in the back-end.</li>
*			<li><tt>type</tt>: the type of the business object. It can be any text or it can be the OData meta data URL to the object Entity Type.</li>
*			<li><tt>name</tt> (optional): the description of the business object to be displayed in SAP Jam, i.e. "SO 57746", "Opportunity 123", etc.</li>
*			<li><tt>ui_url</tt> (optional): the URL to navigate to the same business object in the application.</li>
*		</ul>
* Note: The object is passed by reference, which means that the attributes will be modified in the original object, for example, when the URLs contained in the id and type attributes are mapped (via OData call).
*
* @class Feed Dialog Component
*
* A Feed Dialog Component is a ui5 component that applications can use to render the feed widget view in a dialog 
* in order to discuss information in SAP JAM by adding and replying to feed posts related to a specific Business Object.
* 
* @name sap.collaboration.components.fiori.feed.dialog.Component
* @extends sap.ui.core.UIComponent
* @public
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.feed.dialog.Component",
		/** @lends sap.collaboration.components.fiori.feed.dialog.Component */ {
		/**
		 * The Component class has the following properties, contained in <tt>metadata.properties</tt>:
		 * <ol>
		 * 	 <li><tt>{object} businessObject</tt>: the representation of a business object.</li>
		 * 	 <li><tt>{sap.ui.core.CSSSize}</tt> <strong>width</strong> - The width of the component. The default value is an empty string "". </li>
		 *   <li><tt>{sap.ui.core.CSSSize}</tt> <strong>height</strong> - The height of the component. The default value is an empty string "". </li>
		 *   <li><tt>{string}</tt> <strong>feedType</strong> - <b>[DEPRECATED]</b> The feed type for the JAM widget.  The available types are in @link sap.collaboration.FeedType.</li>
		 *   <li><tt>{string}</tt> <strong>groupIds</strong> - <b>[DEPRECATED]</b> The IDs of the group to display in the widget.</li>
		 *   <li><tt>{object}</tt> <strong>object</strong> - <b>[DEPRECATED]</b> The encapsulation of a Business Object.
		 * </ol>
		 * @property
		 * @private
		 */

		metadata: {
			includes: ["../../../resources/css/Sharing.css"],
			properties: {
				width: 		 			{type: "sap.ui.core.CSSSize", defaultValue: "575px"}, // Value defined by Central UX. Internal Message 3216022/2013
				//We need to pass a value in pixels, otherwise the dialog won't render correctly
				height:		 			{type: "sap.ui.core.CSSSize", defaultValue: "605px"}, // Value defined by Central UX. Internal Message 3216022/2013
				feedType:				{type: "string", defaultValue: sap.collaboration.FeedType.object},
				groupIds:				{type: "string"},
				object:					{type: "object"}, 
				businessObject:			{type: "object"} //appContext, oDataServicePath, collection, key, name, ui_url
			},
			
			aggregations: {
			},
			
			events: {
			}
		},

		systemSettings: {
			oDataServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV",
			oCollaborationHostRestService: "/sap/bc/ui2/smi/rest_tunnel/Jam//v1",
			oCollaborationHostODataService: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData"
		},
		
		/**
		* Initialization of the Component.<br>
		* This method overrides its parent in order to initialize member variables and utility classes.
		* The default values were specified by the Central UX Team (Internal Message 3216022/2013).
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this.oJamUtil = new sap.collaboration.components.utils.JamUtil();
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			this.sJamUrl = undefined;
			this.sJamToken = undefined;
			this.oOdataModel = undefined;
			this.oODataUtil = undefined;
			this.oBusinessObject = {};

			sap.ui.core.UIComponent.prototype.init.apply(this);
		},
		
		/**
		* Contract for passing the settings to the Component.
		* @public
		* @param {object} oSettings A JSON object containing the following attributes:
		* 		<ul>
		* 			<li><tt>{object} businessObject</tt>: the representation of a business object.</li>
		* 			<li><tt>{sap.collaboration.FeedType} <b>[DEPRECATED]</b> feedType</tt>: the type of feed to be displayed.</li>
		* 			<li><tt>{string} <b>[DEPRECATED]</b> [groupIds?]</tt>: a comma separated list of group IDs.</li>
		* 			<li><tt>{object} <b>[DEPRECATED]</b> object</tt>: the representation of a business object. Use <tt>businessObject</tt> instead</li>
		* 		</ul>
		*/
		setSettings : function(oSettings) {
			if(oSettings){
				this.setFeedType(oSettings.feedType);
				this.setGroupIds(oSettings.groupIds);
				
				//The object passed in the settings needs to be cloned in order to make it a local variable of the component,
				//otherwise, the original object in the settings is changed (i.e. when url mapping is done), because it is being passed by reference.
				//The cloning is done using jQuery "deep" cloning.
				//The object is directly assigned to the mProperties of the component because the setter is not working properly.
				//The object should also be cloned during construction.
				//Example: this.mProperties.object = jQuery.extend(true, {}, oSettings.object);
				this.setObject(oSettings.object);
				this.setBusinessObject(oSettings.businessObject);
			} else {
				var oErrorSettingsUndefined = new Error("Settings object is undefined");
            	jQuery.sap.log.error(oErrorSettingsUndefined.stack);
			}
		},
		
		/**
		 * Open the Feed Dialog.
		 * @public
		 */
		open : function(){
			// log properties
			this._logComponentProperties();
	        
			try{
					this._validateInputParameters(this.mProperties);
					this._createFeedDialog();
					this._requestWidgetData();
					this.oFeedDialog.open();
			} catch (oError){
					jQuery.sap.log.error(oError.stack);
					this.oCommonUtil.displayError();
			}	
			
		},
		
		
		/**
		* Invoked before the Component is rendered.
		* @private
		*/
		onBeforeRendering: function(){
		},
		
		/**
		* Called when the Component has been rendered 
		* @function
		* @private
		*/
		onAfterRendering: function(){
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
		},
		
		/**
		 * Initializes the OData needed by the feed widget:
		 * The model and the OData Util class. 
		 * Calls the corresponding functions to create and execute the batch requests to retrieve the necessary data for the component as well as to parse the batch results.
		 * Calls the corresponding function to create and execute the AJAX request to retrieve the SAP Jam single use token.
		 * If both the batch request and AJAX request are successful, the Feed Dialog Component (Feed View and the Feed Dialog Control) is then created.
		 * @private
		 */
		_requestWidgetData: function(){
			var sCSRFToken = this._getCSRFToken();
			
			var self = this;
			var bAsync = true;
			var sCollaborationHostRestService = this.systemSettings.oCollaborationHostRestService;

			this._initOData();
			
			//Logic for object and external Object
           if(this.getObject()){
        	   this._getObjectWithoutMapping();
           } else if(this.getBusinessObject()) {
        	   this._getObjectWithMapping();
           }
           
			// Create, execute and parse the AJAX request asynchronously
			// The AJAX request is to get the token from SAP Jam and if successful, set the variable sJamToken to the retrieved token
			var fnAjaxCallback = function() {
				if (this.readyState == 4) {
					if(this.status == 201){
						self.sJamToken = this.responseXML.getElementsByTagName('single_use_token')[0].attributes[0].value;
						//check if the Jam URL from the batch request is retrieved, if yes, then create the View, the Dialog, and open it.
						if(self.sJamUrl && self.oBusinessObject.odata_url && self.oBusinessObject.metadata_url){
							self._createFeedView();
							self.oFeedDialog.addContent(self.oFeedView);
							setTimeout(function(){self.oFeedDialog.setBusy(false);}, 3000);
						}
					}
					else{
						var sError = "The single use token from SAP Jam was not returned successfully";
						jQuery.sap.log.error(sError, "", "sap.collaboration.components.utils.JamUtil.getJamSinglelUseTokens()");
						if(self.oFeedDialog.isOpen() === true){
							self.oFeedDialog.close();
						}
						self.oCommonUtil.displayError();
					}
				}
			};
			
			this.oJamUtil.getJamSinglelUseTokens(sCollaborationHostRestService, fnAjaxCallback, bAsync, sCSRFToken);
		},
		
		/**
		 * Backwards Compatibility to get the host url, and external url for object id and type using batch.
		 * @private
		 */
		_getObjectWithoutMapping : function(){
			var self = this;
			var bAsync = true;
			var aBatchRequests = [];
			
			// Create, execute and parse the batch requests asynchronously
			var fnParseBatchResults = function(aBatchResults){
				self._parseBatchResults(aBatchResults);
				//check if the single use token from the AJAX request is retrieved, if yes, then create the View, the Dialog, and open it.
				if(self.sJamToken){
					self._createFeedView();
					self.oFeedDialog.addContent(self.oFeedView);
					setTimeout(function(){self.oFeedDialog.setBusy(false);}, 3000);
				}
			};
			
			var fnBatchErrorCallback = function(oErrorBatchFailed){
            	jQuery.sap.log.error(oErrorBatchFailed, "", "sap.collaboration.components.fiori.feed.dialog.Component._getObjectWithoutMapping(), fnBatchErrorCallback()");
            	throw oErrorBatchFailed;
			};
			
			aBatchRequests = this._createBatchRequests();												
			this.oODataUtil.executeODataBatchRequest(this.oOdataModel, aBatchRequests, fnParseBatchResults, bAsync, fnBatchErrorCallback);
		},
		
		/**
		 * Map internal to external object and get the Jam URL
		 * @private
		 */
		_getObjectWithMapping : function(){
			var self = this;
			var getJamUrlPromise = new jQuery.Deferred();
			getJamUrlPromise.done(function(sJamURL){
			   self.sJamUrl = sJamURL;
			});
		   
			var getMappedObjectPromise = new jQuery.Deferred();
			getMappedObjectPromise.done(function(oMappedObject){
			   self._setMappedObject(oMappedObject);
			});
		   
			jQuery.when(getJamUrlPromise, getMappedObjectPromise).fail(function(sStatusCode){
			   if(self.oFeedDialog && self.oFeedDialog.isOpen()){
				   self.oFeedDialog.close();
			   }
			   self.oCommonUtil.displayError();
			});
		   
			this.oODataUtil.getJamUrl(this.oOdataModel, getJamUrlPromise);
			this.oODataUtil.getExternalObjectMapping(this.oOdataModel, this.getBusinessObject(), getMappedObjectPromise);
		},
		
		/**
		 * Set mapped object to member business object
		 * @param oMappedObject
		 * @private
		 */
		_setMappedObject : function (oMappedObject){
			var self = this;
			this.oBusinessObject.id = oMappedObject.Exid;
			this.oBusinessObject.type = oMappedObject.ObjectType;
			this.oBusinessObject.odata_url = this.oBusinessObject.id;
			this.oBusinessObject.metadata_url = this.oBusinessObject.type;
			// Synchronizing getExternalObjectMapping with getJamSingleUseToken
			if(this.sJamToken){
				this._createFeedView();
				this.oFeedDialog.addContent(this.oFeedView);
				setTimeout(function(){self.oFeedDialog.setBusy(false);}, 3000);
			}
		},
		
		/**
		 * Initialize the OData Model and the OData Util Classes
		 * @private
		 */
		_initOData : function(){
			// The variable asJson is used instead of just passing the boolean value 
			// to explain what is the effect of passing true to the ODataModel Constructor
			var asJson = true;    
			//Using a variable for better maintenance and debugging
			var sODataServiceUrl = this.systemSettings.oDataServiceUrl;
			// Initialize the OData Model
			if(!this.oOdataModel){
				this.oOdataModel = new sap.ui.model.odata.ODataModel(sODataServiceUrl, asJson);
			}
            if(!this.oOdataModel.oMetadata.oMetadata){
            	var oErrorMetadataUndefined = new Error("Metadata is undefined");
            	jQuery.sap.log.error(oErrorMetadataUndefined, "", "sap.collaboration.components.fiori.feed.dialog.Component._requestWidgetData()");
            	throw oErrorMetadataUndefined;
            }		            	
			
            // Initialize the OData utility class to create batch calls
            if(!this.oODataUtil){
            	this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
            }
		},
		
		/**
		 * Returns a CSRF token from SAP Jam
		 * @return {string} CSRF token
		 * @private
		 */
		_getCSRFToken: function(){
			var sCSRFToken = "";
			var oCollaborationHostODataService = this.systemSettings.oCollaborationHostODataService;
			
			var fnAjaxCallback = function(oData) {
				if (this.readyState == 4) {
					if(this.status == 200){
							sCSRFToken = this.getResponseHeader('x-csrf-token');
					}
				}
			};
			this.oJamUtil.getCSRFToken(oCollaborationHostODataService, fnAjaxCallback, false);
			return sCSRFToken;
		},
		
		/**
		 * Creates batch requests for the different feed types.
		 * @return {array} aBatchRequests - An array of batch requests
		 * @private
		 */
		_createBatchRequests : function(){
			var self = this;
			var aBatchRequests = [];
			
			if (!self.sJamUrl){
				aBatchRequests.push(self.oODataUtil.createJamUrlBatchOperation(self.oOdataModel));
			}
			aBatchRequests = aBatchRequests.concat(self._createExternalUrlBatchRequest(self.oODataUtil, self.getObject()));
			
			return aBatchRequests;
		},
				
		/**
		 * Creates a batch request to get the external URL mapping for a business object.
		 * @param {sap.collaboration.components.utils.OdataUtil} oODataUtil An object containing a reference to the OData Util Class
		 * @param {object} oBusinessObject a Business Object containing the URLs that need to be mapped
		 * @return {array} aBatchOperations an array containing the batch operations
		 * @private
		 */
		_createExternalUrlBatchRequest: function(oODataUtil, oBusinessObject){
			var self = this;
			var aBatchOperations = [];
			
			if(oODataUtil && oBusinessObject){
				if(oBusinessObject.id){
					aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.id));
				}
				if(oBusinessObject.type){
					aBatchOperations.push(oODataUtil.createExternalOdataUrlBatchOperation(self.oOdataModel, oBusinessObject.type));
				}				
			}
			
			return aBatchOperations;
		},
		
		/**
		 * Callback function to parse the results from the batch request.<br>
		 * Assumption: the results are returned in the same order as the requests.<br>
		 * The values from the batch results will be assigned to member variables to be used later when the Feed View is created.
		 * @param {array} aBatchResults An array containing the batch results to be parsed
		 * @private
		 */
		_parseBatchResults : function(aBatchResults){
			var self = this;
			var i = 0;
			
			if (!self.sJamUrl){
				if(aBatchResults[i].error){
					throw new Error(aBatchResults[i].error);
				} else {
						self.sJamUrl = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetCollaborationHostUrl].URL;
				}
				i++;
			}
					
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.id = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.odata_url = self.oBusinessObject.id;
			}
			i++;
			
			if(aBatchResults[i].error){
				throw new Error(aBatchResults[i].error);
			} else {
				self.oBusinessObject.type = aBatchResults[i][self.oODataUtil.OdataUtilConstants.EndPoint.GetExternalODataURL].URL;
				self.oBusinessObject.metadata_url = self.oBusinessObject.type;
			}
		},
		
		/**
		 * Creates the View that wraps the Feed Widget (<tt>sap.collaboration.components.fiori.feed.commons.Detail</tt>).
		 * @private
		 */
		_createFeedView : function() {
			var self = this;
			if(!self.oFeedView){					
				self.oFeedView  = sap.ui.view({
					id: self.getId() + "_FeedView", 
					height: "100%",
					viewData : {
						controlId: self.getId(),
						jamURL:	self.sJamUrl,
						jamToken: self.sJamToken,
						appType: sap.collaboration.AppType.widget,
						feedType: self.getFeedType(),
						groupIds: self.getGroupIds(),
						businessObject: self.oBusinessObject,
						langBundle: self.oLangBundle
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.feed.commons.Detail"
				});
			} else{
				//If the Feed View already exists, we pass the new settings
				self.oFeedView.getController().sFeedType = self.getFeedType();
				self.oFeedView.getViewData().groupIds = self.getGroupIds();
				self.oFeedView.getController().oBusinessObject = self.oBusinessObject;
			}
		},
		
		/**
		 * Creates the Dialog Mobile Control (sap.m.Dialog), defining the sections (title, content and button), 
		 * as well as its properties (height, stretch, etc.) and passes the view in the content.
		 * @private
		 */
		_createFeedDialog: function() {
			var self = this;
				
			if (!this.oFeedDialog){
				this.oFeedDialog = new sap.m.Dialog(this.getId() + "FeedDialog", {
					title: this.oLangBundle.getText("FEED_DIALOG_TITLE"),
					stretch: false,
					contentWidth: this.getWidth(),
					contentHeight: this.getHeight(),
					content: [],
					endButton:
						new sap.m.Button({
							text: this.oLangBundle.getText("CLOSE_BUTTON_TEXT"),
							press : function() {
								self.oFeedDialog.close();
							}
						})
				}); 
			
				if(sap.ui.Device.system.phone){
					this.oFeedDialog.setStretch(true);
				}
			}
			
			this.oFeedDialog.setBusy(true);
		},
		
		/**
		 * Validate input parameters before creating the view, initializing OData, making server calls etc.
		 * @private
		 * @throws {error} oErrorIncorrectInputParameters - Error thrown when the validation on input parameters fail.
		 */
		_validateInputParameters : function(oInputParameters){
			var oErrorIncorrectInputParameters;
			
			//Validations are applied in the sequence they appear, throwing an error the moment a validation fails.  If all the validations pass then continue execution.
			//Using object or external object
			
			if(!oInputParameters){
				oErrorIncorrectInputParameters = new Error("Input paremeters are undefined");
            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
            	throw oErrorIncorrectInputParameters;
			}else if(oInputParameters.businessObject){
				var businessObject = oInputParameters.businessObject;
				if(jQuery.isEmptyObject(businessObject)){//
					oErrorIncorrectInputParameters = new Error("Business Object is empty");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.appContext){
					oErrorIncorrectInputParameters = new Error("Application context is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.odataServicePath){
					oErrorIncorrectInputParameters = new Error("OData Service Path is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.collection){
					oErrorIncorrectInputParameters = new Error("Collection is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.key){
					oErrorIncorrectInputParameters = new Error("Key is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!businessObject.name){
					oErrorIncorrectInputParameters = new Error("Name is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
			} else if(oInputParameters.object){
				var object = oInputParameters.object;
				if(jQuery.isEmptyObject(object)){
					oErrorIncorrectInputParameters = new Error("Business Object is empty");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!object.id){
					oErrorIncorrectInputParameters = new Error("Object is undefined");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
				if(!object.type){
					oErrorIncorrectInputParameters = new Error("Missing Object Type");
	            	jQuery.sap.log.error(oErrorIncorrectInputParameters.stack);
	            	throw oErrorIncorrectInputParameters;
				}
			} else {
				oErrorIncorrectInputParameters = new Error("Neither an Object nor a Business Object was passed");
            	//jQuery.sap.log.error(oErrorIncorrectInputParameters.stack); It will be logged by the calling function (open)
            	throw oErrorIncorrectInputParameters;
			}
		},
		
		/**
		 * Log the component properties
		 * @private
		 */
		_logComponentProperties : function(){
			jQuery.sap.log.debug("Share Component properties:", "", 
			"sap.collaboration.components.fiori.dialog.Component._logComponentProperties()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.systemSettings.oDataServiceUrl);
	        jQuery.sap.log.debug("feedType: " + this.getFeedType());
	        jQuery.sap.log.debug("groupIds: " + this.getGroupIds());
	        jQuery.sap.log.debug("object: " + JSON.stringify(this.getObject()));
	        jQuery.sap.log.debug("businessObject: " + JSON.stringify(this.getBusinessObject()));
		}

	}
);

}; // end of sap/collaboration/components/fiori/feed/dialog/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.Component') ) {
/*!
 * @copyright@
 */



jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.fiori.notification.Component");
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


/**
* Constructor for the notification component
* @since version 1.18
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the notification component, the default value is "/sap/opu/odata/sap/SM_INTEGRATION_SRV"
* @param {sap.ui.core.int} [numberOfNotifications] This is the maximum number of notifications to be displayed. The default value is 10.
* @param {sap.ui.core.int} [transitionInterval] This is the amount of time in seconds a notification is displayed before the next notification is displayed. The default value is 10.
* @param {sap.ui.core.int} [refreshInterval] This is the amount of time in seconds before calling the backend to update the notifications. The default value is 300.
* @param {sap.ui.core.URI} notificationsTargetUrl When a user clicks on the component, a new browser tab will open at this URL.
* 
* @class Notification Component
*
* A Notification Component is a ui5 component that displays a SAP Jam member's latest notifications.
* 
* This component refreshes itself when the number of seconds specified in the <tt>refreshInterval</tt> parameter elapses.
* When refreshing, the backend is called to obtain the latest notifications.
* @name sap.collaboration.components.fiori.notification.Component
* @public
* @deprecated Since version 1.26.0.
* There is no replacement for this control. The Fiori Launchpad now provides its own implementation
* for this control. This control was never meant to be used directly by third parties.  
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.notification.Component",
		/** @lends sap.collaboration.components.fiori.notification.Component */ {		
	
		metadata: {
			properties: {
				oDataServiceUrl:		{type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_SRV"},
				numberOfNotifications:	{type: "int", defaultValue: 10},
				transitionInterval:		{type: "int", defaultValue: 10},
				refreshInterval:		{type: "int", defaultValue: 300},
				notificationsTargetUrl: {type: "sap.ui.core.URI"}
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.iMillisecondsPerSecond = 1000;
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();			
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			
			this.sStyleClassPrefix = "sapClbNotif";
			
		},
		
		/**
		* Invoked before the Component is rendered.
		* It calls the setGroupsData() function. Refer to the setGroupsData() for the JSDoc 
		* @private
		*/
		onBeforeRendering: function(){
			
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates the sharing View or rerender it
		* @function
		* @private
		*/
		onAfterRendering: function(){
			// log properties
			jQuery.sap.log.debug("Notification Component properties:", this.mProperties.toString(), 
					"sap.collaboration.components.fiori.notification.Component.onAfterRendering()");
			jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
			jQuery.sap.log.debug("numberOfNotifications: " + this.getNumberOfNotifications());
			jQuery.sap.log.debug("transitionInterval: " + this.getTransitionInterval());
			jQuery.sap.log.debug("refreshInterval: " + this.getRefreshInterval());
			jQuery.sap.log.debug("notificationsTargetUrl: " + this.getNotificationsTargetUrl());
			if (!this.oNotificationView) {
				this.oNotificationView = sap.ui.view({
					id: this.getId() + "_NotificationView",
					viewData: {
						controlId: 	this.getId(), 
						langBundle: this.oLangBundle,
						oDataServiceUrl: this.getODataServiceUrl(),
						numberOfNotifications: this.getNumberOfNotifications(), 
						transitionInterval:	this.getTransitionInterval() * this.iMillisecondsPerSecond,
						refreshInterval: this.getRefreshInterval() * this.iMillisecondsPerSecond,
						notificationsTargetUrl: this.getNotificationsTargetUrl(),
						styleClassPrefix : this.sStyleClassPrefix
					}, 
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.notification.Notification"
				});
//				var button = new sap.ui.commons.Button();
//				this.oNotificationView.destroy = function(bSuppressInvalidate) {
//					var a = 1;
//				};
//				button.destroy =  function(bSuppressInvalidate) {
//					var b = 1;
//				};
//				this.addAggregation("view", this.oNotificationView);
//				this.addAggregation("view", button);
			}
			
			this.oNotificationView.placeAt(this.getId());
//			setTimeout(this.destroy.bind(this), 5000);
		},
		
		/**
		* Called when the Component is destroyed. Use this one to free resources and finalize activities.
		* Destroys the sharing view
		* @private
		*/
		exit: function() {
			this.deactivateNotificationRefreshAndTransition();
			// destroy the view in case the component is destroyed as the view will not be destroyed by default. It's not in the aggregation of the component.
			this.oNotificationView.destroy();
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "'");
			oRm.addClass(this.sStyleClassPrefix + "Component");
			oRm.addClass(this.sStyleClassPrefix + "CursorPointer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</div>");
		},
		
		/**
		 * When this function is called, the automatic refresh and transition are deactivated.
		 * @private
		 */
		deactivateNotificationRefreshAndTransition : function() {
			this.oNotificationView.getController().deactivateNotificationTransition();
			this.oNotificationView.getController().deactivateNotificationRefresh();
		}
	}
);

}; // end of sap/collaboration/components/fiori/notification/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.notification.Notification.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.notification.Notification.controller');
/*!
 * @copyright@
 */




sap.ui.controller("sap.collaboration.components.fiori.notification.Notification", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* Initialize class variables
* memberOf Notification
*/
	onInit: function() {
		this.initializeRefreshAndTransitionState();
		
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oView = this.getView();
		this.oLangBundle = this.oView.oLangBundle;
		this.sOdataServiceUrl = this.getView().getViewData().oDataServiceUrl;
		this.iTransitionInterval = this.getView().getViewData().transitionInterval;
		this.iRefreshInterval = this.getView().getViewData().refreshInterval;
		
		this.sProfilePhotoHiddenStyleClass = this.oView.sStyleClassPrefix + "ProfileImageHidden";
		this.sLoadingAnimationDummyTextStyleClass = this.oView.sStyleClassPrefix + "LoadingText";
		this.sNewNotificationTextStyleClass = this.oView.sStyleClassPrefix + "NewNotificationText";
		this.sErrorTextStyleClass = this.oView.sStyleClassPrefix + "ErrorText";
		
		this.oView.oNotificationNewNotificationOrErrorText.addStyleClass(this.sLoadingAnimationDummyTextStyleClass);
		this.oView.oNotificationNewNotificationOrErrorText.setText(". . . . . . . . . . . .");
		this.oView.oNotificationNewNotificationOrErrorText.setBusy(true);
		
		this.oNotificationTypeUtil = new sap.collaboration.components.utils.NotificationTypeUtil();	
	},
	
	initializeRefreshAndTransitionState: function() {
		this.bErrorInUnreadCountODataResponse = true;
		this.bErrorInNoticesODataResponse = true;
		this.bErrorInODataResponse = true;
		
		this.iNotificationCurrentIndex = undefined;
		this.iNotificationPreviousIndex = undefined;
		
		this.aNotifications = undefined;
		
		this.bIsTransitionActive = false;
		this.iNotificationsTransitionCallbackRegistrationId = undefined;
		
		this.bIsRefreshActive = false;
		this.iNotificationsRefreshCallbackRegistrationId = undefined;
		
		this.iNotificationUnreadCount = undefined;
		
		// Maximum number of notifications to display.
		this.iMaxNotificationsToDisplay = this.getView().getViewData().numberOfNotifications;
		this.aImageControls = this.getView().getViewData().aProfilePhotos;
		
		this.iNotificationsToDisplay = undefined;
		this.aUsedImageControls = [];
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
*/
	onBeforeRendering: function() {
		this.initializeCommonUtil();
		this.initializeOdataModel();
		this.initializeOdataUtils();
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
*/
	onAfterRendering: function() {
		this.fetchNotificationData();
	},
	
	/**
	 * Initializes the OData Model
	 * @private
	 */
	initializeOdataModel : function() {
		var asJson = true;
    	this.oOdataModel = new sap.ui.model.odata.ODataModel(this.sOdataServiceUrl, asJson);
	},
	
	/**
	 * Initialize the OData Utility Class
	 * @private
	 */
	initializeOdataUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
	},
	
	/**
	 * Initialize the Common Utility Class
	 * @private
	 */
	initializeCommonUtil: function() {
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
	},
	
	fetchNotificationData : function() {
		var aRequests = [];
		
		var oNotificationUnreadCountReq = this.oODataUtil.createNotificationUnreadCountBatchOperation(this.oOdataModel);
		var oNotificationReq = this.oODataUtil.createNotificationBatchOperation(this.oOdataModel, this.iMaxNotificationsToDisplay);
		
		aRequests.push(oNotificationUnreadCountReq);
		aRequests.push(oNotificationReq);
		
		var fParseResult = this.getFunctionParseResult();
		var fErrorCallBack = this.getFunctionErrorCallBack();
		
		//var self = this;
		this.oODataUtil.executeODataBatchRequest(this.oOdataModel, aRequests, fParseResult, true, fErrorCallBack);
	},
	
	getFunctionParseResult : function() {
		var self = this;
		return function(aResults){
			// Here we turn off the loading animation.
			self.oView.oNotificationNewNotificationOrErrorText.setBusy(false);
			self.oView.oNotificationNewNotificationOrErrorText.setText("");
			self.oView.oNotificationNewNotificationOrErrorText.removeStyleClass(self.sLoadingAnimationDummyTextStyleClass);
			
			// And set the internal state to the initial state.
			self.initializeRefreshAndTransitionState();
			if (aResults[0].error && !aResults[1].error) {
				self.bErrorInNoticesODataResponse = false;
				self.aNotifications = aResults[1].results;
				self.clearAllUiTexts();
				self.hideAllProfilePhotoControls();
				self.setUiContent();
				self.activateNotificationRefresh();
			}
			else if (!aResults[0].error && aResults[1].error) {
				self.bErrorInUnreadCountODataResponse = false;
				self.iNotificationUnreadCount = aResults[0].GetNoticeUnreadCount.UnreadCount;
				self.clearAllUiTexts();
				self.hideAllProfilePhotoControls();
				self.setUiContent();
				self.activateNotificationRefresh();
			}
			else if (aResults[0].error && aResults[1].error) {
				self.clearAllUiTexts();
				self.hideAllProfilePhotoControls();
				self.setUiContent();
				self.activateNotificationRefresh();
			}
			else {
				self.bErrorInUnreadCountODataResponse = false;
				self.bErrorInNoticesODataResponse = false;
				self.bErrorInODataResponse = false;
				self.aNotifications = aResults[1].results;
				self.iNotificationUnreadCount = aResults[0].GetNoticeUnreadCount.UnreadCount;
				if (self.iMaxNotificationsToDisplay > 0) {
					// The user wants to display at least one notification.
					if (self.aNotifications.length > 0) {
						// There is at least one notification that is available to display.
						if (self.iNotificationUnreadCount > 0) {
							// There are at least one unread notification.
							self.iNotificationsToDisplay = Math.min(self.iMaxNotificationsToDisplay, self.aNotifications.length, self.iNotificationUnreadCount);
							self.iNotificationCurrentIndex = 0;
							self.iNotificationPreviousIndex = self.iNotificationsToDisplay - 1;
							self.clearAllUiTexts();
							self.hideAllProfilePhotoControls();
							self.setProfilePhotosSrc();
							self.setUiContent();
							self.activateNotificationTransition();
							self.activateNotificationRefresh();
						}
						else {
							// In the case where the number of unread notifications is less than 
							// or equal to zero and there are notifications to display, we only
							// display the one notification.
							// We do not activate transitions in this case because there
							// is only one notification to display. But we do activate the
							// refresh.
							self.iNotificationsToDisplay = 1;
							self.iNotificationCurrentIndex = 0;
							self.iNotificationPreviousIndex = self.iNotificationsToDisplay - 1;
							self.clearAllUiTexts();
							self.hideAllProfilePhotoControls();
							self.setProfilePhotosSrc();
							self.setUiContent();
							self.activateNotificationRefresh();
						}
					}
					else {
						// There are no notifications available to display.
						// The assumption we make here is that the unread
						// count is also zero. The user has requested that we display
						// some notifications, but since there's absolutely nothing to display,
						// then we display nothing. We may want to display the number of
						// unread notifications, but this is not part of the specification
						// Hence, we simply display nothing.
						// We only activate the refresh since there may be new notifications
						// that come in later.
						self.iNotificationsToDisplay = 0;
						self.clearAllUiTexts();
						self.hideAllProfilePhotoControls();
						self.activateNotificationRefresh();
					}
				}
				else {
					// The user has requested we display absolutely nothing. The user
					// has requested less than or equal to 0 number of notifications
					// be displayed. Hence, we display nothing. And since we don't allow
					// applications using our component to change the number of notifications
					// to display after creating the component, then we don't bother activating
					// the refresh or the transition. If a refresh should be done, then it
					// only makes sense if we want to update the number of unread notifications.
					// However, the setUIContent method currently doesn't allow for displaying
					// only the unread notifications.
					self.iNotificationsToDisplay = 0;
					self.clearAllUiTexts();
					self.hideAllProfilePhotoControls();
				}
			}
		};
	},
	
	getFunctionErrorCallBack : function() {
		var self = this;
		return function(oError){
			self.initializeRefreshAndTransitionState();
			self.clearAllUiTexts();
			self.hideAllProfilePhotoControls();
			self.setUiContent();
			self.activateNotificationRefresh();
		};
	},
	
	setProfilePhotosSrc : function() {
		// If the notification was triggered by a Jam member, then this is that member's id and full name.
		var iSenderId;
		var sSenderFullName;
		var sProfilePhotoURL;
		for(var i = 0; i < this.iNotificationsToDisplay; ++i) {
			iSenderId = this.aNotifications[i].SenderId;
			sSenderFullName = this.aNotifications[i].SenderFullName;
			sProfilePhotoURL = this.getProfilePhotoURL(sSenderFullName,iSenderId);
			this.oView.aProfilePhotos[i].addStyleClass(this.sProfilePhotoHiddenStyleClass);
			this.oView.aProfilePhotos[i].setSrc(sProfilePhotoURL);
		}
	},
	
	getProfilePhotoURL : function(sSenderFullName,iSenderId) {
		if(sSenderFullName !== "") {
			return this.sOdataServiceUrl + "/Members(" + iSenderId + ")/ProfilePhoto/$value";
		}
		else {
			return sap.ui.resource('sap.collaboration.components',"images/Anonymous.png");
		}
	},
	
	hideAllProfilePhotoControls: function() {
		for (var i = 0; i < this.oView.aProfilePhotos.length; ++i) {
			this.oView.aProfilePhotos[i].addStyleClass(this.sProfilePhotoHiddenStyleClass);
		}
	},
	
	clearAllUiTexts : function() {
		this.oView.oNotificationTypeText.setText("");
		this.oView.oNotificationMessageText.setText("");
		this.oView.oNotificationUnreadCountText.setText("");
		this.oView.oNotificationNewNotificationOrErrorText.setText("");
		this.oView.oNotificationAgeText.setText("");
		this.oView.oNotificationGroupText.setText("");
	},
	
	setUiContent : function() {
		if (this.bErrorInODataResponse) {
			// Then display an error.
			this.oView.oNotificationNewNotificationOrErrorText.removeStyleClass(this.sNewNotificationTextStyleClass); // In case the "New Notifications" text was previously being displayed.
			this.oView.oNotificationNewNotificationOrErrorText.addStyleClass(this.sErrorTextStyleClass);
			this.oView.oNotificationNewNotificationOrErrorText.setText(this.oLangBundle.getText("NOTIF_ERROR_MESSAGE"));
		}
		else {
			// No errors. Go ahead and display the content of the tile.
			
			// JavaScript object representation of an OData Notification entity type instance. 
			var oNotification = this.aNotifications[this.iNotificationCurrentIndex];
			
			// Key used to fetch the notification type's text.
			var sNotificationTypeText = "NOTIF_" + oNotification.EventType.toUpperCase();
			
			// If the sender that triggered the notification has written a message, then this
			// message will be non-empty.
			var sNotificationMessageText = oNotification.Message;
			
			var sNotificationUnreadCountText;
			if (this.iNotificationUnreadCount > 999) {
				sNotificationUnreadCountText = this.oLangBundle.getText("NOTIF_MORE_THAN_999_NEW_NOTIFICATIONS");
			}
			else {
				sNotificationUnreadCountText = this.iNotificationUnreadCount;
			}
			
			// The date on which the notification was created.
			var dCreatedAt = oNotification.CreatedAt;
			
			// If the notification has a corresponding Jam group, then this is that group's name.
			// For example, when someone posts an update using @@notify in a group's feed that you're
			// a member of, then the string below will have the name of that group.
			var sGroupName = oNotification.GroupName;
			
			// These are the notification entity type instance's properties that are needed
			// to correctly generate this notification type's text. For example, some notifications
			// require the sender's full name only, while others need both the sender's full name and
			// company name.
			var aNotificationTypePropertyNames = this.oNotificationTypeUtil.getRequiredNotificationPropertyNames(oNotification.EventType);
			var aNotificationPropertyValues = this.getNotificationPropertyValues(aNotificationTypePropertyNames, oNotification);
			
			// Using the properties retrieved above, we can now get this notification type's text and
			// display it in the UI.
			this.oView.oNotificationTypeText.setText(this.oLangBundle.getText(sNotificationTypeText, aNotificationPropertyValues));
			this.oView.oNotificationMessageText.setText(sNotificationMessageText);
			
			
			// Instead of setting the image source for a single image control when we want to display
			// the next image, we now hide the currently displayed image control and unhide the next
			// image control we want to display. Here we make the assumption that the array we use
			// has been prepopulated with image controls, and that the source of each of those image
			// controls has already been set. We hide and unhide image controls by changing the CSS
			// classes that are currently applied to them.
			this.oView.aProfilePhotos[this.iNotificationPreviousIndex].addStyleClass(this.sProfilePhotoHiddenStyleClass);
			this.oView.aProfilePhotos[this.iNotificationCurrentIndex].removeStyleClass(this.sProfilePhotoHiddenStyleClass);
			
			this.oView.oNotificationUnreadCountText.setText(sNotificationUnreadCountText);
			this.oView.oNotificationNewNotificationOrErrorText.removeStyleClass(this.sErrorTextStyleClass); // In case there was previously an error being displayed.
			this.oView.oNotificationNewNotificationOrErrorText.addStyleClass(this.sNewNotificationTextStyleClass);
			this.oView.oNotificationNewNotificationOrErrorText.setText(this.oLangBundle.getText("NOTIF_NEW_NOTIFICATIONS"));
			var aNotificationAgeAndGroup = this.calculateNotificationAge(dCreatedAt,sGroupName).split("\n");
			var sNotificationAgeText = aNotificationAgeAndGroup[0];
			var sNotificationGroupText = "";
			if(aNotificationAgeAndGroup.length > 1){
				sNotificationGroupText = aNotificationAgeAndGroup[1];
			}

			this.oView.oNotificationAgeText.setText(sNotificationAgeText);
			this.oView.oNotificationGroupText.setText(sNotificationGroupText);
			
			this.iNotificationPreviousIndex = this.iNotificationCurrentIndex;
			this.iNotificationCurrentIndex = (this.iNotificationCurrentIndex + 1)%this.iNotificationsToDisplay;
		}
	},
	
	
	getNotificationPropertyValues : function(aNotificationTypePropertyNames, oNotification) {
		var aNotificationTypePropertyValues = [];
		for(var i=0; i < aNotificationTypePropertyNames.length; i++){
			aNotificationTypePropertyValues.push(oNotification[aNotificationTypePropertyNames[i]]);
		}
		return aNotificationTypePropertyValues;
	},
	
	/**
	   * This function calculates the age of the notification
	   *
	   * @param {Date} The notification date
	   * @private
	   */
	   calculateNotificationAge : function(dCreatedAt, sGroupName) {
			
		   
			if (!this.oCommonUtil.isValidDate(dCreatedAt)) {
			  return "";
			}
			
			var dNow = new Date();
			
			// ignore milliseconds
			dCreatedAt.setMilliseconds(0);
			dNow.setMilliseconds(0);
			
			var nMillisInOneMinute = 60000;
			var nMillisInOneHour = nMillisInOneMinute * 60;
			var nMillisInOneDay = nMillisInOneHour * 24;
			
			var nNotificationAgeInMillis = dNow.getTime() - dCreatedAt.getTime();
			
			if (nNotificationAgeInMillis >= nMillisInOneDay) {
				var nNumberOfDays = Math.round(parseFloat(nNotificationAgeInMillis / nMillisInOneDay, 10));
				if (nNumberOfDays === 1) {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_DAY_AGO_GRP",[nNumberOfDays.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_DAY_AGO_NO_GRP",[nNumberOfDays.toString()]);
					}
				}
				else {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_DAYS_AGO_GRP",[nNumberOfDays.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_DAYS_AGO_NO_GRP",[nNumberOfDays.toString()]);
					}
				}
			}
			else if (nNotificationAgeInMillis >= nMillisInOneHour) {
				var nNumberOfHours = Math.round(parseFloat(nNotificationAgeInMillis / nMillisInOneHour, 10));
			
				if (nNumberOfHours === 1) {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_HOUR_AGO_GRP",[nNumberOfHours.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_HOUR_AGO_NO_GRP",[nNumberOfHours.toString()]);
					}
				}
				else {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_HOURS_AGO_GRP",[nNumberOfHours.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_HOURS_AGO_NO_GRP",[nNumberOfHours.toString()]);
					}
				}
			}
			else {
				var nNumberOfMins = Math.round(parseFloat(nNotificationAgeInMillis / nMillisInOneMinute, 10));
			
				if (nNumberOfMins === 1) {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_MINUTE_AGO_GRP",[nNumberOfMins.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_MINUTE_AGO_NO_GRP",[nNumberOfMins.toString()]);
					}
				}
				else {
					if(sGroupName !== "") {
						return this.oLangBundle.getText("NOTIF_MINUTES_AGO_GRP",[nNumberOfMins.toString(), sGroupName]);
					}
					else {
						return this.oLangBundle.getText("NOTIF_MINUTES_AGO_NO_GRP",[nNumberOfMins.toString()]);
					}
				}
			}
	   },
	  
	  activateNotificationTransition : function() {
		  if (!this.bIsTransitionActive) {
			  this.iNotificationsTransitionCallbackRegistrationId = this.getTransitionRegistrationId();
			  this.bIsTransitionActive = true;
		  }
	  },
	  
	  getTransitionRegistrationId: function() {
		  return setInterval(this.setUiContent.bind(this),this.iTransitionInterval);
	  },
	  
	  deactivateNotificationTransition : function() {
		  if (this.bIsTransitionActive) {
			  clearInterval(this.iNotificationsTransitionCallbackRegistrationId);
			  this.bIsTransitionActive = false;
		  }
	  },
	  
	  activateNotificationRefresh : function() {
		  if (!this.bIsRefreshActive) {
			  this.iNotificationsRefreshCallbackRegistrationId = this.getRefreshRegistrationId();
			  this.bIsRefreshActive = true;
		  }
      },
      
      getRefreshRegistrationId: function() {
		  return setInterval(this.refreshNotification.bind(this),this.iRefreshInterval);
	  },
      
      deactivateNotificationRefresh : function() {
    	  if (this.bIsRefreshActive) {
    		  clearInterval(this.iNotificationsRefreshCallbackRegistrationId);
    		  this.bIsRefreshActive = false;
		  }
      },
		
	  refreshNotification : function() {
		   // Deactivate the transitions and the refresh.
		   this.deactivateNotificationTransition();
		   this.deactivateNotificationRefresh();
		   
		   // Update the array and index.
		   this.fetchNotificationData();
	  }
	  
});
}; // end of sap/collaboration/components/fiori/notification/Notification.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.Component') ) {
/*!
 * @copyright@
 */




jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.Component");
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


/**
* Constructor for the share component
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] The OData service URL needed for the share component, the default value is "/sap/opu/odata/sap/SM_INTEGRATION_SRV"
* @param {JSON object} [object] A JSON object passed to the share component. This object contains the following properties:
* 		<ul>
*  			<li>id (optional): is the object Id to be shared in SAP Jam, i.e a URL that navigates back to the same object in the application</li>
*  			<li>display (optional): is a UI5 control to be displayed in the component UI</li>
* 			<li>share (optional): is a note that will be displayed in the component UI and shared to SAP Jam too</li>
* 		</ul>
* @param {JSON object} [externalObject]  A Business Object such as an Opportunity, Sales Order, Account, etc. from the back-end that will be shared as a Featured External Object in a Group in Jam.
* <code>
* <ul>
* 	<li>{string} appContext: The application context. Example: "CRM", "SD", etc.</li>
*	<li>{string} odataServicePath: The relative path to the OData Service.  Example: "/sap/opu/odata/sap/ODATA_SRV"</li>
* 	<li>{string} collection: The name of the OData Collection. Example: "Account", "Opportunity", etc.</li>
* 	<li>{string} key: The key to identify a particular instance of the Business Object. It can be a simple ID or a compound key. Example: "123", "ObjectID='123'", "ObjectID='123',ObjectType='BUS000123'", etc.</li>
* 	<li>{string} name: The short name of the Business Object. Example: "Sales Order 123", "Opportunity 123", "Account 123", etc.</li>
* </ul>
* </code>
* These attributes are not enforced by the UI (missing or incorrect values are not validated), but they are required to make the integration work.
* These attributes also should be mapped in the Back-end System and Jam in order to make the External Object work.
* <br><b>Note:</b> the externalObject is dependent on object.id, therefore, the object.id must also be passed to the Share Component. See the parameter "object" for more information.
* @param {object} [attachments] When you want to provide the user with the option to share file attachments, then the following properties need to be specified:
* <ul>
*   <li>attachmentsArray: An array of {@link sap.collaboration.components.fiori.sharing.attachment.Attachment} objects. This array offers users a list of files they can attach.</li>
* </ul>
* 
* @class Share Component
*
* A Share Component is a ui5 component that applications 
* can use to share information to SAP Jam
* @name sap.collaboration.components.fiori.sharing.Component
* @public
* @deprecated Since version 1.26.0.
* Please use sap.collaboration.components.fiori.sharing.dialog.Component instead.
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.sharing.Component",
		/** @lends sap.collaboration.components.fiori.sharing.Component */ {		
	
		metadata: {
			includes: ["../../resources/css/Sharing.css"],
			/**
			 * the Properties are:
			 * 		component width
			 * 		component height
			 * 		OData Service URL
			 * 		tunnel Service URL
			 * 		JSON like Object that looks like:
			 *		{
             *   		display: display,
             *   		id:"id",
             *   		share: "share"
			 *		}
			 *      
			 *		
			 *		where: 
			 *				display is a UI5 control to be displayed in the component UI
			 * 				id is the Object Id to be shared in JAM
			 *				share: is a note that will be displayed in the component UI that is used also as sharing info to jam
			 * */
			properties: {
				width: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				height: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				oDataServiceUrl: {type: "sap.ui.core.URI", defaultValue: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV"},
				tunnelServiceUrl: {type: "sap.ui.core.URI", defaultValue: "/sap/bc/z_sail_httproxy/Jam/api/v1/OData"},
				object: {type: "object"},
				attachments: {type: "object"},
				externalObject: {type: "object"}
			}
		},
		
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();			
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
			this.sODataServiceUrl = undefined;
			this.sTunnelServiceUrl = undefined;
			this.sJamUrl = undefined;
			this.oODataUtil = undefined;
			
			this.oSharingView = undefined;
			
			this.oView = undefined;
			
			this.aJamGroups = [];
			
			// a flag that can be set to inform this component to bypass any OData call
			// so in this case the groups "this.aJamGroups" should be initialized by the caller like:
			// var oComp =  sap.ui.getCore().createComponent(....);
			// oComp.aJamGroups = aGroups;
			this.bOdataOn = true;
		},
		
		/**
		* Invoked before the Component is rendered.
		* @private
		*/
		onBeforeRendering: function(){
		},
		
		/**
		* Called when the Component has been rendered 
		* Creates the sharing View or rerender it
		* @function
		* @private
		*/
		onAfterRendering: function(){
			// Log Component properties.
			this.logComponentProperties();
			if(this.bStopRendering === undefined || this.bStopRendering === false){
				this.oSharingView =  this.getSharingView();
				this.oSharingView.placeAt(this.getId());
				
			}
		},
		
		/**
		* Called when the Component is destroyed. Use this one to free resources and finalize activities.
		* Destroys the sharing view
		* @private
		*/
		exit: function() {
			// destroy the view in case the component is destroyed as the view will not be destroyed by default. It's not in the aggregation of the component.
			this.oSharingView.destroy();
		},
		
		/**
		* Setter for the Component settings.
		* @param {object} oSettings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @public
		*/
		setSettings : function(oSettings) {
			this.setODataServiceUrl(oSettings.oDataServiceUrl);
			this.setTunnelServiceUrl(oSettings.tunnelServiceUrl);
			this.setObject(oSettings.object);
			this.setAttachments(oSettings.attachments);
			this.setExternalObject(oSettings.externalObject);
		},
		
		/**
		 * Renders the outer HTML for the Component
		 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
		 * @private
		 */
		render: function(oRm){
			oRm.write("<div id='" + this.getId() + "' style='width:" + this.getWidth() + ";height:" + this.getHeight() + "'");
			oRm.write(">");
			oRm.write("</div>");
		},
		
		/**
		 * Creates and returns the sharing view
		 * @private
		 */
		getSharingView : function() {
	        
			var oObjectDisplay;
			var sObjectShare;
			var sObjectId;
			var oObject = this.getObject();
			if (oObject){
				sObjectId = oObject.id;
				oObjectDisplay = oObject.display; 
				sObjectShare = oObject.share; 
			}
			
			var oComponentData = this.getComponentData();
			if(oComponentData) {
				this.oDialogComponent = oComponentData.dialogComponent;
			}
			
			var self = this;
			
			var fNoGroupsCallBack = function() {
				if(!self.oNoGroupsView){
					self.oNoGroupsView = sap.ui.view({
						id: self.getId() + "_NoGroupsView",
						viewData : {
							controlId: self.getId(),
							langBundle: self.oLangBundle,
							jamUrl: self.oSharingView.getController().sJamUrl,
						},
						type: sap.ui.core.mvc.ViewType.JS, 
						viewName: "sap.collaboration.components.fiori.sharing.NoGroups"
					});
				}
				self.oSharingView.destroy();
				self.oSharingView = undefined;
				self.oNoGroupsView.placeAt(self.getId());
			};
			
			if(!this.oSharingView)
			{
				this.oSharingView = sap.ui.view({
					id: this.getId() + "_SharingView",
					viewData : {
						controlId: this.getId(),
						odataServiceUrl: this.getODataServiceUrl(),
						tunnelServiceUrl: this.getTunnelServiceUrl(),
						langBundle: this.oLangBundle,
						jamGroups: this.aJamGroups,
						noGroupsCallBack: fNoGroupsCallBack,
						//jamUrl: this.sJamUrl,
						objectDisplay: oObjectDisplay,
						objectShare: sObjectShare,
						objectId: sObjectId,
						dialogComponent: this.oDialogComponent,
						attachments: this.getAttachments(),
						externalObject: this.getExternalObject()
					},
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.sharing.Sharing"
				});
			}
			else{
					//this.oSharingView.getController().aJamGroups = this.aJamGroups;
					this.oSharingView.getViewData().objectId = sObjectId;
					this.oSharingView.getViewData().objectShare = sObjectShare;
					this.oSharingView.getViewData().objectDisplay = oObjectDisplay;
					this.oSharingView.getViewData().externalObject = this.getExternalObject();
					//**** Note: we dont rerender the view here because when the component container rerender this component, it deleted the domRef and the rerender
					//**** for the view can not be accomplished without the domRef, so we depend on the "placeAt" to do the trick
			}
			
			if(this.oNoGroupsView){
				this.oNoGroupsView.destroy();
				this.oNoGroupsView = undefined;
			}
				
				
			return this.oSharingView;
		},
		
		/**
		 * Shares the data to Jam group
		 * @public
		 */
		shareToJam : function() {
			this.oSharingView.getController().shareToJam();
		},
		
		/**
		 * Logs the properties of the component
		 * @private
		 */
		logComponentProperties: function(){
			jQuery.sap.log.debug("Share Component properties:", "", 
					"sap.collaboration.components.fiori.sharing.Component.logComponentProperties()");
			jQuery.sap.log.debug("width: " + this.getWidth());
	        jQuery.sap.log.debug("height: " + this.getHeight());
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.getODataServiceUrl());
	        jQuery.sap.log.debug("tunnelServiceUrl: " + this.getTunnelServiceUrl());
	        
	        if(this.getObject()) {
	        	jQuery.sap.log.debug("object->id: " + this.getObject().id);
	        	jQuery.sap.log.debug("object->display: " + this.getObject().display);
	        	jQuery.sap.log.debug("object->share: " + this.getObject().share);
	        } else {
	        	jQuery.sap.log.debug("object: undefined");
	        }
	        
	        if(this.getAttachments() && this.getAttachments().attachmentsArray){
	        	jQuery.sap.log.debug("Attachments:");
	        	var attachmentsArray = this.getAttachments().attachmentsArray;
	        	for(var i=0; i<attachmentsArray.length; i++){
	        		jQuery.sap.log.debug("Attachments" + (i+1) + ":");
	        		jQuery.sap.log.debug(attachmentsArray[i].mimeType);
	        		jQuery.sap.log.debug(attachmentsArray[i].name);
	        		jQuery.sap.log.debug(attachmentsArray[i].url);
	        	}
	    	}
	        else{
	        	jQuery.sap.log.debug("attachments: undefined");
	        }
	        
	        if(this.getExternalObject()){
	        	jQuery.sap.log.debug("externalObject->appContext: " + this.getObject().appContext);
	        	jQuery.sap.log.debug("externalObject->odataServicePath: " + this.getObject().odataServicePath);
	        	jQuery.sap.log.debug("externalObject->collection: " + this.getObject().collection);
	        	jQuery.sap.log.debug("externalObject->key: " + this.getObject().key);
	        	jQuery.sap.log.debug("object->name: " + this.getObject().name);
	        	jQuery.sap.log.debug("object->summary: " + this.getObject().summary);
	        } else {
	        	jQuery.sap.log.debug("externalObject: undefined");
	        }
		}
	}
);

}; // end of sap/collaboration/components/fiori/sharing/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.NoGroups.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.sharing.NoGroups.controller');
/*!
 * @copyright@
 */



sap.ui.controller("sap.collaboration.components.fiori.sharing.NoGroups", {

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * Initialize class variables
	 * memberOf NoGroups
	 */
	onInit: function() {
	},

	/**
	* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	* (NOT before the first rendering! onInit() is used for that one!).
	*/
	onBeforeRendering: function() {
	},

	/**
	* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	* This hook is the same one that SAPUI5 controls get after being rendered.
	*/
	onAfterRendering: function() {

	},

	/**
	* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	*/
	onExit: function() {
		this.getView().destroyContent();
	}
	
});
}; // end of sap/collaboration/components/fiori/sharing/NoGroups.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.dialog.Component') ) {
/*!
 * @copyright@
 */



jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


jQuery.sap.declare("sap.collaboration.components.fiori.sharing.dialog.Component");

/**
* Constructor for the share dialog component
* @since version 1.16
* @constructor
* @param {sap.ui.core.URI} [oDataServiceUrl] DEPRECATED The OData service URL will no longer be taken into account.
* @param {object} [object] A JSON object passed to the share component. This object contains the following properties:
*		<ul>
* 			<li>id (optional): is the object Id to be shared in SAP Jam, i.e a URL that navigates back to the same object in the application</li>
*			<li>display (optional): is a UI5 control to be displayed in the component UI
*				<br><b>Note:</b> The preferred object to pass in the display parameter is <code>sap.m.ObjectListItem</code>. Using other type of objects (for example: <code>ap.ui.commons.TextView</code>) may result in problems in the rendering of the content which needs to be corrected by the application owners.</li>
*			<li>share (optional): is a note that will be displayed in the component UI and shared to SAP Jam too</li>
*		</ul>
* @param {object} [externalObject]  A Business Object such as an Opportunity, Sales Order, Account, etc. from the back-end that will be shared as a Featured External Object in a Group in Jam.
* <code>
* <ul>
* 	<li>{string} appContext: The application context. Example: "CRM", "SD", etc.</li>
*	<li>{string} odataServicePath: The relative path to the OData Service.  Example: "/sap/opu/odata/sap/ODATA_SRV"</li>
* 	<li>{string} collection: The name of the OData Collection. Example: "Account", "Opportunity", etc.</li>
* 	<li>{string} key: The key to identify a particular instance of the Business Object. It can be a simple ID or a compound key. Example: "123", "ObjectID='123'", "ObjectID='123',ObjectType='BUS000123'", etc.</li>
* 	<li>{string} name: The short name of the Business Object. Example: "Sales Order 123", "Opportunity 123", "Account 123", etc.</li>
* </ul>
* </code>
* These attributes are not enforced by the UI (missing or incorrect values are not validated), but they are required to make the integration work.
* These attributes also should be mapped in the Back-end System and Jam in order to make the External Object work.
* <br><b>Note:</b> the externalObject is dependent on object.id, therefore, the object.id must also be passed to the Share Component. See the parameter "object" for more information.
* @param {object} [attachments] When you want to provide the user with the option to share file attachments, then the following properties need to be specified:
* <ul>
*   <li>attachmentsArray: An array of {@link sap.collaboration.components.fiori.sharing.attachment.Attachment} objects. This array offers users a list of files they can attach.</li>
* </ul>

* @class Share Dialog Component
* 
* A Share Dialog Component is a ui5 component that applications 
* can use to render the share component in a dialog and then can 
* be used to share information to SAP Jam
* @name sap.collaboration.components.fiori.sharing.dialog.Component
* @extends sap.ui.core.UIComponent
* @public
*/


sap.ui.core.UIComponent.extend("sap.collaboration.components.fiori.sharing.dialog.Component", 
		/** @lends sap.collaboration.components.fiori.sharing.dialog.Component */ 
		{		
	
		metadata: {
			includes: ["../../../resources/css/Sharing.css"],
			properties: {
				attachments: {type: "object"},
				object: {type: "object"},
				externalObject: {type: "object"}
			},
			
			aggregations: {
			},
			
			events: {
			}
		},
		systemSettings: {
			width: "400px", 
			height: "", 
			oDataServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV",
			collaborationHostODataServiceUrl: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData",
			collaborationHostRestService: { url:"/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1",
											urlParams: "" }
		},
		/**
		* Initialization of the Component
		* @private
		*/
		init: function(){
			this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();	
			this.oLangBundle = this.oCommonUtil.getLanguageBundle();
		},

		/**
		* Setter for the Component settings.
		* @param {object} oSettings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @public
		*/
		setSettings : function(oSettings) {
			this.setObject(oSettings.object);
			this.setAttachments(oSettings.attachments);
			//Treat an empty external object as undefined.
			if(JSON.stringify(oSettings.externalObject)=== '{}'){
				this.setExternalObject(undefined);
			} else {
				this.setExternalObject(oSettings.externalObject);
			}
		},
		
		/**
		 * Creates the sharing view
		 * @private
		 */
		createSharingView : function() {
			var self = this;
			
			var oObjectDisplay;
			var sObjectShare;
			var sObjectId;
			var oObject = this.getObject();
			if (oObject){
				sObjectId = oObject.id;
				oObjectDisplay = oObject.display; 
				sObjectShare = oObject.share; 
			}
			
			var fNoGroupsCallBack = function() {
				self.close();
				self.openoNoGroupsDialog(self.oSharingView.getController().sJamUrl);
			};
			
			if(!this.oSharingView)
			{
				this.oSharingView = sap.ui.view({
					id: this.getId() + "_SharingView",
					viewData : {
						controlId: this.getId(),
						odataServiceUrl: this.systemSettings.oDataServiceUrl,
						collaborationHostODataServiceUrl: this.systemSettings.collaborationHostODataServiceUrl,
						collaborationHostRestService: this.systemSettings.collaborationHostRestService,
						langBundle: this.oLangBundle,
						jamGroups: this.aJamGroups,
						sharingDialog: this.oSharingDialog,
						noGroupsCallBack: fNoGroupsCallBack,
						objectDisplay: oObjectDisplay,
						objectShare: sObjectShare,
						objectId: sObjectId,
						attachments: this.getAttachments(),
						externalObject: this.getExternalObject()
					},
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.sharing.Sharing"
				});
			}
			else{
				this.oSharingView.getViewData().objectId = sObjectId;
				this.oSharingView.getViewData().objectShare = sObjectShare;
				this.oSharingView.getViewData().objectDisplay = oObjectDisplay;
				this.oSharingView.getViewData().externalObject = this.getExternalObject();
				this.oSharingView.getViewData().attachments = this.getAttachments();
				//**** Note: we dont rerender the view here because when the component container rerender this component, it deleted the domRef and the rerender
				//**** for the view can not be accomplished without the domRef, so we depend on the "placeAt" to do the trick
			}
		},
		
		/**
		 * Creates the sharing component dialog
		 * @private
		 */
		createSharingDialog: function() {
			var oSharingDialog = new sap.m.Dialog(this.getId() + "_SharingDialog", {
				title: this.oLangBundle.getText("SHARING_PAGE_TITLE"),
				contentWidth: this.systemSettings.width,
				stretch: false,
				afterClose : function(){
					// TODO: Here is where we execute the code responsible
					// for sharing the files.
				}
			}).addStyleClass("sapUiPopupWithPadding");
			
			return oSharingDialog;
		},
		
		/**
		 * Creates a dialog for the case where there are no groups
		 * @param {string} sJamUrl The Jam Url
		 * @private
		 */
		createNoGroupsDialog : function(sJamUrl) {
			if(!this.oNoGroupsView){
				this.oNoGroupsView = sap.ui.view({
					id: this.getId() + "_NoGroupsView",
					viewData : {
						controlId: this.getId(),
						langBundle: this.oLangBundle,
						jamUrl: sJamUrl
					},
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.fiori.sharing.NoGroups"
				});
			}
			
			var oNoGroupsDialog = new sap.m.Dialog(this.getId() + "_NoGroupsDialog", {
				title: this.oLangBundle.getText("SHARING_PAGE_TITLE"),
				stretch: false,
				content : this.oNoGroupsView,
				beginButton : new sap.m.Button(this.getId() + "_CloseButton", {
					text: this.oLangBundle.getText("CLOSE_BUTTON_TEXT"),
					press : function() {
						oNoGroupsDialog.close();
					}
				})
			}).addStyleClass("sapUiPopupWithPadding");
			
			return oNoGroupsDialog;
		},
		
		/**
		 * Opens the share component dialog
		 * @public
		 */
		open : function(){
			if(this.bStopRendering === undefined || this.bStopRendering  === false){
				if (!this.oSharingDialog){
					this.logComponentProperties();
					this.oSharingDialog = this.createSharingDialog();
				}
				
				this.createSharingView();
				this.oSharingDialog.addContent(this.oSharingView);
				this.oSharingDialog.setInitialFocus(this.oSharingView);
				this.createDialogButtons();
				
				if(sap.ui.Device.system.phone){
					this.oSharingDialog.setStretch(true);
				}
				
				try{
					this.oSharingDialog.open();
				}
				catch(oError){
					this.oCommonUtil.displayError();
				}
			}
		},
		
		/**
		 * closes the share component dialog
		 * @private
		 */
		close : function() {
			if (this.oSharingDialog){
				this.oSharingDialog.close();
			}
		},
		
		/**
		 * Opens the dialog for the case where there are no groups
		 * @param {string} sJamUrl The Jam Url
		 * @private
		 */
		openoNoGroupsDialog : function(sJamUrl) {
			this.oSharingDialog.removeAllContent();
			if (!this.oNoGroupsDialog){
				this.oNoGroupsDialog = this.createNoGroupsDialog(sJamUrl);
			}
			
			this.oNoGroupsDialog.open();
		},
		
		/**
		 * create the sharing component dialog buttons
		 * @private
		 */
		createDialogButtons : function() {
			var self = this;
			if (!sap.ui.getCore().byId(this.getId() + "_LeftButton")){
				this.oLeftButton = new sap.m.Button(this.getId() + "_LeftButton", {
					text: this.oLangBundle.getText("OK_BUTTON_TEXT"),
					enabled: false,
					press : function() {
						//self.oSharingDialog.getBeginButton().setEnabled(false);
						self.oSharingView.getController().shareToJam();
						self.oSharingDialog.close();
					}
				});
				this.oSharingDialog.setBeginButton(this.oLeftButton);
			}
			/*else{
				this.oLeftButton.setText(this.oLangBundle.getText("OK_BUTTON_TEXT"));
			}*/
				
			
			if(!this.oRightButton){
				this.oRightButton = new sap.m.Button(this.getId() + "_RightButton", {
					text: this.oLangBundle.getText("CANCEL_BUTTON_TEXT"),
					press : function() {
						self.oSharingDialog.close();
					}
				});
				this.oSharingDialog.setEndButton(this.oRightButton);
			}
		},
		
		/**
		 * Sets the begin and end buttons for the dialog
		 * @private
		 */
		setDialogButtons : function() {
			//this.oSharingDialog.setBeginButton(this.oLeftButton);
			//this.oLeftButton.setEnabled(true);
			//this.oRightButton.setEnabled(true);
			//this.oSharingDialog.setEndButton(this.oRightButton);
		},
		
		/**
		 * Sets the end buttons for the dialog in case there are no groups
		 * @private
		 */
		setCloseButton : function() {
			this.oSharingDialog.destroyBeginButton();
			this.oSharingDialog.setEndButton(this.oCloseButton);
		},
		
		/**
		 * Logs the properties of the component
		 * @private
		 */
		logComponentProperties: function(){
			jQuery.sap.log.debug("Share Component properties:", "", 
					"sap.collaboration.components.fiori.sharing.Component.logComponentProperties()");
			jQuery.sap.log.debug("width: " + this.systemSettings.width);
	        jQuery.sap.log.debug("height: " + this.systemSettings.height);
	        jQuery.sap.log.debug("oDataServiceUrl: " + this.systemSettings.oDataServiceUrl);
	        jQuery.sap.log.debug("collaborationHostODataServiceUrl: " + this.systemSettings.collaborationHostODataServiceUrl);
	        jQuery.sap.log.debug("collaborationHostRestService: " + this.systemSettings.collaborationHostRestService.url +this.systemSettings.collaborationHostRestService.urlParams );
	        
	        
	        if(this.getObject()) {
	        	jQuery.sap.log.debug("object->id: " + this.getObject().id);
	        	jQuery.sap.log.debug("object->display: " + this.getObject().display);
	        	jQuery.sap.log.debug("object->share: " + this.getObject().share);
	        } else {
	        	jQuery.sap.log.debug("object: undefined");
	        }
	        
	        if(this.getAttachments() && this.getAttachments().attachmentsArray){
	        	jQuery.sap.log.debug("Attachments:");
	        	var attachmentsArray = this.getAttachments().attachmentsArray;
	        	for(var i=0; i<attachmentsArray.length; i++){
	        		jQuery.sap.log.debug("Attachments" + (i+1) + ":");
	        		jQuery.sap.log.debug(attachmentsArray[i].mimeType);
	        		jQuery.sap.log.debug(attachmentsArray[i].name);
	        		jQuery.sap.log.debug(attachmentsArray[i].url);
	        	}
	    	}
	        else{
	        	jQuery.sap.log.debug("attachments: undefined");
	        }
	        
	        if(this.getExternalObject()){
	        	jQuery.sap.log.debug("externalObject->appContext: " + this.getExternalObject().appContext);
	        	jQuery.sap.log.debug("externalObject->odataServicePath: " + this.getExternalObject().odataServicePath);
	        	jQuery.sap.log.debug("externalObject->collection: " + this.getExternalObject().collection);
	        	jQuery.sap.log.debug("externalObject->key: " + this.getExternalObject().key);
	        	jQuery.sap.log.debug("object->name: " + this.getExternalObject().name);
	        	jQuery.sap.log.debug("object->summary: " + this.getExternalObject().summary);
	        } else {
	        	jQuery.sap.log.debug("externalObject: undefined");
	        }
		}
	}
);

}; // end of sap/collaboration/components/fiori/sharing/dialog/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil') ) {
/*!
 * @copyright@
 */

/*************************************************************
* AttachmentsUtil helper class
*
**************************************************************/

jQuery.sap.declare("sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil");



sap.ui.base.Object.extend("sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil",{
	
	constructor: function(oLangBundle, oODataUtil, oJamODataModel) {
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this.oLangBundle = oLangBundle;
		this.oODataUtil = oODataUtil;
		this.oJamODataModel = oJamODataModel;
		
	},
	
	/**
	* Creates the file selection dialog
	* @private
	*/
	createFileSelectionDialog : function(sPrefixId, oAttachmentsModel, fOnFileSelectionDialogConfirm, iWidth, iHeight) {
		
		var handleSearch = function(oEvent) {
		
			    var sValue = oEvent.getParameter("value");
			    var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sValue);
			    var oBinding = oEvent.getSource().getBinding("items");
			    oBinding.filter([oFilter]);
		};

		this.oFileSelectionDialog = new sap.m.SelectDialog(sPrefixId + "_FileSelectionDialog",{
			multiSelect: true,
			noDataText:this.oLangBundle.getText("NO_ATTACHMENTS_FOUND_TEXT"),
			rememberSelections: true,
			title: this.oLangBundle.getText("ATTACHMENTS_FIELD_TEXT",[""]),
			confirm: fOnFileSelectionDialogConfirm,
			search: handleSearch,
			liveChange: handleSearch
		});
					
		if(iWidth){
			this.oFileSelectionDialog.setContentWidth(iWidth.toString() + "px");
		}
		
		if(iHeight){
			this.oFileSelectionDialog.setContentHeight(iHeight.toString() + "px");
		}
		var oItemTemplate = new sap.m.StandardListItem({
			title : "{name}",
			icon : "{icon}",
			iconDensityAware : false,
			iconInset : true,
			type : sap.m.ListType.Active
		});
		this.oFileSelectionDialog.setModel(oAttachmentsModel);
		this.oFileSelectionDialog.bindAggregation("items","/attachments", oItemTemplate);
		
		return this.oFileSelectionDialog;
	},
	/**
	* Creates the attachments model necessary for the file selection dialog
	* @private
	*/
	createAttachmentsModel : function(aFiles){
		// create attachment model
		var aAttachments = [];
		for(var i = 0; i < aFiles.length; i++) {
			aAttachments.push( { 
				name: aFiles[i].getName(), 
				mimeType: aFiles[i].getMimeType(),
				url: aFiles[i].getUrl(),
				icon: this.oCommonUtil.getIconFromMimeType(aFiles[i].getMimeType())
			}); 
		}
		var oAttachmentsModel = new sap.ui.model.json.JSONModel({
			attachments : aAttachments			
		});
		
		return oAttachmentsModel;
	},

	
	
	/**
	* Creates the folder selection dialog
	* @private
	*/
	createFolderSelectionDialog : function(sPrefixId, sGroupId, fOnFolderSelectionDialogConfirm, fOnFolderSelectionDialogCancel, iWidth, iHeight) {
		var self = this;
		
		// Header Bar
		var fnBack = function(oEvent){
			self.oFolderSelectionDialog.getContent()[0].getController().navigateBack();
		};
		var oHeaderBar = new sap.m.Bar(sPrefixId + "_FolderSelectionDialogHeaderBar", {
			contentLeft:[new sap.m.Button(sPrefixId + "_FolderSelectionDialogHeaderBarBackButton", { type: sap.m.ButtonType.Back,
											visible: false,
											press: fnBack })],
			contentMiddle: [new sap.m.Label(sPrefixId + "_FolderSelectionDialogHeaderBarTitle", {text:this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT")})] 
		});
		
		var oOKButton = new sap.m.Button( sPrefixId + "_FolderSelectionDialogOKButton", {
			text: this.oLangBundle.getText("OK_BUTTON_TEXT"),
			press: function(evt){ 
				fOnFolderSelectionDialogConfirm(evt);
				self.oFolderSelectionDialog.close();
			}
		});
		var oCancelButton = new sap.m.Button(sPrefixId + "_FolderSelectionDialogCancelButton", {
			text: this.oLangBundle.getText("CANCEL_BUTTON_TEXT"),
			press: function(evt){ 
				fOnFolderSelectionDialogCancel(evt);
				self.oFolderSelectionDialog.close(); 
				}
		});
		
		this.oFolderSelectionDialog = new sap.m.Dialog(sPrefixId + "_FolderSelectionDialog", {
			beginButton: oOKButton,
			endButton: oCancelButton,
			customHeader: oHeaderBar
		}).addStyleClass("sapUiPopupWithPadding");
		var oFolderSelectionDialogContent = this.createFolderSelectionView(sPrefixId, sGroupId, iWidth, iHeight);
		this.oFolderSelectionDialog.addContent(oFolderSelectionDialogContent);
		
		if(sap.ui.Device.system.phone){
			this.oFolderSelectionDialog.setStretch(true);
		}
		
		return this.oFolderSelectionDialog;
	},
	/**
	* Creates the folder selection view
	* @private
	*/
	createFolderSelectionView : function(sPrefixId, sGroupId, iWidth, iHeight) {
		var oFolderView = sap.ui.view({
			id: sPrefixId + "_FolderSelectionView", 
			viewData : {
				controlId: sPrefixId,
				groupId: sGroupId,
				languageBundle: this.oLangBundle,
				oDataUtil: this.oODataUtil,
				oDataModel: this.oJamODataModel,
				folderSelectionDialog: this.oFolderSelectionDialog
			}, 
			type: sap.ui.core.mvc.ViewType.JS, 
			viewName: "sap.collaboration.components.fiori.sharing.FolderSelection"
		});
		
		if(iWidth){
			oFolderView.setWidth(iWidth.toString() + "px");
		}
		
		if(iHeight){
			oFolderView.setHeight(iHeight.toString() + "px");
		}
		
		return oFolderView;
	},	
	/**
	 * Returns the current selected folder 
	 * @private
	 */
	getCurrentFolder: function(){
		if(this.oFolderSelectionDialog){
			return this.oFolderSelectionDialog.getContent()[0].getController().getCurrentFolder();
		}
		return {name: this.oLangBundle.getText("TARGET_FOLDER_FIELD_TEXT"), id:"" };
	},
	/**
	 * Returns the current group id 
	 * @private
	 */
	getCurrentGroupId : function(){
		return this.oFolderSelectionDialog.getContent()[0].getController().sGroupId;
	},
	/**
	 * Reset parameters of folder dialog  
	 * @private
	 */
	resetFolderSelection: function(sGroupId){
		if(this.oFolderSelectionDialog){
			this.oFolderSelectionDialog.getContent()[0].getController().sGroupId = sGroupId;
			this.oFolderSelectionDialog.getContent()[0].getController().sCurrentFolderId = '';
			this.oFolderSelectionDialog.getContent()[0].getController().aFolderBuffer = [];
		}
	},
	/**
	 * Set current folder id 
	 * @private
	 */
	setCurrentFolderId : function(sFolderId){
		this.oFolderSelectionDialog.getContent()[0].getController().sCurrentFolderId = sFolderId;
	}
	
});

}; // end of sap/collaboration/components/fiori/sharing/helper/AttachmentsUtil.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialprofile.Component') ) {
/*!
 * @copyright@
 */
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained



jQuery.sap.declare("sap.collaboration.components.socialprofile.Component");
/**
* Constructor for the Social Profile Component.
* 
* !!! EXPERIMENTAL !!!
* 
* Accepts an object literal <code>mSettings</code> that defines initial 
* property values, aggregated and associated objects as well as event handlers.
* 
* If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
* then the framework assumes property, aggregation, association, event in that order. 
* To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
* or "event:" can be added to the name of the setting (such a prefixed name must be
* enclosed in single or double quotes).
* 
* The supported settings are:
* <ul>
* <li>Properties
* <ul>
* <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Auto) </li>
* <li>{@link #getMemberId memberId} : string </li>
* <li>{@link #getMemberInfo memberInfo} : {object} </li>
* <li>{@link #getOpeningControl openingControl} : {object} </li>
* <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 380px) </li>
* <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 300px) </li>
* 
* @param {string} [sId] id for the new control, generated automatically if no id is given 
* @param {object} [mSettings] initial settings for the new control
* 
* @class Social Profile Component
* @extends sap.ui.core.UIComponent
* 
* The Social Profile Component is a SAPUI5 component that applications can use to display the
* profile information for a specific user. The profile information is coming from SAP Jam. 
* 
* @since version 1.25
* @constructor
* @name sap.collaboration.components.socialprofile.Component
* @public
* @experimental The API is not stable and the UI is not finalized. The implementation for this feature is subject to change.
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.socialprofile.Component",
	/** @lends sap.collaboration.components.socialprofile.Component */
	{
		metadata: {
			version: "1.0",
			includes: ["../resources/css/SocialProfile.css"],
			aggregations: {
	
			},
			properties: {
				placement: {type: "sap.m.PlacementType", group:"Misc", defaultValue: sap.m.PlacementType.Auto},
				memberId: {type: "string", group:"Misc"},
				memberInfo: {type: "object", group:"Misc"},
				openingControl: {type: "object", group:"Misc"},
				height: {type: "sap.ui.core.CSSSize", group:"Dimension", defaultValue: "380px"},
				width: {type: "sap.ui.core.CSSSize", group:"Dimension", defaultValue: "300px"}
			}
		},
		_defaultAttributes: {
			collaborationHostServiceUrl: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData", 
			smiServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV" 
		},
		/**
		* Initializes the Component instance after creation. [borrowed from sap.ui.core.UIComponent]
		* @protected
		*/
		init: function(){
			this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
			this._oLangBundle = this._oCommonUtil.getLanguageBundle();
		},	
		/**
		* Cleans up the component instance before destruction. [borrowed from sap.ui.core.Component]
		* @protected
		*/
		exit: function() {
		},
		/**
		* Function is called when the rendering of the Component Container is started. [borrowed from sap.ui.core.UIComponent]
		* @protected
		*/
		onBeforeRendering: function(){
		},
		/**
		* Function is called when the rendering of the Component Container is completed. [borrowed from sap.ui.core.UIComponent]
		* @protected
		*/
		onAfterRendering: function(){
		},
		
		/**
		 * Opens the social profile component
		 * @public
		 */
		open: function(){
			try{
				this._logComponentProperties();
				this._validateInputParameters();
				this._createView();
				this._createSocialPopover();
				this._oPopover.openBy(this.getOpeningControl());
			}
			catch(oError){
				jQuery.sap.log.error(oError.stack);
				this._oCommonUtil.displayError();
			}
		},
		/**
		* Setter for the Component settings.
		* @param {object} oSettings A JSON object used to set the component settings, this object should contains the same 
		* properties used in the constructor. 
		* @public
		*/
		setSettings : function(oSettings){
			try{
				if(oSettings){
					this.setPlacement(oSettings.placement);
					this.setMemberId(oSettings.memberId);
					this.setMemberInfo(oSettings.memberInfo);
					this.setOpeningControl(oSettings.openingControl);
					this.setHeight(oSettings.height);
					this.setWidth(oSettings.width);
				}
				
				else {
					throw new Error("Settings object is undefined");
				}
			}
			catch(oError){
				jQuery.sap.log.error(oError.stack);
				this._oCommonUtil.displayError();
			}
			
		},
		/**
		 * Creates the sharing view
		 * @private
		 */
		_createView: function(){
			if(!this._oPopoverView){
				this._oPopoverView = new sap.ui.view({
					id: this.getId() + "_PopoverView",
					viewData : {
						collaborationHostServiceUrl: this._defaultAttributes.collaborationHostServiceUrl,
						smiServiceUrl: this._defaultAttributes.smiServiceUrl,
						langBundle: this._oLangBundle,
						memberId: this.getMemberId(),
						memberInfo: this.getMemberInfo(),
						popoverPrefix: this.getId()
					},
					type: sap.ui.core.mvc.ViewType.JS, 
					viewName: "sap.collaboration.components.socialprofile.SocialProfile"
				});
			}
			else{
				this._oPopoverView.getViewData().memberId = this.getMemberId();
				this._oPopoverView.getViewData().memberInfo = this.getMemberInfo();
			}
		},
		/**
		 * Creates the responsive popover
		 * @private
		 */
		_createSocialPopover: function(){
			// create this custom header to add some minor custom css, instead of using the popover 'title' property
			if(!this._oPopover){
				var oHeaderBar = new sap.m.Bar(this.getId() + "_HeaderBar", {contentMiddle: new sap.m.Text({text: this._oLangBundle.getText("SP_TITLE")}).addStyleClass("popoverheader")});			
				this._oPopover = new sap.m.ResponsivePopover(this.getId() + "_Popover", {
					customHeader: oHeaderBar,
					content: [this._oPopoverView],
					placement: this.getPlacement(),
					beginButton: new sap.m.Button(this.getId() + "_JamButton", {text: this._oLangBundle.getText("SP_OPEN_JAM_BUTTON"), enabled: false}),
					showCloseButton: true,
					contentHeight: this.getHeight(),
					contentWidth: this.getWidth()
				}).addStyleClass("popover");
			}
			
			if (this._oPopover.getPlacement() !== this.getPlacement()){
				this._oPopover.setPlacement(this.getPlacement());
			}
			if (this._oPopover.getContentHeight() !== this.getHeight()){
				this._oPopover.setContentHeight(this.getHeight());
			}
			if (this._oPopover.getContentWidth() !== this.getWidth()){
				this._oPopover.setContentWidth(this.getWidth());
			}
		},
		/**
		 * Log the component properties
		 * @private
		 */
		_logComponentProperties: function(){
			jQuery.sap.log.debug("Social Profile Component properties:", "", "sap.collaboration.components.socialprofile.Component._logComponentProperties()");
			jQuery.sap.log.debug("placement: " + this.getPlacement());
			jQuery.sap.log.debug("memberId: " + this.getMemberId());
			jQuery.sap.log.debug("openingControl: " + this.getOpeningControl());
			jQuery.sap.log.debug("height: " + this.getHeight());
			jQuery.sap.log.debug("width: " + this.getWidth());
		},
		/**
		 * Validate input parameters
		 * @private
		 * @throws oErrorIncorrectInputParameters - an object that contains that error thrown if the validation for the input parameters fails
		 */
		_validateInputParameters: function(){
			var oErrorIncorrectInputParameters;
			if(!this.getMemberId()){
				throw new Error("MemberId is undefined");
			}
			
			if(!this.getOpeningControl()){
				throw new Error("Opening control is undefined");
			}
		}
		
	}
);
/**
 * Getter for property <code>placement</code>.
 * Gets the placement of the Social Profile
 *
 * Default value is <code>sap.m.PlacementType.Auto</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getPlacement
 * @function
 */
/**
 * Setter for property <code>placement</code>.
 * Sets the placement of the Social Profile
 * 
 * Default value is <code>sap.m.PlacementType.Auto</code>
 *
 * @param {sap.m.PlacementType} sPlacement  new value for property <code>placement</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setPlacement
 * @function
 */
/**
 * Getter for property <code>memberId</code>.
 * Gets the SAP Jam member id of the user
 *
 * @return {string} the value of property <code>memberId</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getMemberId
 * @function
 */
/**
 * Setter for property <code>memberId</code>.
 * Sets the memberId of the user
 * 
 * @param {string} sMemberId  new value for property <code>memberId</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setMemberId
 * @function
 */
/**
 * Getter for property <code>memberInfo</code>.
 * Gets the SAP Jam member information
 *
 * @return {object} member information <code>memberInfo</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getMemberInfo
 * @function
 */
/**
 * Setter for property <code>memberInfo</code>.
 * Sets the memberInformation of the user
 * 
 * @param {object} oMemberInfo  new value for property <code>memberInfo</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setMemberInfo
 * @function
 */
/**
 * Getter for property <code>openingControl</code>.
 * Gets the opening control for the Social Profile
 *
 * @return {object} the value of property <code>openingControl</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getOpeningControl
 * @function
 */
/**
 * Setter for property <code>openingControl</code>.
 * Sets the opening control for the Social Profile
 * 
 * @param {object} oOpeningControl  new value for property <code>openingControl</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setOpeningControl
 * @function
 */
/**
 * Getter for property <code>height</code>.
 * Gets the height of the Social Profile
 *
 * Default value is <code>380px</code>
 * 
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getHeight
 * @function
 */
/**
 * Setter for property <code>height</code>.
 * Sets the height of the Social Profile
 * 
 * Default value is <code>380px</code>
 *  
 * @param {string} sHeight  new value for property <code>height</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setHeight
 * @function
 */
/**
 * Getter for property <code>width</code>.
 * Gets the width of the Social Profile
 *
 * Default value is <code>300px</code>
 * 
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.collaboration.components.socialprofile.Component#getWidth
 * @function
 */
/**
 * Setter for property <code>width</code>.
 * Sets the width of the Social Profile
 * 
 * Default value is <code>300px</code>
 *  
 * @param {string} sWidth  new value for property <code>width</code>
 * @return {sap.collaboration.components.socialprofile.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialprofile.Component#setWidth
 * @function
 */
}; // end of sap/collaboration/components/socialprofile/Component.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialprofile.SocialProfile.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.socialprofile.SocialProfile.controller');
/*!
 * @copyright@
 */



sap.ui.controller("sap.collaboration.components.socialprofile.SocialProfile", {

/**
* Called when a controller is instantiated and its View controls (if available) are already created.
* Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
* @memberOf sap.collaboration.components.socialprofile.SocialProfile
*/
	onInit: function() {
		this._sJamODataServiceUrl = this.getView().getViewData().collaborationHostServiceUrl;
		this._oODataUtil = new sap.collaboration.components.utils.OdataUtil();
		this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		this._sPrefixId = this.getView().getId();
		this._sJamURL = "";
		this._sJamUserId = "";
		this._sPopoverPrefix = this.getView().getViewData().popoverPrefix;
	},

/**
* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
* (NOT before the first rendering! onInit() is used for that one!).
* @memberOf sap.collaboration.components.socialprofile.SocialProfile
*/
	onBeforeRendering: function() {
		if(!this._oJamODataModel){
			this._initializeJamODataModel();
		}
		if(!this._oSMIODataModel){
			this._initializeSMIODataModel();
		}
		if(!this._oJSONModel){
			this._initializeJSONModel();
		}
		
		if(!this._sJamURL){
			this._fetchJamURL();
			this._attachJamButtonPress();
		}

		if(this._memberId !== this.getView().getViewData().memberId){ // if the same user profile is not clicked, then fetch the user's data
			this.getView().resetHeader(); // this is done in case the header is set to 'No user' in the previous call (where the image, user full name and role have been removed)
			this._clearViewData(); // clear some fields before opening the UI
			this._memberId = this.getView().getViewData().memberId;	
			
			var memberInfo = this.getView().getViewData().memberInfo;
			if(!memberInfo){		// if no member information was passed, fetch the data
				this._fetchData();
			}
			else{
				this._fillData(memberInfo);
			}
		}
	},

/**
* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
* This hook is the same one that SAPUI5 controls get after being rendered.
* @memberOf sap.collaboration.components.socialprofile.SocialProfile
*/
//	onAfterRendering: function() {
//	
//	},

/**
* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
* @memberOf sap.collaboration.components.socialprofile.SocialProfile
*/
//	onExit: function() {
//		
//	},
	
	/**
	 * Initialize the OData Model
	 * @private
	 */
	_initializeJamODataModel : function(){
		var bAsJSON = true;
		this._sJamODataServiceUrl = this.getView().getViewData().collaborationHostServiceUrl;
    	this._oJamODataModel = new sap.ui.model.odata.ODataModel(this._sJamODataServiceUrl, bAsJSON);	
	},
	
	/**
	 * Initialize the SMI OData Model
	 * @private
	 */
	_initializeSMIODataModel : function(){
		var bAsJSON = true;
		this._sSMIODataServiceUrl = this.getView().getViewData().smiServiceUrl;
    	this._oSMIODataModel = new sap.ui.model.odata.ODataModel(this._sSMIODataServiceUrl, bAsJSON);   	
	},
	
	/**
	 * Initialize the JSON Model
	 * @private
	 */
	_initializeJSONModel : function(){
		this._oJSONModel = new sap.ui.model.json.JSONModel({});
		this.getView().setModel(this._oJSONModel);
	},
	
	/**
	 * Attach a press handler function to the press listener in the 'Open in SAP Jam' button
	 * @private
	 */
	_attachJamButtonPress : function(){
		var self = this;
		var oJamButton = sap.ui.getCore().byId(this._sPopoverPrefix + "_JamButton");
		oJamButton.attachPress(function(){
			window.open(self._sJamURL + "/profile/wall/" + self._sJamUserId, "_blank");
		});
	},
	
	/**
	 * Fetch the SAP Jam URL
	 * @private
	 */
	_fetchJamURL: function(){
		var bAsync = true;
		var self = this;
		var oFetchJamURLDeferred = new jQuery.Deferred();
		
		oFetchJamURLDeferred.done(function(sJamURL){
			self._sJamURL = sJamURL;
		});
		oFetchJamURLDeferred.fail(function(sErrorCode){
			jQuery.sap.log.error("SAP Jam request failed at sap.collaboration.components.socialprofile.SocialProfileController._fetchJamURL()");
			self._oCommonUtil.displayError();
		});
		this._oODataUtil.getJamUrl(this._oSMIODataModel, oFetchJamURLDeferred, bAsync);
	},
	
	/**
	 * Fetch the SAP Jam user profile data
	 * @private
	 */
	_fetchData: function(){	
		var self = this;
		
		if(this._oSocialProfileRequest){
			this._oSocialProfileRequest.abort(); // abort an existing request, this is required for cases where the user clicks on a different user profile before the previous request is complete
		}
		this._oSocialProfileRequest = this._oJamODataModel.read( "Members_Autocomplete", { 
			// the success callback returns an array that contains the user's profile, it performs 3 operations:
			// i. set the data to the model
			// ii. set the image url and attach the press event to the footer button ('Open in SAP Jam')
			// iii. call method _fetchMemberPhoneNumbers to get the user's phone numbers
			success: function(oData, response){			
				var oJSONresponse = oData.results[0];
				var oResponsivePopover = sap.ui.getCore().byId(self._sPopoverPrefix + "_Popover");
				
				self._oJSONModel.setData(oJSONresponse);
				
				if(oData.results[0]){ // check that response from SAP Jam is not empty
					var sImageURL = self._sJamODataServiceUrl + "/ThumbnailImages" + "(Id='" + jQuery.sap.encodeURL(oJSONresponse.ThumbnailImage.Id) + "',ThumbnailImageType='" 
					+  jQuery.sap.encodeURL(oJSONresponse.ThumbnailImage.ThumbnailImageType) + "')/$value";
					
					sap.ui.getCore().byId(self._sPrefixId + "_HeaderUserImage").setSrc(sImageURL);
					
					self._sJamUserId = oJSONresponse.Id;
					
					oResponsivePopover.getBeginButton().setEnabled(true); // set the 'Open in SAP Jam' button to enabled
					
					self._fetchMemberPhoneNumbers(self._sJamUserId, self._oJSONModel);
				}
				else {
					self.getView().setHeaderNoUser();
				}
			},
			error: function(oError){
				if(oError.response && oError.response.statusCode){
					jQuery.sap.log.error("SAP Jam request failed at sap.collaboration.components.socialprofile.SocialProfileController._fetchData()");
					self._oCommonUtil.displayError();
				}
			},
			urlParameters: {"Query" : "'" + this._memberId + "'", "$expand" : "ThumbnailImage,MemberProfile"}
		});
	},
	
	/**
	 * Fetch the SAP Jam user phone numbers and update the model
	 * @private
	 */
	_fetchMemberPhoneNumbers: function(sJamUserId, _oJSONModel){
		var self = this;
		
		this._oJamODataModel.read("MemberProfiles('" + sJamUserId + "')" + "/PhoneNumbers" , {
			// the success callback returns an array that contains all the phone numbers associated to the user (work, mobile, home, etc...). 
			// We loop through each item to check if the number belongs to 'Work' or 'Mobile' and set the properties "Work" and "Mobile" to the model
			success: function(oData, response){
				var oJSONresponse = oData.results;
				var sWorkPhone = "";
				var sMobilePhone = "";
				
				for(var i=0, iResponseLength = oJSONresponse.length; i < iResponseLength; i++){
					if(oJSONresponse[i]['PhoneNumberType'] === 'Work'){
						sWorkPhone =  oJSONresponse[i]['PhoneNumber'];
					}
					if(oJSONresponse[i]['PhoneNumberType'] === 'Mobile'){
						sMobilePhone = oJSONresponse[i]['PhoneNumber'];
					}
				}
				_oJSONModel.setProperty("/MemberProfile/PhoneNumbers", {Work: sWorkPhone, Mobile: sMobilePhone});
			},
			error: function(oError){
				jQuery.sap.log.error("SAP Jam request failed at sap.collaboration.components.socialprofile.SocialProfileController._fetchMemberPhoneNumbers()");
				self._oCommonUtil.displayError();
			}
		});
	},
	_fillData: function(oMemberInfo){
		
		var oMemberData = {
				"Id": oMemberInfo.id,
				"FullName": oMemberInfo.fullname,
				"Title": oMemberInfo.title,
				"Email": oMemberInfo.email,
				"MemberProfile": {	"Address":oMemberInfo.address,
									"PhoneNumbers":{}}
		};
		this._oJSONModel.setData(oMemberData);
		sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage").setSrc(oMemberInfo.picture);
		
		this._sJamUserId = oMemberInfo.id;
		
		var oResponsivePopover = sap.ui.getCore().byId(this._sPopoverPrefix + "_Popover");
		oResponsivePopover.getBeginButton().setEnabled(true); // set the 'Open in SAP Jam' button to enabled
		
		this._fetchMemberPhoneNumbers(this._sJamUserId, this._oJSONModel);
	},
	/**
	 * Clear the fields in the view
	 * @private
	 */
	_clearViewData: function(){
		sap.ui.getCore().byId(this._sPrefixId + "_HeaderUserImage").setSrc();
		sap.ui.getCore().byId(this._sPrefixId + "_FullName").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_Role").setText();	
		sap.ui.getCore().byId(this._sPrefixId + "_MobileNumber").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_WorkNumber").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_Email").setText();
		sap.ui.getCore().byId(this._sPrefixId + "_CompanyAddress").setText();
		sap.ui.getCore().byId(this._sPopoverPrefix + "_Popover").getBeginButton().setEnabled(false); // disable the 'Open in SAP Jam' button
	}
});
}; // end of sap/collaboration/components/socialprofile/SocialProfile.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.controls.TimelineEntryControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.controls.TimelineEntryControl");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained

sap.ui.core.Control.extend("sap.collaboration.components.socialtimeline.controls.TimelineEntryControl",
		{metadata:
			{	publicMethods:[],
				library:"sap.collaboration",
				properties:{
					"timelineEntry":{type:"object", group:"data"}
				},
				aggregations:{	
				}/*,
				events:{
					"customActionPress" : {}
				}*/
			}
});
/**
*  Initializes the Control instance after creation. [borrowed from sap.ui.core.Control]
* @protected
*/
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype.init = function(){
	this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
	this._oLangBundle = this._oCommonUtil.getLanguageBundle();
};
/**
* Function is called before the rendering of the control is started. [borrowed from sap.ui.core.Control]
* @protected
*/
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype.onBeforeRendering = function(){
	if(!this._oFlexbox){
		this._oFlexbox = new sap.m.FlexBox(this.getId() + "_flexbox",{direction: "Column"});
		this._fillFlexbox();
	}
};
/**
* Cleans up the control instance before destruction. [borrowed from sap.ui.core.Control]
* @protected
*/
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype.exit = function(){
	if(this._oFlexbox){
		this._oFlexbox.destroy();
		if(this._oPopover){
			this._oPopover.destroy();
		}
	}
};
/**
 * Fills the Flexbox control with content; Text and Link
 * @private
 */
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype._fillFlexbox = function() {
	var oTimelineEntry = this.getTimelineEntry();
	
	if(oTimelineEntry.timelineEntryDetails != undefined 
			&& oTimelineEntry.timelineEntryDetails.length > 0){
		
		var sFirstEntry = this._parseTimelineEntryDetail(oTimelineEntry.timelineEntryDetails[0]); 
		this._oFlexbox.addItem( new sap.m.Text({text: sFirstEntry}) );
		if(oTimelineEntry.timelineEntryDetails.length > 1){
			var oLink = this._createLink(oTimelineEntry.timelineEntryDetails);
			this._oFlexbox.addItem(oLink);
		}
	}
	else{
		this._oFlexbox.addItem( new sap.m.Text({text: oTimelineEntry.text}) );
	}
	
	/*if(oTimelineEntry.customActionData){
		var oLink = this._createCustomActionLink(oTimelineEntry.customActionData);
		this._oFlexbox.addItem(oLink);
	}*/
	
	
};
/**
 * Creates Link control for the additional changes
 * @param {array} aTimelineEntryDetails - Number of timeline entry details
 * @returns {sap.m.Link} Link control
 */
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype._createLink = function(aTimelineEntryDetails){
	var self = this;
	var iAdditionalChanges = aTimelineEntryDetails.length - 1;
	var oLink = new sap.m.Link(this.getId()+"_PopoverLink",{ text:  this._oLangBundle.getText("TE_LINK_TEXT",iAdditionalChanges) });
	oLink.attachPress(function(){ 	if (!self._oPopover){
										self._oPopover = self._createPopover(aTimelineEntryDetails);
									}	
								  	self._oPopover.openBy(oLink);
								});		
	return oLink;		
};

/**
 * Creates Link control for the custom action
 * @param {object} oCustomActionData the data needed for the custom action
 * @returns {sap.m.Link} Link control
 */
/*sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype._createCustomActionLink = function(oCustomActionData){
	var oLink = new sap.m.Link(this.getId()+"_CustomAction",{ text: oCustomActionData.text });
	oLink.attachPress({key: oCustomActionData.key, oODataEntry: oCustomActionData.oDataEntry}, this._onLinkPress, this);		
	return oLink;		
};

sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype._onLinkPress = function(oEvent, oData) {
	this.fireCustomActionPress(oData);
};*/

/**
 * Create the popover list for the additional changes
 * @param {array} aTimelineEntryDetails - list of timeline entry details items
 * @returns {sap.m.Popover}
 */
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype._createPopover = function(aTimelineEntryDetails){
	
	var oChangeList = new sap.m.List(this.getId()+"_ChangeList",{inset:false});

	for (var oEntry in aTimelineEntryDetails){
		var sEntry = this._parseTimelineEntryDetail(aTimelineEntryDetails[oEntry]);
		var oListItem = new sap.m.FeedListItem({text: sEntry,
												showIcon: false});
		oChangeList.addItem(oListItem);
	}
	
	var S_CONTENT_WIDTH = "20em";
	var oPopover = new sap.m.Popover(this.getId()+"_Popover",{
		contentWidth: S_CONTENT_WIDTH,
		placement: sap.m.PlacementType.Auto,
		title: this._oLangBundle.getText("TE_DETAILS_POPOVER_HEADER") + "(" + aTimelineEntryDetails.length +")",
		content:[oChangeList]
	});				
	return oPopover;
};
/**
 * Parses the Timeline entry detail to a format for the additional changes to be displayed in the popover
 * @param {Object} oDetail - Timeline entry detail
 * @returns {String} Timeline entry change description
 */
sap.collaboration.components.socialtimeline.controls.TimelineEntryControl.prototype._parseTimelineEntryDetail = function(oDetail){
	
	var sTimelineEntryDetail="";
	
	switch (oDetail.changeType) {
		case "U":
			sTimelineEntryDetail = this._oLangBundle.getText("TE_DETAILS_CHANGED",[oDetail.propertyLabel, oDetail.beforeValue, oDetail.afterValue]);
			break;
		case "I":
			sTimelineEntryDetail = this._oLangBundle.getText("TE_DETAILS_SET",[oDetail.propertyLabel, oDetail.afterValue]);
			break;
		case "D":
			sTimelineEntryDetail = this._oLangBundle.getText("TE_DETAILS_CLEARED",[oDetail.propertyLabel, oDetail.beforeValue]);
			break;
	}		
	return sTimelineEntryDetail;
};
	
}; // end of sap/collaboration/components/socialtimeline/controls/TimelineEntryControl.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler");


sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler",{
	/**
	 * Constructor for the Jam Data handler
	 * This class is responsible for getting and posting requests to Jam
	 * 
	 * @class JamDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler
	 *
	 * @constructor
	 * @param oCollabModel Collaboration Host OData Service Model (Jam)
	 */
	constructor: function(oCollabModel) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler");
		this._oOdataUtil = new sap.collaboration.components.utils.OdataUtil();
		
		this._oCollabModel = oCollabModel;
		
		this._oExternalBObuffer = {}; // buffer for external object from Jam
	},
	/**
	 * Add a post to an external object in Jam. 
	 * 1 - Find the external object in Jam 
	 * 2 - Post the feed entry to the object.
	 * 
	 * @param {string} sContent - Feed content to be posted
	 * @param {object} oExternalObjectMapping - Set of URLs used by Jam to create an external object.
	 * 			{string} oExternalObjectMapping.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * 			{string} oExternalObjectMapping.ODataLink - Same as Exid.
	 * 			{string} oExternalObjectMapping.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * 			{string} oExternalObjectMapping.ODataMetadata - Same as ObjectType.
	 * 			{string} oExternalObjectMapping.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 * @returns {jQuery.Deferred} Promise object
	 */
	addPostToExternalObject: function(sContent, oExternalObjectMapping){
		var self = this;
		
		var addingPost = 
		this.getExternalObject(oExternalObjectMapping)	// get external object
		.then(function(oExternalObject){		
			return self.postFeedEntryToObject(sContent, oExternalObject);	// post feed entry to object
		}).then(function(oPostingFeedEntry){												
			return oPostingFeedEntry.promise;	// get the promise returned			
		}).then(function(oData, response){
			return oData.results;	// return activity object
		}).fail(function(oError){
			return oError;
		});
		
		return addingPost;
	},
	/**
	 * Gets the external object from Jam (with buffer)
	 * 1 - Find the external object by Exid and Object Type
	 * 2 - If the external object is not found, create the external object in Jam 
	 * 
	 * @param {object} oExternalObjectMapping - Set of URLs used by Jam to create an external object.
	 * 			{string} oExternalObjectMapping.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * 			{string} oExternalObjectMapping.ODataLink - Same as Exid.
	 * 			{string} oExternalObjectMapping.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * 			{string} oExternalObjectMapping.ODataMetadata - Same as ObjectType.
	 * 			{string} oExternalObjectMapping.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 * @returns {jQuery.Deferred} Promise object
	 */
	getExternalObject: function(oExternalObjectMapping){
		var self = this;
		var sBufferKey = oExternalObjectMapping.ObjectType + oExternalObjectMapping.Exid;
		var oPromise = new jQuery.Deferred();
		
		if(!this._oExternalBObuffer[sBufferKey]){													// if external object is not in buffer
			var gettingExternalObject = 
				this.getExternalObjectByExidAndObjectType(oExternalObjectMapping.Exid, oExternalObjectMapping.ObjectType); // get external object from jam

			gettingExternalObject.promise.done(function(oData, response){
				var oExternalObject = oData.results;
				self._oExternalBObuffer[sBufferKey] = oExternalObject; 								// save to buffer
				oPromise.resolve(oExternalObject);
			});
			gettingExternalObject.promise.fail(function(oError){
				if(oError.response.statusCode == 404){												// if external object not found, create the external object, else call error handling
					var creatingExternalObject = self.postExternalObject(oExternalObjectMapping); 	// create external object in Jam
					creatingExternalObject.promise.done(function(oData, response){
						var oExternalObject = oData.results;
						self._oExternalBObuffer[sBufferKey] = oExternalObject; 						// save to buffer
						oPromise.resolve(oExternalObject);
					});
					creatingExternalObject.promise.fail(function(oError){
						oPromise.reject(oError);
					});
				} 
				else{
					oPromise.reject(oError);
				}
			});
		}
		else{
			oPromise.resolve(this._oExternalBObuffer[sBufferKey]);
		}
		return oPromise;
	},
	
	/**********************************************************************
	 * GET request functions
	 **********************************************************************/
	
	/**
	 * Performs a GET request to get an external object from Jam by exid and object type
	 * 
	 * @param {string} sExid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * @param {string} sObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getExternalObjectByExidAndObjectType: function(sExid, sObjectType){
		var self = this;
		var sEndpoint = "/ExternalObjects_FindByExidAndObjectType";
		
		var oPromise = new jQuery.Deferred();
		var getExternalObjectSuccess = function(oData, response){
			self._oLogger.info("External object found: " + oData.results.Name);
			oPromise.resolve(oData, response);
		};
		var getExternalObjectError = function(oError){
			self._oLogger.error(oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				context: null,
				urlParameters: { "Exid":"'"+ sExid.replace(/'/g, "''") +"'", "ObjectType":"'"+ sObjectType.replace(/'/g, "''") +"'"},
				async: true,
				filters: [],
				sorters: [],
				success: getExternalObjectSuccess, 
				error: 	getExternalObjectError
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise 
		};
	},
	/**
	 * Perform GET request to read the feed entries of an external object
	 * 
	 * @param {object} oExternalObject - external object from Jam
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getFeedEntries: function(oExternalObject, sNextLink){
		var self = this;
		var sEndpoint = ""; 
		if(sNextLink){
			sEndpoint = sNextLink;
		}
		else {
			sEndpoint = "/ExternalObjects" + "('" +  jQuery.sap.encodeURL(oExternalObject.Id) + "')/FeedEntries";
		}
		
		var oPromise = new jQuery.Deferred();		
		var fSuccess = function(oData, response){
			self._oLogger.info("Feed entries were successfully retrieved.");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to retrieve feed entries: " + oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				context: null,
				urlParameters: {"$expand":"Creator/ThumbnailImage,Creator/MemberProfile"},
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise
		};
	},
	/**
	 * Performs a GET request to get the Autocomplete for a specific value in SAP Jam
	 * 
	 * @param {string} sValue - The value entered for the Autocomplete and will be used to search in SAP Jam.
	 * @returns {object} an object which has an abort function to abort the current request
	 */
	getSuggestions: function(sValue){
		var self = this;
		var sEndpoint = "/Members_Autocomplete";
		
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			oPromise.resolve(oData, response);
		};
		
		var fError = function(oError){
			oPromise.reject(oError);
		};
		
		var mParameters = {
				urlParameters: {"Query" : "'" + sValue + "'"},
				async: true,
				success: fSuccess,
				error: 	fError			
		};
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise 
		};
	},
	/**
	 * Performs a GET request to get the Feed Entry from SAP Jam
	 * 
	 * @param {string} sActivityId - Activity Id for the Feed Entry
	 * @returns {object} object containing the object to abort the request and promise
	 * */
	getFeedEntryFromActivity: function(sActivityId){
		var self = this;
		var sEndpoint = "/Activities('" + jQuery.sap.encodeURL(sActivityId) + "')/FeedEntry";
		
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to get the feed entry: "+ oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				urlParameters: {
					$expand: "Creator/ThumbnailImage"
				},
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise 
		};
	},
	
	/**
	 * Get the Replies for a specific FeedEntry
	 * 
	 * @param {string} sFeedEntryId - Feed entry ID
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getReplies: function(sFeedEntryId){
		var self = this;
		var sEndpoint = "/FeedEntries('" + jQuery.sap.encodeURL(sFeedEntryId) + "')/Replies";
		
		var oPromise = new jQuery.Deferred();		
		var fSuccess = function(oData, response){
			self._oLogger.info("Replies were successfully retrieved.");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to retrieve replies: " + oError.response.statusText, oError.stack);
			oPromise.reject(oError);
		};

		var oUrlParameters = { 
				'$top': 100, 
				'$orderby': 'CreatedAt desc',
				'$expand': 'Creator,ThumbnailImage'
		};
		
		var mParameters = {
				context: null,
				urlParameters: oUrlParameters,
				async: true,
				success: fSuccess,
				error: 	fError			
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise
		};
	},
	
	/**
	 * Perform a GET request to get the member's information
	 * 
	 * @param {string} sUserEmail 
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getMemberByAutocomplete: function(sUserEmail){
		var self = this;
		var sEndpoint = "/Members_Autocomplete";
		var mUrlParameters = {	"Query" : "'"+sUserEmail+"'",
								"$expand" : "ThumbnailImage,MemberProfile" };
		
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to get member information: "+ oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				urlParameters: mUrlParameters ,
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise 
		};
	},
	
	/**
	 * Perform a $batch request to get the info for several members 
	 * 
	 * @param {array} aUserEmails - array of emails
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getUserInfoBatch: function(aUserEmails){
		var self = this;
		
		var aBatchReadOperations = [];
		aUserEmails.forEach(function(sUserEmail){
			var sEndpoint = "/Members_Autocomplete?Query='"+jQuery.sap.encodeURL(sUserEmail)+"'&$expand=ThumbnailImage,MemberProfile";	
			var sMethod = "GET";
			var oData = null;
			var oParameters = null;
			
			aBatchReadOperations.push(self._oCollabModel.createBatchOperation( sEndpoint, sMethod, oData, oParameters));
		});
		
		this._oCollabModel.addBatchReadOperations(aBatchReadOperations);
		
		var bAsync = true;
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			var aResults = self._oOdataUtil.parseBatchResponse(oData.__batchResponses);
			oPromise.resolve(aResults, response);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to get member information: "+ oError.response.statusText);
			oPromise.reject(oError);
		};
		return {
			request: this._oCollabModel.submitBatch(fSuccess, fError, bAsync),
			promise: oPromise 
		};
	},
	
	getSender: function(){
		var self = this;
		var sEndpoint = "/Self";
		
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			self._oLogger.info("The reply was successfully posted.");
			oPromise.resolve(oData.results);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to retrieve the sender: " + oError.response.statusText, oError.stack);
			oPromise.reject(oError);
		};
		var mParameters = {
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.read(sEndpoint, mParameters),
			promise: oPromise 
		};
	},

	/**********************************************************************
	 * POST request functions
	 **********************************************************************/

	/**
	 * Performs a POST request to create an external object in Jam
	 * 
	 * @param {object} oExternalObjectMapping - Set of URLs used by Jam to create an external object.
	 * 			{string} oExternalObjectMapping.Exid - OData URL of the business object being shared. This URL is URL for the OData service that exposes the business object that is in the SAP system.
	 * 			{string} oExternalObjectMapping.ODataLink - Same as Exid.
	 * 			{string} oExternalObjectMapping.ObjectType - OData service's metadata URL appended with a hash (#) symbol and the business object's entity set. 
	 * 			{string} oExternalObjectMapping.ODataMetadata - Same as ObjectType.
	 * 			{string} oExternalObjectMapping.ODataAnnotations - Annotations URL. Specifies to Jam what to display of the business object.
	 * @returns {object} object containing the object to abort the request and promise
	 */
	postExternalObject: function(oExternalObjectMapping){
		var self = this;
		var sEndpoint = "/ExternalObjects";
		var oDataPayload = oExternalObjectMapping;
		
		var oPromise = new jQuery.Deferred();
		var postExternalObjectSuccess = function(oData, response){
			self._oLogger.info("External object created. " + oData.results.Name);
			oPromise.resolve(oData, response);
		};
		var postExternalObjectError = function(oError){
			self._oLogger.error("Failed to create external object: " + oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: postExternalObjectSuccess, 
				error: 	postExternalObjectError
		};
		
		return {
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise 
		};
	},
	/**
	 * Performs a POST request to create a feed entry to the object feed of an existing external object in Jam
	 * 
	 * @param {string} sContent - Feed content to be posted
	 * @param {object} oExternalObject - external object from Jam
	 * @returns {object} object containing the object to abort the request and promise
	 */
	postFeedEntryToObject: function(sContent, oExternalObject){
		var self = this;
		var sEndpoint = "/Activities";
		var oDataPayload = { "Content": sContent, "Object":  oExternalObject, "Verb": "comment" };
		
		var oPromise = new jQuery.Deferred();
		var fSuccess = function(oData, response){
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to get the activity: "+ oError.response.statusText);
			oPromise.reject(oError);
		};
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
		};
		
		return { 
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise 
		};
	},
	/**
	 * Post a Reply for a specific FeedEntry
	 * 
	 * @param {string} sFeedEntryId - Feed entry ID
	 * @param {string} sReplyText - Reply text to post 
	 * @returns {object} object containing the object to abort the request and promise
	 */
	postReply: function(sFeedEntryId, sReplyText){
		var self = this;
		var sEndpoint =  "/FeedEntries('" + jQuery.sap.encodeURL(sFeedEntryId) + "')/Replies";
		var oDataPayload = { "Text": sReplyText };

		var oPromise = new jQuery.Deferred();		
		var fSuccess = function(oData, response){
			self._oLogger.info("The reply was successfully posted.");
			oPromise.resolve(oData);
		};
		var fError = function(oError){
			self._oLogger.error("Failed to post reply: " + oError.response.statusText, oError.stack);
			oPromise.reject(oError);
		};
		
		var mParameters = {
				context: null,
				urlParameters: null,
				async: true,
				success: fSuccess, 
				error: 	fError
		};

		return { 
			request: this._oCollabModel.create(sEndpoint, oDataPayload, mParameters),
			promise: oPromise
		};

	}
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/JamDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler");


sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler",{
	/**
	 * Constructor for the Social Media Integration Data handler
	 * This class is now responsible to provide the mapping of the business object to be used by Jam
	 * 
	 * @class SMIntegrationDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler
	 *
	 * @constructor
	 * @param {object} oSMIntegrationModel - Social Media Integration OData model
	 */
	constructor: function(oSMIntegrationModel) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler");
		
		this._oSMIntegrationModel = oSMIntegrationModel;
		
		this._oOdataUtil = new sap.collaboration.components.utils.OdataUtil();
		
		this._oExternalBOMappingBuffer = {};	// Buffer for external bo mappings
		
		this.oJamConfigurationStatusMap = {
			configurationOk: 0,
			configuartionError: 1
		};
	},
	/**
	 * Map the internal object to external object using the SMI OData service
	 * The mappings for these BOs are buffered to avoid making another call to the service
	 * 
	 * @param {object} oInternalBO - internal identifier of a business object
	 * 			{string} appContext - application context
	 * 			{string} collection - entity collection
	 * 			{string} key - business object key
	 * 			{string} odataServicePath - path for the business object's OData service
	 * @returns {object} Promise object
	 */
	mapInternalBOToExternalBO: function(oInternalBO){
		var sBufferKey = oInternalBO.appContext + oInternalBO.collection + oInternalBO.key + oInternalBO.odataServicePath; 
		var self = this;
		
		var oPromise;
		
		// if not found, get external object mapping
		if(!this._oExternalBOMappingBuffer[sBufferKey]){
			oPromise = 
				this.getExternalObjectMapping(oInternalBO).promise
				.then(function(oData, response){
					self._oLogger.info("External business object mapping was found.");
					self._oExternalBOMappingBuffer[sBufferKey] = oData.MapInternalBOToExternalBO; // add oExternalBOMapping to buffer
					return self._oExternalBOMappingBuffer[sBufferKey];
				});
		}
		else{
			oPromise = new jQuery.Deferred();
			oPromise.resolve(this._oExternalBOMappingBuffer[sBufferKey]);
		}
		return oPromise;
	},
	
	/**
	 * Get Jam Configuration Status
	 * @param {sap.ui.model.odata.ODataModel} oOdataModel The OData model object
	 */
	getJamConfigurationStatus : function(fCallerSuccess, fCallerError){
		var sOdataEndPoint = "/GetJamConfigurationStatus";
		var self = this;
	   	var mParameters = {
				async: false,
				success: function(oData,response){
					if (oData.GetJamConfigurationStatus.StatusCode === self.oJamConfigurationStatusMap.configurationOk){
						fCallerSuccess(true);
					}
					else{
						fCallerSuccess(false);
					}
			   	}, 
				error: function(oError){
					self._oLogger.error(JSON.stringify(oError));
			   		fCallerError();
			   	}
		};
	   	this._oSMIntegrationModel.read(sOdataEndPoint, mParameters);
	},
	
	
	/**
	 * Get the Mapping for the External Object
	 * @param {object} oInternalBO - internal identifier of a business object
	 * 			{string} appContext - application context
	 * 			{string} collection - entity collection
	 * 			{string} key - business object key
	 * 			{string} odataServicePath - path for the business object's OData service
	 * @returns {object} object containing the object to abort the request and promise
	 */
	getExternalObjectMapping: function(oInternalBO){
		var self = this;
		var sEndpoint = "/MapInternalBOToExternalBO";
		var oPromise = new jQuery.Deferred();
		
		//Passing the URL parameters in a map so the encoding is done in SAPUI5 ODataModel class 
		var aUrlParameters = {};
		aUrlParameters["ApplicationContext"] = "'" + oInternalBO.appContext + "'";
		aUrlParameters["ODataCollection"] = "'" + oInternalBO.collection + "'";
		aUrlParameters["ODataKeyPredicate"] = "'" + oInternalBO.key + "'";
		aUrlParameters["ODataServicePath"] = "'" + oInternalBO.odataServicePath + "'";
		
		var fSuccess = function(oData, response){
			self._oLogger.info("External object mapping found");
			oPromise.resolve(oData, response);
		};
		var fError = function(oError){
			self._oLogger.error(oError.response.statusText);
			oPromise.reject(oError);
		};

		var mParameters = {
				context: null,
				urlParameters: aUrlParameters,
				async: true,
				filters: [],
				sorters: [],
				success: fSuccess, 
				error: 	fError
		};
		
	   	return { 
	   		request: this._oSMIntegrationModel.read(sEndpoint,mParameters),
	   		promise: oPromise
	   	};
	}
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/SMIntegrationDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler");





sap.ui.base.Object.extend("sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler",{
	/**
	 * Constants for the TimelineDataHandler Class
	 */
	constants: {
		FILTER_JAM_ALL: "filter_jam_all",
		FILTER_BACKEND_ALL: "filter_backend_all"
	},
	/**
	 * Constructor for the Timeline Data Handler
	 * This class is responsible for providing the data for the Timeline control.
	 * 
	 * @class TimelineDataHandler
	 * @name sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler
	 * 
	 * @constructor
	 * @param oBusinessObjectMap - JSON object containing the following properties:
	 * 	<ul>
	 * 		<li>{sap.ui.model.odata.ODataModel} serviceModel required - OData model to retrieve timeline entries
	 * 		<li>{string} servicePath: The relative path to the OData service for the business object (example: "/sap/opu/odata/sap/ODATA_SRV")		
	 * 		<li>{string} collection: Entity collection name of the business object
	 * 		<li>{string} applicationContext: The application context (example: "CRM", "SD", etc.)
	 * 		<li>{function} customActionCallback: A callback function to determine which timeline entries should receive the custom action. The function should return an array of text/value objects.
	 * 	<ul>
	 * @param {object} oJamDataHandler - Data Handler for Jam
	 * @param {object} oSMIntegrationModel - Social Media Integration OData service model
	 * @param {integer} iPageSize - The page size to be returned to the timeline
	 */
	constructor: function(oBusinessObjectMap, oJamDataHandler, oSMIntegrationModel, iPageSize, bEnableSocial) {	
		this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler");
		
		this._oBusinessObjectMap = oBusinessObjectMap;
		this._sBusinessObjectKey ="";
		
		this._oBOModel = this._oBusinessObjectMap.serviceModel;
		this._oCollabModel = oJamDataHandler._oCollabModel;
		this._oSMIntegrationModel = oSMIntegrationModel;
		
		this._oJamDataHandler = oJamDataHandler;
		
		this._iPageSize = iPageSize;
		this._iTimelineEntriesPageSize = iPageSize;
		this._iTimelineEntriesSkip = 0;
		this._iFeedEntriesPageSize = iPageSize*2;
		this._sFeedEntriesNextLink = "";
		
		this._fCustomActionCallBack = oBusinessObjectMap.customActionCallback;
		
		this._bEnableSocial = bEnableSocial;
		
		this._oTimelineTermsUtility = new sap.collaboration.components.socialtimeline.annotations.TimelineTermsUtility(this._oBOModel.getServiceMetadata(), this._oBOModel.getServiceAnnotations());
		this._oServiceDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.ServiceDataHandler(this._oBOModel, this._oTimelineTermsUtility);
		this._oSMIntegrationDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler(this._oSMIntegrationModel);		
		
		this._aTimelineEntries = [];
		this._aFeedEntries = [];
		
		this._oMemberDataBuffer = {};
	},
	/**
	 * Set the business object for the timeline data handler and reset the skip token
	 * @param {string} sKey - Business Object Key
	 */
	setBusinessObjectKey: function(sKey){
		this.reset();
		
		this._sBusinessObjectKey = sKey;
		
		// Abort request if there is still one running
		if(this._oTimelineEntriesReadRequest){
			this._oTimelineEntriesReadRequest.abort();
		}
		// Abort request if there is still one running
		if(this._oFeedEntriesReadRequest){
			this._oFeedEntriesReadRequest.abort();
		}
	},
	/**
	 * Returns the data for the Timeline Control one page at a time.
	 * The business object key must be set using setBusinessObjectKey before calling this function.
	 * 
	 * 	1a- Get feed entries from Jam
	 *  1b- Get timeline entries from backend 
	 *  2- Merge entries when both GET requests are done
	 *  
	 * @param {Object} oFilter - Filter object for the backend and Jam
	 * @returns {jQuery.Deferred} Promise to handle success or failure 
	 */
	getTimelineData: function(oFilter){
		var self = this;		
		var oPromise = jQuery.Deferred();
		
		var readyingTimelineEntries = new jQuery.Deferred();
		var readyingFeedEntries = new jQuery.Deferred();
		
		// 1a- Read the feed entries from Jam if bEnabledSocial is true and if the backend filter is not set
		if(this._bEnableSocial === true && !oFilter.backend){
			var gettingFeedEntries = this._getFeedEntries();
			gettingFeedEntries.done(function(aFeedEntries){
				var aTimelineItems = self._mapFeedEntriesToTimelineItems(aFeedEntries);
				readyingFeedEntries.resolve(aTimelineItems);
			});
			gettingFeedEntries.fail(function(oError){
				oPromise.reject(oError);
			});
		}
		else{
			readyingFeedEntries.resolve([]);
		}
		
		// 1b- Read Timeline Entries of Business Object if the jam filter is not set
		if(!oFilter.jam){
			var gettingTimelineEntries = this._getTimelineEntries(oFilter.backend);
			gettingTimelineEntries.done(function(aTimelineEntriesData){
				var aTimelineItems = self._mapTimelineEntriesToTimelineItems(aTimelineEntriesData);
				
				if(self._bEnableSocial === true){
					var fillingPictures = self._fillPicturesForTimelineItems(aTimelineItems);
					fillingPictures.always(function(aTLItems){
						readyingTimelineEntries.resolve(aTLItems);
					});
				}
				else{
					readyingTimelineEntries.resolve(aTimelineItems);
				}
				self._iTimelineEntriesSkip += self._iTimelineEntriesPageSize;
			});
			gettingTimelineEntries.fail(function(oError){
				oPromise.reject(oError);
			});
		}
		else {
			readyingTimelineEntries.resolve([]);
		}
		// 2- Merge feed entries and timeline entries
		jQuery.when(readyingTimelineEntries,readyingFeedEntries).then(
			function(aTimelineEntries, aFeedEntries){
				var aTimelineItems = self._mergeEntries(aTimelineEntries, aFeedEntries);
				oPromise.resolve(aTimelineItems);
			},
			function(oError){
				oPromise.reject(oError);
			});
		
		return oPromise;
	},
	/**
	 * Add top level post.
	 * The business object key must be set using setBusinessObjectKey before calling this function.
	 * 
	 * 1- Get the External BO mapping from SMI service
	 * 2- Post a feed entry to the external object
	 * 
	 * @param sContent
	 * @param oInternalBo
	 * @param {object} oPromise - Promise object to handle success or failure of request
	 */
	addTopLevelPost: function(sContent, oInternalBo){
		var self = this;
		
		return this._oSMIntegrationDataHandler.mapInternalBOToExternalBO(oInternalBo)
		.then(function(oExternalBOMapping){
			return self._oJamDataHandler.addPostToExternalObject(sContent, oExternalBOMapping);
		});
	},
	/**
	 * Resets the timeline data by setting the skip counter to 0, the next link to an empty string, and the timeline/feed entries to an empty array
	 */
	reset: function(){
		this._iTimelineEntriesSkip = 0; // reset skip counter
		this._sFeedEntriesNextLink = ""; // reset next link
		this._aTimelineEntries = []; // empty timeline entries 
		this._aFeedEntries = []; // empty feed entries 
	},
	/**
	 * Get the feed entries for the current object in this._sBusinessObjectKey and this._oBusinessObjectMap
	 * 
	 * 1- Get the external object mapping from the SM Integration service
	 * 2- Get the external object from Jam
	 * 3- Get the feed entries for external object
	 * 
	 * @returns {jQuery.Deferred} Promise to handle success or failure 
	 */
	_getFeedEntries: function(){
		var self = this;
		var oInternalBO = { 
				"appContext": this._oBusinessObjectMap.applicationContext,
				"collection": this._oBusinessObjectMap.collection,
				"key": this._sBusinessObjectKey,
				"odataServicePath": this._oBusinessObjectMap.servicePath 
		};
		
		var oPromise = 
			this._oSMIntegrationDataHandler.mapInternalBOToExternalBO(oInternalBO)
			.then(function(oExternalBOMapping){
				// get the external object
				return self._oJamDataHandler.getExternalObject(oExternalBOMapping);
			})
			.then(function(oExternalBO){
				// if there is no next link in buffer, this means there is no more feed entries to retrieve 
				if(self._sFeedEntriesNextLink == undefined){
					var gettingFeedEntries = new jQuery.Deferred();
					gettingFeedEntries.resolve({"results":[]}, null);
					return {request: null,
							promise: gettingFeedEntries };
				}
				// if the link in buffer is "", then get the first page of feed entries
				else if(self._sFeedEntriesNextLink == ""){
					return self._oJamDataHandler.getFeedEntries(oExternalBO); 
				}
				// if the next link in buffer is defined, then get the next page of feed entries defined by the next link
				else{
					return self._oJamDataHandler.getFeedEntries(oExternalBO, self._sFeedEntriesNextLink); 
				}
			})
			.then(function(oGettingFeedEntries){
				self._oFeedEntriesReadRequest = oGettingFeedEntries.request; // save the request
				return oGettingFeedEntries.promise;
			})
			.then(function(oFeedEntries){
				self._sFeedEntriesNextLink = oFeedEntries.__next; // save the next link
				return oFeedEntries.results;
			});
		return oPromise;
	},
	/**
	 * Map a collection of the Feed Entries into items for the Timeline control
	 * @param {Array} aFeedEntries - Array of feed entries
	 * @returns {Array} - Timeline items
	 */
	_mapFeedEntriesToTimelineItems: function(aFeedEntries){
		var self = this;
		var oTimelineItems = [];
		
		aFeedEntries.forEach(function(oFeedEntry){
			var oTLItem = {};
			oTLItem.timelineItemData = self._mapFeedEntryToTimelineItem(oFeedEntry); 
			oTLItem._feedEntryData = oFeedEntry; // keep original feed entry data
			
			oTimelineItems.push(oTLItem);
		});
		return oTimelineItems;
	},
	/**
	 * Map a single Feed Entry into an item for the Timeline control
	 * @param {object} oFeedEntry - A single feed entry
	 * @returns {object} Timeline item 
	 */
	_mapFeedEntryToTimelineItem: function(oFeedEntry){
		var POST_ICON = "sap-icon://post";
		
		if(!this.getUserInfoFromBuffer(oFeedEntry.Creator.Email)){
			this.addUserInfoToBuffer(oFeedEntry.Creator);
		}
		
		var oTimelineItem = {  
				dateTime: oFeedEntry.CreatedAt,
				userName: oFeedEntry.Creator.FullName,
				userEmail: oFeedEntry.Creator.Email,
				title: oFeedEntry.Action,
				text: oFeedEntry.Text,
				icon: POST_ICON
		};
		oTimelineItem.userPicture = this.getUserPicture(oTimelineItem.userEmail);

		return oTimelineItem;
	},
	/**
	 * Map a collection of the Timeline Entries into items for the Timeline control
	 * @param {Array} aTimelineEntriesData - Array of timeline entries
	 * @returns {Array} - Timeline items
	 */
	_mapTimelineEntriesToTimelineItems: function(aTimelineEntriesData){
		var self = this;
		var oTimelineItems = [];
		
		aTimelineEntriesData.forEach(function(oTimelineEntry){
			var oTLItem = {};
			oTLItem.timelineItemData = self._mapTimelineEntryToTimelineItem(oTimelineEntry); 
			
			// custom actions
			var aCustomActions = undefined;
			if(self._fCustomActionCallBack){
				aCustomActions = self._fCustomActionCallBack(oTimelineEntry);
				// if the customActionCallBack returns something that is not an array, we log it as an error
				if(aCustomActions && !jQuery.isArray(aCustomActions)){
					self._oLogger.error("The property customActionCallback does not return an array.");
				}
				else if(aCustomActions){
					aCustomActions.oDataEntry = oTimelineEntry;
					oTLItem.timelineItemData.customActionData = aCustomActions;
				}
			}
			oTimelineItems.push(oTLItem);
		});
		return oTimelineItems;
	},
	/**
	 * Map a single Timeline Entry into an item for the Timeline control
	 * @param {object} oTimelineEntry - A single timeline entry
	 * @returns {object} Timeline item 
	 */
	_mapTimelineEntryToTimelineItem: function(oTimelineEntry){
		var oTimelineEntryFields = this._oTimelineTermsUtility.getTimelineEntryFields(this._oBusinessObjectMap.collection);
		
		var oTimelineItem = {  
				dateTime: oTimelineEntry[oTimelineEntryFields.TimeStamp],
				userName: oTimelineEntry[oTimelineEntryFields.ActorName],
				userEmail: oTimelineEntry[oTimelineEntryFields.ActorExtID].toLowerCase(),
				title: oTimelineEntry[oTimelineEntryFields.ActionText] ,
				text: oTimelineEntry[oTimelineEntryFields.SummaryText],
				icon: oTimelineEntry[oTimelineEntryFields.Icon],
				timelineEntryDetails: this._processTimelineEntryDetails(oTimelineEntry[oTimelineEntryFields.TimelineDetailNavigationPath].results,
																		this._oBusinessObjectMap.collection)
			};
		oTimelineItem.userPicture = this.getUserPicture(oTimelineItem.userEmail);
		return oTimelineItem;
	},
	/**
	 * Returns the timeline entry details in format for the social timeline
	 * @param {Array} aTimelineEntryDetails - Timeline entry details
	 * @param {String} sEntityCollection - Entity collection name
	 * @returns {Array} Timeline entry details for the social timeline 
	 */
	_processTimelineEntryDetails : function(aTimelineEntryDetails, sEntityCollection){
		var self = this;
		var aTimelineEntryDetailsView = [];
		
		var oTimelineEntryDetailFields = self._oTimelineTermsUtility.getTimelineEntryDetailFields(sEntityCollection);
		
		aTimelineEntryDetails.forEach(function(oTimelineEntryDetail){
			var oDetail = {};
			oDetail.afterValue = oTimelineEntryDetail[oTimelineEntryDetailFields.AfterValue];
			oDetail.beforeValue = oTimelineEntryDetail[oTimelineEntryDetailFields.BeforeValue];
			oDetail.changeType = oTimelineEntryDetail[oTimelineEntryDetailFields.ChangeType];
			oDetail.propertyLabel = oTimelineEntryDetail[oTimelineEntryDetailFields.PropertyLabel];
			
			aTimelineEntryDetailsView.push(oDetail);
		});
			
		return aTimelineEntryDetailsView;
	},
	/**
	 * Merges array of timeline entries and feed entries in chronological order and returns the result
	 * The returned array is of length equal to the global variable iPageSize
	 * @param {array} aTimelineEntries - timeline entries
	 * @param {array} aFeedEntries - feed entries
	 * @returns {array} 
	 */
	_mergeEntries: function(aTimelineEntries, aFeedEntries){
				
		this._aTimelineEntries = this._aTimelineEntries.concat(aTimelineEntries);
		this._aFeedEntries = this._aFeedEntries.concat(aFeedEntries);
		
		var aTimelineItems = [];
		
		// get first entry in each array
		var oTLEntry = this._aTimelineEntries.shift();
		var oFeedEntry = this._aFeedEntries.shift();

		do {
			if(!oTLEntry && !oFeedEntry){
				break; // exit loop because there is no more entries 
			}
			else if(!oTLEntry && oFeedEntry){
				aTimelineItems.push(oFeedEntry);
				oFeedEntry = this._aFeedEntries.shift();
			}
			else if(oTLEntry && !oFeedEntry){
				aTimelineItems.push(oTLEntry);
				oTLEntry = this._aTimelineEntries.shift();
			}
			else{
				if(oTLEntry.timelineItemData.dateTime == oFeedEntry.timelineItemData.dateTime){
					aTimelineItems.push(oFeedEntry);
					oFeedEntry = this._aFeedEntries.shift();
				}
				else if (oTLEntry.timelineItemData.dateTime > oFeedEntry.timelineItemData.dateTime){
					aTimelineItems.push(oTLEntry);
					oTLEntry = this._aTimelineEntries.shift();
					
				}
				else if (oTLEntry.timelineItemData.dateTime < oFeedEntry.timelineItemData.dateTime){
					aTimelineItems.push(oFeedEntry);
					oFeedEntry = this._aFeedEntries.shift();
				}
			}
		} 
		while(aTimelineItems.length < this._iPageSize);
		
		// put back the entry in the buffers
		if(oTLEntry){
			this._aTimelineEntries.unshift(oTLEntry);
		}
		if(oFeedEntry){
			this._aFeedEntries.unshift(oFeedEntry);
		}
		
		return aTimelineItems;
	},
	/**
	 * Fill the empty userPicture property of the Timeline items
	 * 
	 * @param {array} aTimelineItems - timeline items
	 * @returns {object} Promise object 
	 */
	_fillPicturesForTimelineItems: function(aTimelineItems){
		var self = this;
		var oPromise = jQuery.Deferred();
		var aEmails = [];
			
		// Find emails of  timeline items with no picture
		aTimelineItems.forEach(function(oTimelineItem){
			if(!oTimelineItem.timelineItemData.userPicture){
				aEmails.push(oTimelineItem.timelineItemData.userEmail);
			}
		});
		// remove duplicate emails
		var aUniqueEmails = aEmails.filter(function(element,index){
			return aEmails.indexOf(element) == index;
		});
		
		if(aUniqueEmails.length > 0){
			var gettingUserInfoBatch = this._oJamDataHandler.getUserInfoBatch(aUniqueEmails);
			gettingUserInfoBatch.promise.done(function(aUserInfo){
				aUserInfo = jQuery.grep(aUserInfo, function(oUserInfo){
					return oUserInfo.results.length > 0
				});
				// add user info to buffer
				aUserInfo.forEach(function(oUserInfo){
					self.addUserInfoToBuffer(oUserInfo.results[0]);
				});
				// fill the pictures
				aTimelineItems.forEach(function(oTLItem){
					if(!oTLItem.timelineItemData.userPicture){
						oTLItem.timelineItemData.userPicture = self.getUserPicture(oTLItem.timelineItemData.userEmail);
					}
				});
				oPromise.resolve(aTimelineItems);	
			});
			gettingUserInfoBatch.promise.fail(function(oError){
				oPromise.resolve(aTimelineItems);	
			});
		}
		else{
			oPromise.resolve(aTimelineItems);
		}
		return oPromise;
	},
	/**
	 * Get timeline entries from the backend
	 * @param {string} sFilter
	 * @returns {object} oPromise
	 */
	_getTimelineEntries: function(sFilter){
		// if the filter is set to get all of the backend entries, then in fact there shouldn't be a filter set. In the method 
		// this._oServiceDataHandler.readTimelineEntries(...) there is a check for this. If the filter is set to undefined then the 
		// parameter $filter is omitted when making the request in method this._oServiceDataHandler.readTimelineEntries(...).
		if(sFilter === this.constants.FILTER_BACKEND_ALL){ 
			sFilter = undefined;
		}
		var readTimelineEntriesPromise = this._oServiceDataHandler.readTimelineEntries( 
				this._oBusinessObjectMap.collection, this._sBusinessObjectKey, sFilter, this._iTimelineEntriesSkip, this._iTimelineEntriesPageSize);
		
		this._oTimelineEntriesReadRequest = readTimelineEntriesPromise.request;
		
		return readTimelineEntriesPromise.promise;
	},
	
	/************************************************************************************************
	 * Member Information Buffer
	 ************************************************************************************************/
	/**
	 * get the user picture
	 * @param {string} sUserEmail
	 * @returns {string} image url
	 */
	getUserPicture: function(sUserEmail){
		var oMember = this.getUserInfoFromBuffer(sUserEmail);
		if(!oMember){
			return "";
		}
		return oMember.picture;
	}, 
	/**
	 * Builds the image url 
	 * @param {string} sId - image id
	 * @param {string} sImageType - image type
	 * @returns {string} image url
	 */
	buildImageUrl: function(sId,sImageType){
		return this._oCollabModel.sServiceUrl + "/ThumbnailImages" + "(Id='" + jQuery.sap.encodeURL(sId) + "',ThumbnailImageType='" 
		+  jQuery.sap.encodeURL(sImageType) + "')/$value";
	},
	/**
	 * Adds member information to the buffer
	 * @param {object} oMember - member entity
	 */
	addUserInfoToBuffer: function(oMember){
		var userPicture = this.buildImageUrl(oMember.ThumbnailImage.Id, oMember.ThumbnailImage.ThumbnailImageType);
		var sUserEmailLC = oMember.Email.toLowerCase();
		this._oMemberDataBuffer[sUserEmailLC] = {
				"email":sUserEmailLC,
				"fullname":oMember.FullName,
				"id":oMember.Id,
				"address":oMember.MemberProfile.Address,
				"title":oMember.Title,
				"role":oMember.Role,
				"picture": userPicture
		};
	},
	/**
	 * Return the user information
	 * @param {string} sUserEmail
	 * @returns {object} user information
	 */
	getUserInfoFromBuffer: function(sUserEmail){
		var sUserEmailLC = sUserEmail.toLowerCase();
		return this._oMemberDataBuffer[sUserEmailLC];
	},
	
	/**
	 * Get Jam connectivity configuration status
	 * @returns {string} Configuration Status
	 */
	getJamConfigurationStatus : function(fCallerSuccess, fCallerError){
		var fnSuccess = function(bConfigurationStatus) {
			fCallerSuccess(bConfigurationStatus);
		};
		var fnError = function(sError) {
			fCallerError(sError);
		};
		
		this._oSMIntegrationDataHandler.getJamConfigurationStatus(this._oSMIntegrationModel, fnSuccess, fnError);
		 
	}
});

}; // end of sap/collaboration/components/socialtimeline/datahandlers/TimelineDataHandler.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.fiori.sharing.Sharing.controller') ) {
  jQuery.sap.declare('sap.collaboration.components.fiori.sharing.Sharing.controller');
/*!
 * @copyright@
 */





jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


sap.ui.controller("sap.collaboration.components.fiori.sharing.Sharing", {

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created.
	 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * Initialize class variables
	 * @memberOf Sharing
	 */
	onInit: function() {
		// References to the View's controls needed by the Sharing controller.
		this.oNoteTextArea = this.getView().oNoteTextArea;
		this.oAttachmentsInput = this.getView().oAttachmentsInput;
		this.oTargetFolderInput = this.getView().oTargetFolderInput;
		
		this.oODataUtil = undefined;
		this.sPrefixId = this.getView().getViewData().controlId;
		this.oLangBundle = this.getView().getViewData().langBundle;
						
		this.iJamGroupsCount = 0;

		// Share Object and External Object
		this.sObjectId = this.getView().getViewData().objectId;
		this.sObjectShare = this.getView().getViewData().objectShare;
		this.oObjectDisplay = this.getView().getViewData().objectDisplay;
		this.oExternalObject = undefined;
		this.oMappedExternalObject = undefined;
		this.sMemberEmail = undefined; // remove after jam implements feed entry after sharing BO
		
		this.oSharingDialog = this.getView().getViewData().sharingDialog;
		this.fNoGroupsCallBack = this.getView().getViewData().noGroupsCallBack;
		
		this.oCommonUtil = new sap.collaboration.components.utils.CommonUtil();
		
		// Variables for Attachment Selection
		this.oAttachments = this.getView().getViewData().attachments;
		this.bAttachmentsCB = false;
		this.aFiles = [];
		this.aSelectedFiles = [];
		
		// Variables for Group Selection
		this.sSelectedFolderId = '';		
		this.oItemTemplate = undefined;
		this.oSelectedGroup = undefined;
	},
	
	/**
	* Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
	* (NOT before the first rendering! onInit() is used for that one!).
	* @memberOf Sharing
	*/
	onBeforeRendering: function() {
		try{
			// Variables for Group Selection, has to be in the onBeforerendering to be reset each time the component is loaded
			this.sSelectedGroupId = '';
			this.sSelectedGroupName = '';
			
			// Initialize Utility Classes
			if (!this.oSMIODataModel){
				this.initializeOdataModel();
			}
			if (!this.oODataUtil){
				this.initializeOdataUtils();
			}
			if(!this.oAttachmentsUtil){
				this.initializeAttachmentsUtil();
			}
			// The share util has to be initialized each time the dialog opens to handle the upload correctly
			this.initializeShareUtil();
			
			// Setup to be done on the controls before rendering
			this.preRenderSetup();
			// Fetch data needed for the Share view
			this.fetchData();
			
			// Attachments Initialization ***********************************************
			this.clearAttachmentsData();
			this.oAttachments = this.getView().getViewData().attachments;

			if(this.oAttachments && this.oAttachments.attachmentsArray){
				this.aFiles = this.oAttachments.attachmentsArray;
				// Enable/Disable attachment selection
				if(this.aFiles.length > 0){
					this.getView().oAttachmentsInput.setEnabled(true);
				}
				else{
					this.getView().oAttachmentsInput.setEnabled(false);
				}
				
				// Update the attachments dialog
				if(this.oFileSelectionDialog){
					var oAttachmentsModel = this.oAttachmentsUtil.createAttachmentsModel(this.aFiles);
					this.oFileSelectionDialog.setModel(oAttachmentsModel);
				}
							
				// Show attachments fields
				this.showAttachmentsFields(true);
			}
			else{
				// Hide attachments button
				this.showAttachmentsFields(false);
			}
			//***************************************************************************

			// In case the view was rerendered (ie it was created previously and then reused again), we have to reset the field for note
			if(this.sObjectId != this.getView().getViewData().objectId){
				this.sObjectId = this.getView().getViewData().objectId;
			}
			
			// In case the view was rerendered (ie it was created previously and then reused again) or the 
			// user changed the note, we have to reset the field for note
			if(this.sObjectShare != this.getView().getViewData().objectShare || 
					sap.ui.getCore().byId(this.sPrefixId + "_NoteTextArea").setValue !== this.getView().getViewData().objectShare){
				this.sObjectShare = this.getView().getViewData().objectShare;
				sap.ui.getCore().byId(this.sPrefixId + "_NoteTextArea").setValue(this.sObjectShare);
			}
			
			// In case of rerendering when display object was different than previous one, there are two possible scenarios:
			// 1. the previous display object existed, in this case remove the previous one then add the new item
			// 2. the previous display object did not exist, in this case just add the new item
			if (this.oObjectDisplay != this.getView().getViewData().objectDisplay){
				if(this.oObjectDisplay != undefined){
					this.getView().oSharingVBox.removeItem(0);
				}
				this.oObjectDisplay = this.getView().getViewData().objectDisplay;
				this.getView().oSharingVBox.insertItem(this.oObjectDisplay, 0);		
			}

		}
		catch(oError){	
			if(this.oSharingDialog){
				throw oError;
			}
			this.oCommonUtil.displayError(oError);
		}
	},
	
	/**
	* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	* This hook is the same one that SAPUI5 controls get after being rendered.
	* @memberOf Sharing
	*/
	onAfterRendering: function() {		
		// After some investigation, we noticed that setting the focus without a delay only
		// worked on browsers other than Chrome. So to get the focus to appear on the select
		// control in as many browsers as possible, we make the call to the focus function
		// with some delay for all browsers.
		setTimeout(function() {sap.ui.getCore().byId(this.sPrefixId + "_GroupSelect").focus();}.bind(this), 1);
	},
	
	/**
	* Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	* @memberOf Sharing
	*/
	onExit: function() {
		this.getView().destroyContent();
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable, set text ...) 
	* @private
	*/
	preRenderSetup : function() {
		this.getView().oGroupSelect.setEnabled(false);
		this.setGroupSelectionText("");
		if(this.oAttachments && this.oAttachments.attachmentsArray){
			this.getView().oTargetFolderInput.setEnabled(false);
		}
		this.getView().oNoteTextArea.setEnabled(false);
		// if Share is in dialog
		if(this.oSharingDialog){
			this.oSharingDialog.getBeginButton().setEnabled(false);
		}
	},
	
	/**
	* Fetches the data needed for the component rendering
	* @private
	*/
	fetchData : function() {
		
		var self = this;

		var gettingGroupCount = new jQuery.Deferred();
		gettingGroupCount.done(function(count){
			self.iJamGroupsCount = count;
			if(self.iJamGroupsCount > 0){
				self.postFetchSetup();
				setTimeout(function(){
					self.oSharingDialog.getContent()[0].getContent()[0].getItems()[1].getContent()[1].focus();
				}, 50); // sets the focus to the Group Input field after it's enabled
			}
			else{
				if(self.fNoGroupsCallBack){
					self.fNoGroupsCallBack();
				}
			}
		}); 
		var gettingCollaborationHostUrl = new jQuery.Deferred();
		gettingCollaborationHostUrl.done(function(url){
			if(!self.sJamUrl){
				self.sJamUrl = url;
			}
		});
		var mappingInternalBOToExternalBO = new jQuery.Deferred();
		mappingInternalBOToExternalBO.done(function(externalBO){
			self.oMappedExternalObject = externalBO;
		});
		mappingInternalBOToExternalBO.fail(function(){
			self.oMappedExternalObject = undefined;
			jQuery.sap.log.debug('Mapping Internal BO to External BO failed');
		});
		
		var gettingEmail = new jQuery.Deferred();
		gettingEmail.done(function(email){
			if(!self.sMemberEmail){
				self.sMemberEmail = email;
			}
		});
		
		jQuery.when(gettingGroupCount,gettingCollaborationHostUrl,mappingInternalBOToExternalBO).fail(function(oErrorReponse){
			if(self.oSharingDialog){
				self.oSharingDialog.close();
			}
			if(oErrorReponse.statusCode === 401 || oErrorReponse.statusCode === 403){
				self.oCommonUtil.displayError(self.oLangBundle.getText("SHARE_AUTHORIZATION_FAILURE_MSG"));
			}
			else{
				self.oCommonUtil.displayError();	
			}
		});
		
		// Get group count
		this.oJamODataModel.read( '/Groups/$count', { 
			success: function(oData, response){
				gettingGroupCount.resolve(parseInt(response.body));
			},
			error: function(oError){
				gettingGroupCount.reject(oError.response);
			}
		});

		// Get email
		this.oJamODataModel.read( '/Self', { 
			success: function(oData, response){
				gettingEmail.resolve(oData.results.Email);
			},
			error: function(oError){
				gettingEmail.reject(oError.response);
			}
		});
		
		// Get collaboration host url
		if(!this.sJamUrl){
			this.oSMIODataModel.read('/GetCollaborationHostURL',{ 
				success: function(oData, response){
					gettingCollaborationHostUrl.resolve(oData.GetCollaborationHostURL.URL);
				},
				error: function(oError){
					gettingCollaborationHostUrl.reject(oError.response);
				} 
			});
		}else{
			gettingCollaborationHostUrl.resolve();	
		}
		
		// Map internal bo to external BO
		this.oExternalObject = this.getView().getViewData().externalObject; 		// Update external object from view data
		if(this.oExternalObject) {
			this.oSMIODataModel.read('/MapInternalBOToExternalBO',{
				urlParameters: { ApplicationContext: "'"+self.oExternalObject.appContext+"'",
								 ODataCollection: "'"+self.oExternalObject.collection+"'",
								 ODataKeyPredicate: "'"+self.oExternalObject.key+"'",
								 ODataServicePath: "'"+self.oExternalObject.odataServicePath+"'" },
				success: function(oData,response){
					mappingInternalBOToExternalBO.resolve(oData.MapInternalBOToExternalBO);
				},
				error: function(oError){
					mappingInternalBOToExternalBO.reject(oError.response);
				}
			});
		}
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable ...) 
	* @private
	*/
	postFetchSetup : function() {
		this.setGroupSelectionEnabled(true);
	},
	
	/**
	 * Initializes the OData Model
	 * @private
	 */
	initializeOdataModel : function() {
		var asJson = true;
        this.sSMIODataServiceUrl = this.getView().getViewData().odataServiceUrl;
    	this.oSMIODataModel = new sap.ui.model.odata.ODataModel(this.sSMIODataServiceUrl, asJson);
    	
    	this.sJamODataServiceUrl = this.getView().getViewData().collaborationHostODataServiceUrl;
    	this.oJamODataModel = new sap.ui.model.odata.ODataModel(this.sJamODataServiceUrl, asJson);
    	this.oJamODataModel.setDefaultCountMode(sap.ui.model.odata.CountMode.Inline);
	},
	
	/**
	 * Initialize the OData Utility Class
	 * @private
	 */
	initializeOdataUtils : function() {
		this.oODataUtil = new sap.collaboration.components.utils.OdataUtil();
	},
	
	/**
	 * Initialize the Attachments Utility Class
	 * @private
	 */
	initializeAttachmentsUtil : function(){
		this.oAttachmentsUtil = new sap.collaboration.components.fiori.sharing.helper.AttachmentsUtil(this.oLangBundle, this.oODataUtil, this.oJamODataModel);
	},
	
	/**
	 * Initialize the Share Utility Class
	 * @private
	 */
	initializeShareUtil : function(){
		this.oShareUtil = new sap.collaboration.components.fiori.sharing.helper.ShareUtil(this.oLangBundle, this.oODataUtil, this.oSMIODataModel, this.oCommonUtil,
				this.oJamODataModel, this.getView().getViewData().collaborationHostRestService );
	},
	
	/**
	 * Set Group Selection Text
	 * @private
	 */
	setGroupSelectionText: function(sText){
		var oGroupSelect = sap.ui.getCore().byId( this.sPrefixId + "_GroupSelect");
		oGroupSelect.setValue(sText);
	},
	
	/**
	 * Set Group Selection Enabled
	 * @private
	 */
	setGroupSelectionEnabled: function(bEnabled){
		var oGroupSelect = sap.ui.getCore().byId( this.sPrefixId + "_GroupSelect");
		oGroupSelect.setEnabled(bEnabled);
	},
	
	/**
	 * Set Group Selection Enabled
	 * @private
	 */
	setFolderSelectionEnabled: function(bEnabled){
		this.oTargetFolderInput.setEnabled(bEnabled);
	},
	
	/**
	 * Show/Hide fields for attachments
	 * @private
	 */
	showAttachmentsFields : function(bVisibility){
		this.getView().AttachmentsInputLayout.setVisible(bVisibility);
		this.getView().oTargetFolderInputLayout.setVisible(bVisibility);
		this.getView().oAttachmentCB.setVisible(bVisibility);		
	},
	
	/**
	 * Clear data for attachments
	 * @private
	 */
	clearAttachmentsData : function(){
		// Clear previous attachments data, buttons, texts
		this.aFiles = [];
		this.aSelectedFiles = [];
		this.sSelectedFolderId = '';
		this.bAttachmentsCB = false;
		
		// Reset text of button
		this.oAttachmentsInput.setValue("");
		
		// Clear Attachments Only checkbox
		this.getView().oAttachmentCB.setSelected(this.bAttachmentsCB);
		this.getView().oAttachmentCB.setEnabled(false);
		
		// Clear folder selection
		this.oTargetFolderInput.setValue("");
		if(this.oFolderSelectionDialog){
			this.oAttachmentsUtil.resetFolderSelection(this.getSelectedGroupId());
		}				
	},
	
	/**
	* Event Handler for the attachment value help
	* @private
	*/
	onAttachmentsValueHelpPress : function(oControlEvent){
		
		if(this.oSharingDialog){
			var iShareDialogHeight = this.oSharingDialog.getContent()[0].getDomRef().offsetHeight;
			var iShareDialogWidth = this.oSharingDialog.getContent()[0].getDomRef().offsetWidth;
		}
		
		// Create the file selection dialog
		if (!this.oFileSelectionDialog) {
			var oAttachmentsModel = this.oAttachmentsUtil.createAttachmentsModel(this.aFiles);
			this.oFileSelectionDialog = this.oAttachmentsUtil.createFileSelectionDialog(this.sPrefixId, oAttachmentsModel, this.onFileSelectionDialogConfirm(), iShareDialogWidth, iShareDialogHeight);
		}
		
		// Clear the filter on the binding
		var oBinding = this.oFileSelectionDialog.getBinding("items");
		oBinding.filter([]);
	
		// Open dialog
		this.oFileSelectionDialog.open();
	},
	
	/**
	 * This function returns a function that is called when the OK button of the files selection dialog is clicked.
	 * @private
	 */
	onFileSelectionDialogConfirm: function() {
		var self = this;
		
		return function(oEvent){
						
			self.aSelectedFiles = [];
			var aContexts = oEvent.getParameter("selectedContexts");
			for(var i=0; i<aContexts.length; i++){
				self.aSelectedFiles.push(aContexts[i].getObject());
			}
			
			// Set the text of the Attachments button (ex: Attachments(5) when there are 5 attachments selected)
			if (self.aSelectedFiles && self.aSelectedFiles.length > 0) {
				self.postFileSelectionSetup(true);
			}
			else{
				self.postFileSelectionSetup(false);
			}
		};
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable, set text ...) 
	* @private
	*/
	postFileSelectionSetup : function(filesSelected) {
		if(filesSelected === true){
			if(this.aSelectedFiles.length == 1){
				this.oAttachmentsInput.setValue(this.oLangBundle.getText("SELECTED_ATTACHMENT_FIELD_TEXT", [this.aSelectedFiles.length]));
			}
			else {
				this.oAttachmentsInput.setValue(this.oLangBundle.getText("SELECTED_ATTACHMENTS_FIELD_TEXT", [this.aSelectedFiles.length]));
			}
			
			this.getView().oAttachmentCB.setEnabled(true);
			
			if(this.sSelectedGroupId !== '') {
				this.setFolderSelectionEnabled(true);
			}
		}
		else{
			this.oAttachmentsInput.setValue("");
			this.bAttachmentsCB = false;
			this.getView().oAttachmentCB.setSelected(this.bAttachmentsCB);
			this.postAttachmentCheckBoxSelection();
			this.getView().oAttachmentCB.setEnabled(false);
			this.setFolderSelectionEnabled(false);
		}
	},

	/** ESC
	* Event Handler for the group value help
	* @private
	*/
	onGroupSelectValueHelpPress: function(oEvent){
		
		if(!this.oItemTemplate){
			this.oItemTemplate = new sap.m.StandardListItem({
				title : {
					parts: [
					        "Name",
					        "GroupType"
					        ],
					        formatter : function(sName,sGroupType) {
					        	return sName + " (" + sGroupType + ")";
					        }
				},
				type : sap.m.ListType.Active
			});
		}
		
		if(this.oSharingDialog){
			var iShareDialogHeight = this.oSharingDialog.getContent()[0].getDomRef().offsetHeight;
			var iShareDialogWidth = this.oSharingDialog.getContent()[0].getDomRef().offsetWidth;
		}
				
		// Create the group selection dialog
		if(!this.oGroupSelectionDialog){
			this.oGroupSelectionDialog = this.oShareUtil.createGroupSelectionDialog(this.sPrefixId, this.oItemTemplate, this._onGroupSelectionDialogConfirm(), iShareDialogWidth, iShareDialogHeight, this.oJamODataModel);
		}
		else{
			this.oGroupSelectionDialog.setModel(this.oJamODataModel);
			this.oGroupSelectionDialog.bindAggregation("items","/Groups", this.oItemTemplate);		
		}
		
		this.oGroupSelectionDialog.open();
	},
	
	/** ESC
	 * This function returns a function that is called when the group is selected.
	 * @private
	 * @returns {function} function called when the group is selected.
	 */
	_onGroupSelectionDialogConfirm: function() {
		var self = this;
		
		return function(oEvent){
						
			var aContexts = oEvent.getParameter("selectedContexts");
			for(var i=0; i<aContexts.length; i++){
				self.oSelectedGroup = aContexts[i].getObject();
			}
							
			if (self.oSelectedGroup) {
				self.postGroupSelectionSetup(true);
			}
			else{
				self.postGroupSelectionSetup(false);
			}			
		};
	},	
	
	/**
	* Does some setup required on some control (i.e disable/enable ...) 
	* @private
	*/
	postGroupSelectionSetup : function(groupSelected) {
		if(groupSelected === true){
			if(this.oSelectedGroup !== undefined){
				// Save selected group id
				this.sSelectedGroupId = this.oSelectedGroup.Id.toString();
				this.sSelectedGroupName = this.oSelectedGroup.Name.toString();
				this.setGroupSelectionText(this.sSelectedGroupName);
			}
			
			if(this.oAttachments && this.oAttachments.attachmentsArray){
				// Reset folder selection
				this.sSelectedFolderId = '';
				this.oAttachmentsUtil.resetFolderSelection(this.getSelectedGroupId());
				var oSelectedFolder = this.oAttachmentsUtil.getCurrentFolder();
				this.oTargetFolderInput.setValue(oSelectedFolder.name);
			}
		
			// If some attachments are already selected
			if (this.aSelectedFiles && this.aSelectedFiles.length > 0) {
				this.setFolderSelectionEnabled(true);
			}
			
			if(this.bAttachmentsCB === false){
				this.getView().oNoteTextArea.setEnabled(true);
			}
			// If Share is in dialog
			if(this.oSharingDialog){
				this.oSharingDialog.getBeginButton().setEnabled(true);
			}
		}
		else{
			this.setFolderSelectionEnabled(false);
			this.getView().oNoteTextArea.setEnabled(false);
		}

	},
		
	/**
	* Event Handler for the attachment value help
	* @private
	*/
	onTargetFolderValueHelpPress : function(oControlEvent){
		if(this.oSharingDialog){
			var iShareDialogHeight = this.oSharingDialog.getContent()[0].getDomRef().offsetHeight;
			var iShareDialogWidth = this.oSharingDialog.getContent()[0].getDomRef().offsetWidth;
		}
		
		// Build folder dialog if not built yet
		if (!this.oFolderSelectionDialog) {
			this.oFolderSelectionDialog = this.oAttachmentsUtil.createFolderSelectionDialog(this.sPrefixId, this.getSelectedGroupId(), this.onFolderSelectionDialogConfirm(), this.onFolderSelectionDialogCancel(), iShareDialogWidth, iShareDialogHeight);
			this.sSelectedFolderId = '';
		}
		
		// Update the Dialog title before opening
		this.oFolderSelectionDialog.getContent()[0].oController.setFolderSelectionDialogTitle(this.oTargetFolderInput.getValue());
		this.oFolderSelectionDialog.open();
	},
	
	/**
	 * This function is called when the OK button of the folder selection dialog is clicked.
	 * @private
	 */
	onFolderSelectionDialogConfirm : function(oEvent){
		var self = this;
		return function(){
			var oSelectedFolder = self.oAttachmentsUtil.getCurrentFolder();
			self.sSelectedFolderId = oSelectedFolder.id;
			self.oTargetFolderInput.setValue(oSelectedFolder.name);
		};
	},
	
	/**
	 * This function is called when the Cancel button of the folder selection dialog is clicked.
	 * @private
	 */
	onFolderSelectionDialogCancel: function(oEvent) {
		var self = this;
		return function(oEvent){
			self.oAttachmentsUtil.setCurrentFolderId(self.sSelectedFolderId);	
		};
	},
		
	/**
	* Event Handler for the attachment checkBox
	* @private
	*/
	onAttachmentCheckBoxSelected : function() {
		// Toggle between checking and unchecking the Attachments Checkbox
		this.bAttachmentsCB = this.getView().oAttachmentCB.getSelected();
		this.postAttachmentCheckBoxSelection();
	},
	
	/**
	* Does some setup required on some control (i.e disable/enable ...) 
	* @private
	*/
	postAttachmentCheckBoxSelection : function() {
		if(this.bAttachmentsCB === true){
			this.getView().oNoteTextArea.setEnabled(false);
		}
		else{
			if(this.sSelectedGroupId !== ''){
				this.getView().oNoteTextArea.setEnabled(true);
			}
		}
	},
	
	/**
	* Gets the form data that can be used by other class to share some info to Jam
	* @private
	*/
	getSharingData : function() {
		var oFeedContent;
		
		if((this.oNoteTextArea.getValue() !== undefined && this.oNoteTextArea.getValue() !== "") || (this.sObjectId !== undefined && this.sObjectId !== "")){
			oFeedContent = 	{
								note: this.oNoteTextArea.getValue(),
								uiUrl: this.sObjectId
							};
		}
		if(JSON.stringify(this.oExternalObject)=== '{}'){
			this.oExternalObject = undefined;
		}
				
		return {
		 feedContent:						 oFeedContent,
		  groupId:                           this.getSelectedGroupId(),
		  folderId:							 this.getSelectedFolderId(),
		  aFilesToUpload:                    this.aSelectedFiles,
		  externalObject:					 this.oExternalObject,
		  mappedExternalObject:				 this.oMappedExternalObject,
		  groupName: 						 this.getSelectedGroupName(),
		  //groupName: 						 sap.ui.getCore().byId( this.sPrefixId + "_GroupSelect").getValue(),
		  memberEmail:						 this.sMemberEmail
		};
	},
	
	/**
	 * Gets the selected group's id
	 * @private
	 */
	getSelectedGroupId : function() {
		return this.sSelectedGroupId;
	},

	/**
	 * Gets the selected group's name
	 * @private
	 */
	getSelectedGroupName : function() {
		return this.sSelectedGroupName;
	},

	/**
	 * Gets the selected folder's id
	 * @private
	 */
	getSelectedFolderId : function() {
		return this.sSelectedFolderId;
	},
	
	/**
	 * Shares the data to Jam group
	 *  We need the:
	 *  - Group
	 *  - Target Folder
	 *  - Attachments
	 *  - Comment
	 *  - The link to the BO
	 *  However, things are a little more complicated because there are different sharing scenarios:
	 *  		
	 *  Scenario 1 (BO only)
	 *  When BO only, then Group is set, the link to the BO is set,
	 *  and the comment is optional.
	 *  Scenario 1.1 BO (URL)
	 *  Scenario 1.2 BO (OData object)
	 *  		
	 *  Scenario 2 (Attachments only)
	 *  When Attachments only, then the Group is set, there is at least
	 *  one attachment selected, and the comment and target folder are optional.
	 *  
	 *  Scenario 3 (Both)
	 *  When both, then the Group is set, there is at least one attachment selected,
	 *  the link for the BO is set, and the comment and target folder are optional.
	 *  
	 * @private
	 */
	shareToJam : function() {
		var oSharingData = this.getSharingData();
		var self = this;
		
		// Nothing to share
		if (oSharingData.aFilesToUpload.length === 0 && (!oSharingData.feedContent || (!oSharingData.feedContent.uiUrl && oSharingData.feedContent.note.trim() === "")) && !oSharingData.externalObject){
			var sResultMessage = self.oLangBundle.getText("SHARING_NOTHING_TO_SHARE_MSG");
			this.oCommonUtil.showMessage(sResultMessage, {duration:3000, autoclose: false});
		}
		else{
			if (!this.bAttachmentsCB) {
				// For scenario 1 & 3.
				this.oShareUtil.shareBusinessObject(oSharingData);
				
			}	
			if (oSharingData.aFilesToUpload.length > 0) {
				// For scenario 2 & 3.
				this.oShareUtil.uploadAttachments(oSharingData);
				var sResultMessage = this.oLangBundle.getText("SHARING_ACKNOWLEDGMENT_MSG");
				// SetTimeout to trigger the message toast 1/2 second after the dialog closes
				setTimeout(function(){self.oCommonUtil.showMessage(sResultMessage, {duration:3000, width:"30em", autoClose: false});}, 500);
			}
		}
	}
});

}; // end of sap/collaboration/components/fiori/sharing/Sharing.controller.js
if ( !jQuery.sap.isDeclared('sap.collaboration.components.socialtimeline.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2014 SAP AG. All rights reserved
 */

jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.commons.Timeline'); // unlisted dependency retained

jQuery.sap.require('sap.suite.ui.commons.TimelineItem'); // unlisted dependency retained









jQuery.sap.declare("sap.collaboration.components.socialtimeline.Component");
/**
* Constructor for the Social Timeline Component.
*
* Accepts an object literal <code>mSettings</code> that defines initial 
* property values, aggregated and associated objects as well as event handlers. 
* 
* If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
* then the framework assumes property, aggregation, association, event in that order. 
* To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
* or "event:" can be added to the name of the setting (such a prefixed name must be
* enclosed in single or double quotes).
*
* The supported settings are:
* <ul>
* 	<li>Properties
* 		<ul>
* 			<li>{@link #getEnableSocial enableSocial} : boolean (default: false) </li>
* 			<li>{@link #getAlignment alignment} : sap.suite.ui.commons.TimelineAlignment (default: sap.suite.ui.commons.TimelineAlignment.Right)</li>
* 			<li>{@link #getAxisOrientation axisOrientation} : sap.suite.ui.commons.TimelineAxisOrientation (default: sap.suite.ui.commons.TimelineAxisOrientation.Vertical)</li>
* 			<li>{@link #getNoDataText noDataText} : string</li>
* 			<li>{@link #getShowIcons showIcons} : boolean (default: true)</li>
* 			<li>{@link #getVisible visible} : boolean (default: true)</li>
* 			<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
* 			<li>{@link #getCustomFilter customFilter} : {object}
* 		</ul>
* 	</li>
* 	<li>Events
* 		<ul>
* 			<li>{@link ssap.collaboration.components.socialtimeline.Component:customActionPress customActionPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
* 		</ul>
* 	</li>
* </ul> 

* 
* @param {string} [sId] id for the new control, generated automatically if no id is given 
* @param {object} [mSettings] initial settings for the new control
* 
* @class 
* Social Timeline
* @extends sap.ui.core.UIComponent
* @version 1.27.0-SNAPSHOT
* 
* @constructor
* @public
* @name sap.collaboration.components.socialtimeline.Component
* @experimental The API is not stable and the UI is not finalized. The implementation for this feature is subject to change.
* 
*/
sap.ui.core.UIComponent.extend("sap.collaboration.components.socialtimeline.Component",
	/** @lends sap.collaboration.components.socialtimeline.Component */
	{
		metadata: {
			version: "1.0",
			dependencies:{
				libs: [],
				components: [],
				ui5version: ""
			},
			config: {},
			customizing: {},
			rootView: null,
			publicMethods: ["setBusinessObjectKey", "setBusinessObjectMap", "updateTimelineEntry", "deleteTimelineEntry"],
			aggregations: {
			},
			properties: {
				"enableSocial": {type:"boolean",group:"Misc",defaultValue:true},				
				"alignment": {type:"sap.suite.ui.commons.TimelineAlignment",group:"Misc",defaultValue:sap.suite.ui.commons.TimelineAlignment.Right},
				"axisOrientation": {type:"sap.suite.ui.commons.TimelineAxisOrientation",group:"Misc",defaultValue:sap.suite.ui.commons.TimelineAxisOrientation.Vertical},
				"noDataText": {type:"string",group:"Misc",defaultValue:null},
				"showIcons": {type:"boolean",group:"Misc",defaultValue:true},
				"visible": {type:"boolean",group:"Appearance",defaultValue:true},
				"width": {type:"sap.ui.core.CSSSize",group:"Dimension",defaultValue:'100%'},
				"customFilter": {type:"object", group:"Misc"}
			},
			events : {
				"customActionPress": {}
			}
		},
		_defaultAttributes: {
			collaborationHostServiceUrl: "/sap/bc/ui2/smi/rest_tunnel/Jam/api/v1/OData",
			smiServiceUrl: "/sap/opu/odata/sap/SM_INTEGRATION_V2_SRV",
			pageSize: 10
		},

		/**
		* Initializes the Component instance after creation. 
		* @protected
		*/
		init: function(){
			this._oLogger = jQuery.sap.log.getLogger("sap.collaboration.components.socialtimeline.Component");
			
			// OData service models
			this._oCollabHostModel;
			this._oSMIntegrationModel;
			
			// Timeline
			this._oTimeline;
			this._oTimelineModelData = {
					timelineData : [],
					filterData : [],
					suggestions: []
			};
			this._oTimelineModel = new sap.ui.model.json.JSONModel(this._oTimelineModelData);
			this._iGrowingThreshold = this._defaultAttributes.pageSize; 
			this._oFilter = {"backend": undefined, "jam": undefined};
			
			// Business object
			this._oBusinessObjectMap = {};
			this._sBusinessObjectKey = undefined;

			// Utilities
			this._oCommonUtil = new sap.collaboration.components.utils.CommonUtil(); // display error, language bundle, date format
			
			// Language Bundle
			this._oLanguageBundle = this._oCommonUtil.getLanguageBundle();

			this._oTimelineDataHandler;
			this._oJamDataHandler;
			
			// Social Profile
			this._oSocialProfile;
			
			// User that is currently logged in
			this._oTimelineUser = {};
			
			// class variable to store the value of the component's property enableSocial set by the developer
			// this class variable will dictate if the social features for the social timeline component should be visible or hidden 
			// this class variable will be overwritten by the component logic in case of Jam configuration issue 
			this._bEnableSocial;
			
			this._initialize(); // initialize Utilities and Handlers
			
			sap.ui.core.UIComponent.prototype.init.apply(this); // call superclass; needed to call createContent
		},
		/**
		* Cleans up the component instance before destruction.
		* @protected
		*/
		exit: function() {
		},
		/**
		* Function is called when the rendering of the Component Container is started.
		* @protected
		*/
		onBeforeRendering: function(){			
			this._oLogger.info("Creating Timeline Control with parameters");
			this._oLogger.info("enableSocial: " + this.getEnableSocial());
			this._oLogger.info("alignment: " + this.getAlignment());
			this._oLogger.info("axisOrientation: " + this.getAxisOrientation());
			this._oLogger.info("noDataText: " + this.getNoDataText());
			this._oLogger.info("showIcons: " + this.getShowIcons());
			this._oLogger.info("visible: " + this.getVisible());
			this._oLogger.info("width: " + this.getWidth());
			
			this._validateInputParameters();
			
			if(this._bEnableSocial === undefined){
				this._setEnableSocial();
			}
			
			this._oTimeline.setEnableSocial(this._bEnableSocial);				
			this._oTimeline.setAlignment(this.getAlignment());
			this._oTimeline.setAxisOrientation(this.getAxisOrientation());
			this._oTimeline.setEnableBackendFilter(true);
			this._oTimeline.setEnableScroll(false);
			this._oTimeline.setForceGrowing(true);
			this._oTimeline.setGrowingThreshold(this._iGrowingThreshold);
			this._oTimeline.setNoDataText(this.getNoDataText());
			this._oTimeline.setShowIcons(this.getShowIcons());
			this._oTimeline.setVisible(this.getVisible());
			this._oTimeline.setWidth(this.getWidth());
			this._oTimeline.setShowHeaderBar(false);
			
			this._getLoggedInUser();
			this._setTimelineModel();
			this._buildFilter();
		},
		
		/**
		* Function is called when the rendering of the Component Container is completed. 
		* @protected
		*/
		onAfterRendering: function(){
		},
		/**
		 * The method to create the Content (UI Control Tree) of the Component. 
		 * @protected
		 */
		createContent: function(){
			return this._createTimeline();
		},
		/**************************************************************************************
		 * PUBLIC METHODS for the Component
		 **************************************************************************************/
		/**
		 * Set the business object map. It is used to initialize the data needed to retrieve the timeline entries.
		 * This function must be called once before calling setBusinessObjectKey for the first time.
		 * @public
		 * @param {object] businessObjectMap required - JSON object containing the following properties:
		 * 	<ul>
		 * 		<li>{sap.ui.model.odata.ODataModel} serviceModel required - OData model to retrieve timeline entries
		 * 		<li>{string} servicePath: The relative path to the OData service for the business object (example: "/sap/opu/odata/sap/ODATA_SRV")		
		 * 		<li>{string} collection: Entity collection name of the business object
		 * 		<li>{string} applicationContext: The application context (example: "CRM", "SD", etc.)
		 * 		<li>{function} customActionCallback: A callback function to determine which timeline entries should receive the custom action. The function should return an array of text/value objects.
		 * 	<ul>
		 */
		setBusinessObjectMap: function(oBusinessObjectMap){
			this._oLogger.info("servicePath: " + oBusinessObjectMap.servicePath);
			this._oLogger.info("collection: " + oBusinessObjectMap.collection);
			this._oLogger.info("applicationContext: " + oBusinessObjectMap.applicationContext);
			
			if(this._bEnableSocial === undefined){
				this._setEnableSocial();
			}
			
			// recreate timeline terms utility with new object map
			this._oBusinessObjectMap = oBusinessObjectMap;
			
			// check if the customActionCallback passed to this method is a function, if not, then we destroy the Component and log it as an error
			if(this._oBusinessObjectMap.customActionCallback && typeof(this._oBusinessObjectMap.customActionCallback) !== 'function'){
				this._oLogger.error("The property customActionCallback is not a function.");
				this.destroy();
			}
			this._oTimelineDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.TimelineDataHandler(
					this._oBusinessObjectMap, 
					this._oJamDataHandler,
					this._oSMIntegrationModel,
					this._iGrowingThreshold,
					this._bEnableSocial);
		},
		/**
		 * Set the current business object for the social timeline to display.
		 * Note: The function setBusinessObjectMap must be called once before calling setBusinessObjectKey for the first time.
		 * @public
		 * @param {string} sKey
		 */
		setBusinessObjectKey: function(sKey){
			this._oLogger.info("Business Object Key: " + sKey);
			if(!this._oTimelineDataHandler){
				this._oLogger.error("Function setBusinessObjectMap must be called before calling setBusinessObjectKey for the first time.");
			}

			this._sBusinessObjectKey = sKey;
			this._oTimelineDataHandler.setBusinessObjectKey(sKey); // set the current business object
			this._refreshTimelineModel(); // refresh the timeline
			this._oTimeline.setShowHeaderBar(true);
		},
		/**
		 * Update a Timeline Entry text.
		 * This method should be called when a custom action requires a content update of a Timeline entry and should only be called if an
		 * an update to the backend is performed successfully.
		 * @public
		 * @param {string} sText - the text that will be displayed in the content of the timeline entry
		 * @param {string} sId - the id of the timeline entry to update
		 */
		updateTimelineEntry: function(sText, sId){
			// the embedded control consists of a flex box, we are setting the text of the first item in the flexbox here
			var oTimelineEntry = sap.ui.getCore().byId(sId);
			var oEmbCtrl = oTimelineEntry.getAggregation('embeddedControl');
			var aFlexBoxItems = oEmbCtrl._oFlexbox.getItems();
			
			aFlexBoxItems[0].setText(sText);
			// check if the timeline entry has a second item in the flexbox (e.g. link which contains 'and 2 other things') and remove it
			if(aFlexBoxItems.length > 1){
				for(var i=1; i<aFlexBoxItems.length; i++){
					aFlexBoxItems[i].destroy();
				}
			}
			
			// update the timeline entry text in the model with the new text
			var sTimelineEntryPath = oTimelineEntry.getBindingContext().getPath();
			var oTimelineModel = oTimelineEntry.getModel();
			oTimelineModel.getProperty(sTimelineEntryPath).timelineItemData.text = sText;
			oTimelineModel.getProperty(sTimelineEntryPath).timelineItemData.timelineEntryDetails = []; // clear any timeline entry details
			
			
		},
		
		/**
		 * Delete a Timeline Entry.
		 * This method should be called when a custom action requires a deletion of a Timeline entry and should only be called if an
		 * a delete to the backend is performed successfully.
		 * @public
		 * @param {string} sId - the id of the timeline entry to delete
		 */
		deleteTimelineEntry: function(sId){
			var oTimelineEntry = sap.ui.getCore().byId(sId);
			var sTimelineEntryPath = oTimelineEntry.getBindingContext().getPath();
			var oTimelineModel = oTimelineEntry.getModel();
			var oTimelineModelEntry = oTimelineModel.getProperty(sTimelineEntryPath); // get the timeline entry within the model
			 // get the index of the timeline entry within the model
			var iTimelineEntryIndex = oTimelineModel.getData().timelineData.indexOf(oTimelineModelEntry);
			
			// remove the timeline entry from the model. The function splice removes items based on index and number of items to remove
			oTimelineModel.getData().timelineData.splice(iTimelineEntryIndex, 1);
			// by destroying this timeline entry it will also remove it from the content of the timeline
			oTimelineEntry.destroy(); 
		},
		/**************************************************************************************
		 * PRIVATE METHODS for the Component
		 **************************************************************************************/
		
		/**
		 * Set the class variable responsible for enabling the social features to true or false
		 * @private
		 */
		_setEnableSocial : function() {
			if(this._checkJamConfiguration()){
				this._bEnableSocial = this.getEnableSocial();
			}
			else{
				this._bEnableSocial = false;
			}
		},
		
		/**
		 * check Jam Configuration
		 * This method is responsible to check Jam configuration status
		 * if status is false, all social features of the timeline should be hidden
		 * @private
		 */
		_checkJamConfiguration : function() {
			var bStatusOk = true;
			var self = this;
			var fSuccess = function(bConfigurationStatus) {
				if(bConfigurationStatus === false){
					bStatusOk = false;
				}
			};
			var fError = function(sError) {
				self._oCommonUtil.displayError();
			};
			this._oSMIntegrationDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.SMIntegrationDataHandler(this._oSMIntegrationModel);
			this._oSMIntegrationDataHandler.getJamConfigurationStatus(fSuccess, fError);
			
			return bStatusOk;
		},
		/**
		 * initialize the OData models and Jam data handler
		 * @private
		 */
		_initialize: function(){
			// OData service models
			var asJson = true;
			if(!this._oCollabHostModel){
				this._oCollabHostModel = new sap.ui.model.odata.ODataModel(this._defaultAttributes.collaborationHostServiceUrl, asJson);
			}
			if(!this._oSMIntegrationModel){
				this._oSMIntegrationModel = new sap.ui.model.odata.ODataModel(this._defaultAttributes.smiServiceUrl, asJson);	
			}
			
			// Utilities
			if(!this._oJamDataHandler){
				this._oJamDataHandler = new sap.collaboration.components.socialtimeline.datahandlers.JamDataHandler(this._oCollabHostModel);	
			}			
		},
		/**
		 * Create the Timeline Control
		 * @private
		 */
		_createTimeline: function(){
			this._oTimeline = new sap.suite.ui.commons.Timeline( this.getId()+"_timeline", {
				data:[],

				filterSelectionChange : this._onFilterSelectionChange.bind(this),
				grow: this._onGrow.bind(this),
				addPost: this._onAddPost.bind(this),
				suggest: this._onSuggest.bind(this)
			});
			return this._oTimeline;
		},
		/**
		 * Refreshes the model for the timeline control
		 * @private
		 */
		_refreshTimelineModel: function(){
			var self = this;
			
			this._oTimeline.setBusyIndicatorDelay(0).setBusy(true);
			
			this._oTimelineDataHandler.getTimelineData(this._oFilter)
			.then(
				function(oTLData){
					self._oTimeline.setBusy(false);
					self._oTimelineModelData.timelineData = oTLData;
					self._oTimelineModel.setData(self._oTimelineModelData);
					
					self._hideReplyFromJamBarInTLItems(); // hide the replies from the TL items that are TL entries
					
				},
				function(oError){
					self._oCommonUtil.displayError();
					self._oTimeline.setBusy(false);
			});
		},
		/**
		 * Set model and bind the Timeline Item template to the Timeline
		 */
		_setTimelineModel: function(){
			var oCustomDataTemplate = new sap.ui.core.CustomData({
				key:"{key}",
				value: "{value}"
			});
			
			var oTLItemTemplate = new sap.suite.ui.commons.TimelineItem({
				dateTime: "{timelineItemData/dateTime}",
				userName: "{timelineItemData/userName}",
				title: "{timelineItemData/title}",
				icon: "{timelineItemData/icon}",
				filterValue: "{timelineItemData/filterValue}",
				userNameClickable: this._bEnableSocial,
				userNameClicked: this._onUserNameClicked,
				userPicture: "{timelineItemData/userPicture}",
				embeddedControl: this._createEmbeddedControl(),
				customAction: {
					template: oCustomDataTemplate,
					path: "timelineItemData/customActionData"
				},
				customActionClicked: this._onCustomActionClicked.bind(this),
				// The following properties and call back functions are used in the replies
				replyCount: "{_feedEntryData/RepliesCount}",
				replyListOpen: this._onReplyListOpen.bind(this),
				replyList: new sap.m.List({showNoData: false, width: "20rem"}),
				replyPost: this._onReplyPost.bind(this),
				suggest: this._onSuggest.bind(this)
			});
			
			this._oTimeline.setModel(this._oTimelineModel);
			this._oTimeline.bindAggregation("content", {
				path: "/timelineData",
				template: oTLItemTemplate
			});
			
			var oFilterItemTemplate = new sap.suite.ui.commons.TimelineFilterListItem({
				 	key : "{key}",
				 	text: "{text}"
				 });
			this._oTimeline.bindAggregation("filterList", {
	  	    	path: "/filterData",
	  	    	template: oFilterItemTemplate
	  		});
			
		},
		/**
		 * Returns the embedded control for the timeline
		 * @returns {sap.collaboration.components.socialtimeline.controls.TimelineEntryControl}
		 */
		_createEmbeddedControl: function(){
			return new sap.collaboration.components.socialtimeline.controls.TimelineEntryControl(
					this.getId()+"_embeddedControl",{timelineEntry: "{timelineItemData}"});
		},
		/**
		 * Builds the filter for the timeline
		 * 
		 * 1 - build the default filters
		 * 2 - build the custom filters
		 * 3 - concat the custom and default filters, then call method _setFilterData to set the filter to the timeline
		 * @private
		 */
		_buildFilter: function(){
			var aFilter = [];
			var aDefaultFilters = [{key: 0, text: this._oCommonUtil.getLanguageBundle().getText('TE_FILTER_DISCUSSION_POSTS'), value: ""},
				                   {key: 1, text: this._oCommonUtil.getLanguageBundle().getText('TE_FILTER_SYSTEM_UPDATES'), value: ""}];
			
			// if social is not enabled, then we need to remove the filter for the Discussion Posts
			if(this._bEnableSocial === false){
				for(var i=0; i<aDefaultFilters.length; i++){
					if(aDefaultFilters[i].text === this._oCommonUtil.getLanguageBundle().getText('TE_FILTER_DISCUSSION_POSTS')){
						aDefaultFilters.splice(i, 1);
						break;
					}
				}
			}
			
			var aCustomFilters = this.getCustomFilter();
			var iCustomFilterKey = aDefaultFilters.length;
			
			// The following for loop fills the keys of each object in the aCustomFilter array. The keys should start from the length 
			// of the aDefaultFilter, in other words, the last key of aDefaultFilters + 1. This ensures that when we concat both arrays 
			// (aDefaultFilters and aCustomerFilters) to create the entire filter (aFilter) to be set for the timeline every object in 
			// aFilter will receive a unique key.
			if(aCustomFilters){
				for(var i=0; i<aCustomFilters.length; i++){
					aCustomFilters[i].key = iCustomFilterKey;
					iCustomFilterKey++;
				}
			}
			
			aFilter = aDefaultFilters.concat(aCustomFilters);
			this._setFilterData(aFilter);
		},
		/**
		 * Sets the filter data in the timeline
		 * @param aFilter - the filter you want to set to the timeline
		 * @private
		 */
		_setFilterData: function(aFilter){				
			this._oTimelineModelData.filterData = this._oTimelineModelData.filterData.concat(aFilter);
			this._oTimelineModel.setData(this._oTimelineModelData);
		},
		/**
		 * TODO: This method needs to be revisited until it is not needed
		 * Go through the timeline items and hide the 'Reply' if social features are disabled.
		 * Also removes the reply for Timeline Entries because the anchor feed on Jam is not yet implemented.
		 * This is a workaround implementation until a better solution comes from the Timeline and Jam. 
		 */
		_hideReplyFromJamBarInTLItems: function(){
			var self = this;
			var aTimelineItems = this._oTimeline.getContent();
			aTimelineItems.forEach(function(oTLItem){
				var oTLData = oTLItem.getBindingContext().getObject();
				if(!oTLData._feedEntryData){
					self._hideReply(oTLItem);
				}	
			});
		},
		/**
		 * TODO: This method needs to be revisited until it is not needed
		 * Removes the reply link from a timeline item
		 * @param oTLItem
		 */
		_hideReply: function(oTLItem){
			oTLItem._replyLink.setVisible(false);
		},
		
		/**
		 * Get the Feed Entry ID given a Feed List Item
		 * @param {object} oTimelineItem - The TimelineItem event corresponding to the Feed List Item
		 * @returns {string} sFeedEntryId - The Feed Entry ID
		 */
		_getFeedId: function(oTimelineItem){
			var sPath = oTimelineItem.getBindingContext().getPath();
			var aPathElements = sPath.split("/");
			var sPosition = aPathElements[aPathElements.length -1];
			var sFeedEntryId = oTimelineItem.getModel().getData().timelineData[sPosition]._feedEntryData.Id;
			
			return sFeedEntryId;
		},

		/**
		 * Get the sender from Jam and assign it to a member attribute of the component.
		 * @private
		 */
		_getLoggedInUser: function(){
			var self = this;
			var oGetSender = this._oJamDataHandler.getSender();
			oGetSender.promise.done(function(oJamResults, response){
				self._oTimelineUser = oJamResults;
			});
			
			oGetSender.promise.fail(function(oError){
				self._oLogger.error('Failed to get the sender', oError.stack);
				//self._oCommonUtil.displayError(self._oLanguageBundle.getText('ST_POST_REPLY_FAILED')); 
			});
		},
		
		/*************************************************************************************
		 * EVENT HANDLERS
		 *************************************************************************************/
		/**
		 * Event handler for the grow event. 
		 * Appends the next page of data to the model for the timeline control
		 * @private
		 */
		_onGrow: function(){
			var self = this;
			this._oTimelineDataHandler.getTimelineData(this._oFilter)
			.then(
				function(oTLData){
					var oData = self._oTimelineModel.getData();
					oData.timelineData = oData.timelineData.concat(oTLData);
					self._oTimelineModel.setData(oData);
					
					self._hideReplyFromJamBarInTLItems();
				},
				function(oError){
					 self._oCommonUtil.displayError();
			});
		},
		/**
		 * Event Handler for the FilterSelectionChange event 
		 * @param {object} oEventData required - event handler data 
		 * @private
		 */
		_onFilterSelectionChange : function(oEventData) {
			this._oFilter = {"backend": undefined, "jam": undefined}; // reset the filter
			this._oTimelineDataHandler.reset();
			
			var oSelectedItem = oEventData.getParameter('selectedItem');
			
			// The only case where the selected item does not have a key is if the user pressed the filter 'All'.
			// In this case we don't set anything to the filter (this._oFilter)
			if(oSelectedItem.getProperty('key')){
				var sSelectedKey = parseInt(oSelectedItem.getProperty('key'));
				switch(sSelectedKey) {
					case 0: // '0' is the key for the filter 'Discussion Posts'
						this._oFilter.jam = this._oTimelineDataHandler.constants.FILTER_JAM_ALL;
						break;
					case 1: // '1' is the key for the filter 'System Updates'
						this._oFilter.backend = this._oTimelineDataHandler.constants.FILTER_BACKEND_ALL;
						break;
					default: // any other key would have to be a key for the custom filter 
						var aFilterData = this._oTimelineModelData.filterData;
						var iNumberOfFilters = aFilterData.length;
						var iNumberOfCustomFilters = this.getCustomFilter().length;
						
						// To find the index where the custom filters in the aFilterData start, we need to subtract the total number of filters
						// by the number of custom filters. This gives us the starting position for the custom filters in aFilterData, which
						// we loop through to find the value based on the key (sSelectedKey)
						var iIndexOfCustomFilters = iNumberOfFilters - iNumberOfCustomFilters;
						for (var i=iIndexOfCustomFilters; i<aFilterData.length; i++){
							if(sSelectedKey == aFilterData[i].key){
								this._oFilter.backend = aFilterData[i].value;
								break;
							}
						}
				}
			}
			this._refreshTimelineModel();
		},
		/**
		 * Event handler for userNameClicked event
		 * @param {object} oControlEvent - event when the user name is clicked
		 */
		_onUserNameClicked: function(oControlEvent){
			
			var oSocialTimelineComponent = oControlEvent.getSource().getParent().getParent(); // get the Component of the Social Timeline to have a single instance of the SocialProfile
			
			if(!oSocialTimelineComponent._oSocialProfile){
				oSocialTimelineComponent._oSocialProfile = sap.ui.getCore().createComponent(
									{	name:"sap.collaboration.components.socialprofile",
										id: this.getId()+"_socialProfile"
				});
				oSocialTimelineComponent._oSocialProfile._defaultAttributes = oSocialTimelineComponent._defaultAttributes; //copy odata service urls to the Social Profile 
			}
			
			var oSettings = {
					openingControl: oControlEvent.getSource()._userNameLink,
					memberId: oControlEvent.getSource().getBindingContext().getObject().timelineItemData.userEmail
			};
			oSettings.memberInfo = oSocialTimelineComponent._oTimelineDataHandler.getUserInfoFromBuffer(oSettings.memberId);
			oSocialTimelineComponent._oSocialProfile.setSettings(oSettings);
			oSocialTimelineComponent._oSocialProfile.open();
		},
		/**
		 * Event handler for adding post
		 * 
		 * 1 - map internal object to external object in Jam
		 * 2 - add a post for the external object in Jam
		 * @param {object} oControlEvent - event when the + add post button
		 */
		_onAddPost: function(oControlEvent){
			// if no business object is selected, return error
			if(!this._sBusinessObjectKey){
				this._oLogger.error("The business object key is undefined");
				this._oCommonUtil.displayError(this._oLanguageBundle.getText('ST_ADD_POST_NO_OBJECT_ERROR')); 
				return;
			}
				
			var oInternalBO = { 
					"appContext": this._oBusinessObjectMap.applicationContext,
					"collection": this._oBusinessObjectMap.collection,
					"key": this._sBusinessObjectKey,
					"odataServicePath": this._oBusinessObjectMap.servicePath 
			};
			
			var self = this;		
			var sContent = oControlEvent.getParameter("value");
			var fError = function(){
				self._oCommonUtil.displayError();
				self._oTimeline.setBusy(false);
			};
			
			if(sContent && sContent.trim() !== ""){ // post the user content if it's not empty
				var addingTopLevelPost = this._oTimelineDataHandler.addTopLevelPost(sContent, oInternalBO)
				
				// If a backend filter is not set, then add the feed entry to the UI and update the model.
				// If a backend filter is set, do not show the newly added post or update the model, the user will see the new post when
				// the backend filter has been removed
				if(!this._oFilter.backend){
					this._oTimeline.setBusyIndicatorDelay(0).setBusy(true);
					addingTopLevelPost.then(function(oActivity){
						return self._oJamDataHandler.getFeedEntryFromActivity(oActivity.Id);
					}, fError)
					.then(function(oFeedEntryFromActivity){
						// if the promise oFeedEntryFromActivity returned successfully, perform the following 'done'
						oFeedEntryFromActivity.promise.done(function(oData, response){
							var oJamFeedEntry = oData.results;
							var sImageURL = self._oTimelineDataHandler.buildImageUrl(oJamFeedEntry.Creator.ThumbnailImage.Id, oJamFeedEntry.Creator.ThumbnailImage.ThumbnailImageType);
							
							// create the feed entry to be added to the timeline Model
							var oFeedEntry = {
									_feedEntryData: oJamFeedEntry,
									timelineItemData: {
										dateTime: oJamFeedEntry.CreatedAt,
										icon: "sap-icon://post",
										text: oJamFeedEntry.Text,
										title: oJamFeedEntry.Action,
										userEmail: oJamFeedEntry.Creator.Email,
										userName: oJamFeedEntry.Creator.FullName,
										userPicture: sImageURL
									}
							};
							
							var aModelData = self._oTimeline.getModel().getData();
							aModelData.timelineData.push(oFeedEntry);					
							self._oTimeline.setBusy(false);
							
							var oTimelineItem = new sap.suite.ui.commons.TimelineItem({
								dateTime: new Date(oJamFeedEntry.CreatedAt),
								userName: oJamFeedEntry.Creator.FullName,
								title: oJamFeedEntry.Action,
								text: oJamFeedEntry.Text,
								icon: "sap-icon://post",
								userNameClickable: true,
								userNameClicked: self._onUserNameClicked,
								userPicture: sImageURL,
								replyCount: "{_feedEntryData/RepliesCount}",
								replyListOpen: self._onReplyListOpen.bind(self),
								replyList: new sap.m.List({showNoData: false, width: "20rem"}),
								replyPost: self._onReplyPost.bind(self),
								suggest: self._onSuggest.bind(self)
							});
							
							// add the timeline item to the timeline
							self._oTimeline.addContent(oTimelineItem);
							
							// check if the current user who created a new high level post is in the buffer, if not, then add it
							if(!self._oTimelineDataHandler.getUserInfoFromBuffer(oJamFeedEntry.Creator.Email)){
								self._oTimelineDataHandler.addUserInfoToBuffer(oJamFeedEntry.Creator);
							}
							
							// create a binding context in the model with the same path as the newly created feed entry
							// create a context object using the same path and set the binding context for this newly created timeline item
							var iFeedEntryIndex = aModelData.timelineData.indexOf(oFeedEntry);
							oTimelineItem.getParent().getModel().createBindingContext("/timelineData/" + iFeedEntryIndex);
							var oContext = new sap.ui.model.Context(oTimelineItem.getParent().getModel(), "/timelineData/" + iFeedEntryIndex);
							oTimelineItem.setBindingContext(oContext);
						});
						// if the promise oFeedEntryFromActivity returned unsuccessfully, perform the following 'fail'
						oFeedEntryFromActivity.promise.fail(fError);
					});	
				}
			}			
		},
		/**
		 * Gets the suggestions when the user presses '@' in High Level Posts and Replies.
		 * 
		 * 1 - bind a template to the aggregation 'suggestionItems' for the event source (event source could be Timeline or Timeline Item)
		 * 2 - abort existing requests, parse the user input and clear existing suggestions.
		 * 3 - make the call to get the suggestions and update the model with the suggestions
		 * @param {object} oEvent - the event after the user presses '@'
		 * @private
		 */
		_onSuggest: function(oEvent){
			// All aggregation binding for the Timeline is done in the _setTimelineModel method. For the suggestions, this is not the case.
			// The aggregation binding is done here because of a bug in the Timeline itself. If we move the binding to the _setTimelineModel
			// method, it will bug and the entire Social Timeline will not load. We will keep it here until a fix is deployed.
			if(!oEvent.getSource().getBinding('suggestionItems')){
				var oSuggestionItem = new sap.m.StandardListItem({
					title: "{name}", 
					description: "{email}"
					});
				oEvent.getSource().bindAggregation("suggestionItems", {
					path: "/suggestions",
					template: oSuggestionItem
				});
			}
			
			if(this.gettingSuggestions){
				this.gettingSuggestions.request.abort();
			}
			
			var sValue = oEvent.getParameter("suggestValue").substring(1); // remove first character '@'
			var oTimelineModelData = this._oTimelineModel.getData();
			
			// We check if the sValue (user input) is 1, if so, it implies that it's the first letter entered by the user and the first time
			// the suggestions will be triggered. In this case we need to clear any existing suggestions that might be there from the last
			// time the user triggered the suggestions.
			if(sValue.length == 1){
				oTimelineModelData.suggestions = [];
				this._oTimelineModel.setData(oTimelineModelData);
			}
			
			var self = this;
			this.gettingSuggestions = this._oJamDataHandler.getSuggestions(sValue);
			
			this.gettingSuggestions.promise.done(function(oData, response){
				var aJamResults = oData.results;
				var aSuggestions = [];
				oTimelineModelData.suggestions = []; // clear the suggestions from the last user input
				
				for(var i = 0; i < aJamResults.length; i++){
					aSuggestions.push({"name" : aJamResults[i].FullName, "email" : aJamResults[i].Email});
				}
				oTimelineModelData.suggestions = oTimelineModelData.suggestions.concat(aSuggestions);
				self._oTimelineModel.setData(oTimelineModelData);
			});
			
			this.gettingSuggestions.promise.fail(function(oError){
				if(oError.response && oError.response.statusCode){
					self._oCommonUtil.displayError();
				}
			});
		},
		/**
		 * Event handler for customActionClicked event
		 * @param oCustomActionEvent
		 */
		_onCustomActionClicked: function(oCustomActionEvent){
			var oCustomActionEventParam = {};
			var oBindingContext = oCustomActionEvent.getSource().getBindingContext();
			var sBindingPath = oBindingContext.getPath(); 
			var oOdataEntry = oCustomActionEvent.getSource().getModel().getProperty(sBindingPath + "/timelineItemData/customActionData/oDataEntry");
			
			oCustomActionEventParam.oDataEntry = oOdataEntry;
			oCustomActionEventParam.timelineEntryId = oCustomActionEvent.getParameters().id;
			oCustomActionEventParam.key = oCustomActionEvent.getParameters().key;
			this.fireCustomActionPress(oCustomActionEventParam); 
		},
		
		/**
		 * Load replies for a specific High Level Feed when the user clicks on the Reply link of the TimelineItem.
		 * Fetch the replies from the Jam OData Service.
		 * Set the results to the Timeline OData Model.
		 * @param {object} oEventData
		 * @private
		 */
		_onReplyListOpen: function(oEventData){
			
			var self = this;
			var oTimelineItem = oEventData.getSource();
			
			try{
				var sFeedEntryId = this._getFeedId(oTimelineItem);
				if (!sFeedEntryId){
					throw new Error('Failed to get the feed entry ID.');
				}
			}
			catch(oError){
				this._oLogger.error('Failed to get the feed entry ID');
				// In this case, the reply box needs to be closed manually.
				this._oCommonUtil.displayError(this._oLanguageBundle.getText('ST_GET_REPLIES_FAILED'));
				return;	
			}			
						
			oTimelineItem.getReplyList().setBusyIndicatorDelay(0).setBusy(true);
			var gettingReplies = this._oJamDataHandler.getReplies(sFeedEntryId);
			
			gettingReplies.promise.done(function(oJamResults, response){
				
				var aJamResults = oJamResults.results;
				aJamResults.reverse();
				
				oTimelineItem.getReplyList().removeAllItems();
				// A mutation observer is used as workaround to set the focus on the reply box at the bottom of the list (only the first time).
				// The timeline control would need to do something similar, but for them it's working because they provide the replies populated in the model.
				// This workaround needs to be reviewed on SP13 under a new BLI (binding reply to the model)				
				//self._appendListObserver(oTimelineItem.getReplyList());				
				// End of workaround
				for(var i = 0; i < aJamResults.length; i++){
					var oResult = aJamResults[i];
					oTimelineItem.getReplyList().addItem(new sap.m.FeedListItem({
		         		text: oResult.Text,		         		
						icon: self._oTimelineDataHandler.buildImageUrl(oResult.ThumbnailImage.Id, oResult.ThumbnailImage.ThumbnailImageType),		         		
						timestamp: self._oCommonUtil.formatDateToString(oResult.CreatedAt),
						sender: oResult.Creator.FullName,
						iconActive: false,
						senderActive: false
					}));
				}
				
				oTimelineItem.getReplyList().setBusy(false);				
			});
			
			gettingReplies.promise.fail(function(){
				self._oLogger.error('Failed to get the replies.');
				// In this case, the reply box is closed successfully when the error message is displayed
				self._oCommonUtil.displayError(self._oCommonUtil.getLanguageBundle().getText('ST_GET_REPLIES_FAILED')); 
			});			
		},
		
		/**
		 * Add the reply to Jam and the reply list when the user clicks on "Reply" in the replies box. 
		 * Post the reply for a specific High Level Feed to Jam.
		 * Set the results to the Timeline OData Model.
		 * @param {object} oEventData
		 * @private
		 */
		_onReplyPost: function(oEventData){
			var self = this;
			var sReplyText = oEventData.getParameter("value");
			// Add reply if it's not an empty reply
			if(sReplyText && sReplyText.trim() !== ""){
				var oTimelineItem = oEventData.getSource();
							
				try{
					var sFeedEntryId = this._getFeedId(oTimelineItem);
					if (!sFeedEntryId){
						throw new Error('Failed to get the feed entry ID.');
					}
				}
				catch(oError){
					this._oLogger.error('Failed to get the feed entry ID');
					this._oCommonUtil.displayError(this._oLanguageBundle.getText('ST_POST_REPLY_FAILED')); //Pop-over on pop-over not allowed 
					return;	
				}
				
				// Post the reply to Jam
				var postingReply = this._oJamDataHandler.postReply(sFeedEntryId, sReplyText);
	
				postingReply.promise.done(function(oJamResults, response){
	
					// Add reply to the reply list
					// An new FeedListItem will be created and added to the reply list control 
					// The properties iconActive and senderActive of the template are set to false to disable the handler when clicking on the image
					// so the social profile will not be called
					// A mock up is needed to solve the conflicting UX guideline that a pop-over on a pop-over is not allowed
					oTimelineItem.getReplyList().addItem(new sap.m.FeedListItem( {
						text: sReplyText,
						icon : "{timelineItemData/userPicture}",
						timestamp:  self._oCommonUtil.formatDateToString(new Date()),
						sender: self._oTimelineUser.FullName,
						iconActive: false,
						senderActive: false
					}));
					
					oTimelineItem.setReplyCount(oTimelineItem.getReplyList().getItems().length);
				});
				
				postingReply.promise.fail(function(){
					self._oLogger.error('Failed to post the reply.');
					self._oCommonUtil.displayError(self._oCommonUtil.getLanguageBundle().getText('ST_POST_REPLY_FAILED')); 
				});
			}
		},
		
		/**
		 * Create a Mutation Observer and attach it to the Reply List in order to scroll down to the last item.
		 * @param {sap.m.List} oList
		 * @private
		 */
		_appendListObserver: function(oList){
			var self = this;
			// 1. Use the right class for each browser
			var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
			// 2. Get the dom ref for the reply box (pop over)
			var oReplyBox = oList.getParent();
			var oReplyBoxDomRef = oReplyBox.getDomRef();
			var oTextArea = oList.getParent().getContent()[1];
			// 3. Declare the observer object
			self.oListObserver = new MutationObserver(function(mutations) {
				var isFocusSet = false;
			    mutations.forEach(function(mutation) {
			        if (!isFocusSet && mutation.type === 'attributes') {
			        	oTextArea.getParent().focus();
			        	oTextArea.focus();
			        	self.oListObserver.takeRecords();
			        	self.oListObserver.disconnect();
			        	isFocusSet = true;
			        }
			      });
			    });
			// 4. Append obsever to the reply list    
			self.oListObserver.observe(oReplyBoxDomRef, { childList: false , attributes: true, subTree: false });
		},
		
		/**
		 * Validates the input parameters provided to the Social Component
		 * @private
		 */
		_validateInputParameters: function(){
			/*
			 * Validation for the customFilter
			 * */
			var aCustomFilter = this.getCustomFilter();
			if(aCustomFilter){
				if(!jQuery.isArray(aCustomFilter)){
					this._oLogger.error("The type defined for the property customFilter is not an array and not be included in the filter.");
					this.setCustomFilter([]);
				}
				else {
					for(var i=0; i<aCustomFilter.length; i++){
						if(!aCustomFilter[i].value || !aCustomFilter[i].text || typeof(aCustomFilter[i].value) !== "string" || typeof(aCustomFilter[i].text) !== "string"){
							this._oLogger.error("The value or text for the filter " + JSON.stringify(aCustomFilter[i]) + " is not defined or not a string. It has been removed from the filter list.");
							aCustomFilter.splice(i, 1);
							i--;
						}
					}
				}
			}
			else {
				this.setCustomFilter([]);
			}
			
		}
		
	}
);

/**
 * Getter for property <code>alignment</code>.
 * Timeline item alignment.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.suite.ui.commons.TimelineAlignment} the value of property <code>alignment</code>
 * @public
 * @name sap.suite.ui.commons.Timeline#getAlignment
 * @function
 */

/**
 * Setter for property <code>alignment</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAlignment} oAlignment  new value for property <code>alignment</code>
 * @return {sap.suite.ui.commons.Timeline} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.Timeline#setAlignment
 * @function
 */

/**
 * Getter for property <code>axisOrientation</code>.
 * Timeline axis orientation.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.suite.ui.commons.TimelineAxisOrientation} the value of property <code>axisOrientation</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getAxisOrientation
 * @function
 */

/**
 * Setter for property <code>axisOrientation</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.suite.ui.commons.TimelineAxisOrientation} oAxisOrientation  new value for property <code>axisOrientation</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setAxisOrientation
 * @function
 */

/**
 * Getter for property <code>noDataText</code>.
 * This text is displayed when the control has no data.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setNoDataText
 * @function
 */

/**
 * Getter for property <code>showIcons</code>.
 * Show icon on each Timeline item.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showIcons</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getShowIcons
 * @function
 */

/**
 * Setter for property <code>showIcons</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowIcons  new value for property <code>showIcons</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setShowIcons
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Set Timeline control visibility
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setVisible
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Sets the width of the Timeline.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.collaboration.components.socialtimeline.Component} <code>this</code> to allow method chaining
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#setWidth
 * @function
 */

/**
 * Getter for property <code>customFilter</code>.
 *
 * Default value is <code>[]</code>. The customFilter is an array of objects, each object contains text and value.
 * Text is the name of the filter category and value is the filter value.
 *
 * @return {array} the value of property <code>customFilter</code> 
 * @public
 * @name sap.collaboration.components.socialtimeline.Component#getCustomFilter
 * @function
 */

/**
 * Event fire when a custom action is clicked
 *
 * @name sap.collaboration.components.socialtimeline.Component#customActionPress
 * @event
 * @param {object} oEventData
 * @public
 */


}; // end of sap/collaboration/components/socialtimeline/Component.js
